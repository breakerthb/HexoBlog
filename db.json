{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"source/PIC/avatar.png","path":"PIC/avatar.png","modified":0,"renderable":0},{"_id":"source/uploads/avatar.png","path":"uploads/avatar.png","modified":0,"renderable":0},{"_id":"source/uploads/avatar.jpg","path":"uploads/avatar.jpg","modified":0,"renderable":0},{"_id":"themes/next/source/404.html","path":"404.html","modified":0,"renderable":1},{"_id":"themes/next/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/next/source/images/algolia_logo.svg","path":"images/algolia_logo.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/avatar.gif","path":"images/avatar.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","path":"images/cc-by-nc-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","path":"images/cc-by-nc-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nc.svg","path":"images/cc-by-nc.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-nd.svg","path":"images/cc-by-nd.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by-sa.svg","path":"images/cc-by-sa.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-zero.svg","path":"images/cc-zero.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/loading.gif","path":"images/loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-l.svg","path":"images/quote-l.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/cc-by.svg","path":"images/cc-by.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/placeholder.gif","path":"images/placeholder.gif","modified":0,"renderable":1},{"_id":"themes/next/source/images/quote-r.svg","path":"images/quote-r.svg","modified":0,"renderable":1},{"_id":"themes/next/source/images/searchicon.png","path":"images/searchicon.png","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/affix.js","path":"js/src/affix.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/algolia-search.js","path":"js/src/algolia-search.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/bootstrap.js","path":"js/src/bootstrap.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/exturl.js","path":"js/src/exturl.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/hook-duoshuo.js","path":"js/src/hook-duoshuo.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/motion.js","path":"js/src/motion.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/post-details.js","path":"js/src/post-details.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/scrollspy.js","path":"js/src/scrollspy.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/utils.js","path":"js/src/utils.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","path":"lib/algolia-instant-search/instantsearch.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","path":"lib/canvas-nest/canvas-nest.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/LICENSE","path":"lib/fastclick/LICENSE","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/README.md","path":"lib/fastclick/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/bower.json","path":"lib/fastclick/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","path":"lib/font-awesome/HELP-US-OUT.txt","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/bower.json","path":"lib/font-awesome/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","path":"lib/jquery_lazyload/CONTRIBUTING.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","path":"lib/jquery_lazyload/README.md","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","path":"lib/jquery_lazyload/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","path":"lib/jquery_lazyload/jquery.lazyload.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","path":"lib/jquery_lazyload/jquery.scrollstop.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/bower.json","path":"lib/velocity/bower.json","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.min.js","path":"lib/velocity/velocity.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","path":"lib/velocity/velocity.ui.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","path":"lib/velocity/velocity.ui.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/jquery/index.js","path":"lib/jquery/index.js","modified":0,"renderable":1},{"_id":"themes/next/source/js/src/schemes/pisces.js","path":"js/src/schemes/pisces.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","path":"lib/fancybox/source/blank.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","path":"lib/fancybox/source/fancybox_loading.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","path":"lib/fancybox/source/fancybox_sprite.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","path":"lib/fancybox/source/fancybox_loading@2x.gif","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","path":"lib/fancybox/source/fancybox_overlay.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","path":"lib/fancybox/source/fancybox_sprite@2x.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","path":"lib/fancybox/source/jquery.fancybox.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","path":"lib/fancybox/source/jquery.fancybox.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","path":"lib/fancybox/source/jquery.fancybox.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","path":"lib/fastclick/lib/fastclick.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","path":"lib/fastclick/lib/fastclick.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","path":"lib/font-awesome/css/font-awesome.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","path":"lib/font-awesome/css/font-awesome.css.map","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","path":"lib/font-awesome/css/font-awesome.min.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","path":"lib/ua-parser-js/dist/ua-parser.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","path":"lib/ua-parser-js/dist/ua-parser.pack.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","path":"lib/font-awesome/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","path":"lib/font-awesome/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"themes/next/source/lib/velocity/velocity.js","path":"lib/velocity/velocity.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","path":"lib/fancybox/source/helpers/fancybox_buttons.png","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","path":"lib/fancybox/source/helpers/jquery.fancybox-buttons.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","path":"lib/fancybox/source/helpers/jquery.fancybox-media.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","modified":0,"renderable":1},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","path":"lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","path":"lib/font-awesome/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","path":"lib/font-awesome/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","path":"lib/font-awesome/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","path":"lib/algolia-instant-search/instantsearch.min.js","modified":0,"renderable":1},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","path":"lib/font-awesome/fonts/fontawesome-webfont.svg","modified":0,"renderable":1}],"Cache":[{"_id":"source/404.html","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1489734634977},{"_id":"themes/next/.bowerrc","hash":"3228a58ed0ece9f85e1e3136352094080b8dece1","modified":1489734651169},{"_id":"themes/next/.editorconfig","hash":"792fd2bd8174ece1a75d5fd24ab16594886f3a7f","modified":1489734651197},{"_id":"themes/next/.gitattributes","hash":"44bd4729c74ccb88110804f41746fec07bf487d4","modified":1489734651213},{"_id":"themes/next/.gitignore","hash":"5f09fca02e030b7676c1d312cd88ce8fbccf381c","modified":1489734651153},{"_id":"themes/next/.hound.yml","hash":"b76daa84c9ca3ad292c78412603370a367cc2bc3","modified":1489734651445},{"_id":"themes/next/.javascript_ignore","hash":"f9ea3c5395f8feb225a24e2c32baa79afda30c16","modified":1489734651445},{"_id":"themes/next/.jshintrc","hash":"9928f81bd822f6a8d67fdbc909b517178533bca9","modified":1489734651449},{"_id":"themes/next/.stylintrc","hash":"b28e24704a5d8de08346c45286574c8e76cc109f","modified":1489734651465},{"_id":"themes/next/.travis.yml","hash":"c42d9608c8c7fe90de7b1581a8dc3886e90c179e","modified":1489734651457},{"_id":"themes/next/LICENSE","hash":"f293bcfcdc06c0b77ba13570bb8af55eb5c059fd","modified":1489734655873},{"_id":"themes/next/README.md","hash":"500b5606eb6a09c979d16128f8b00f4bf9bc95ac","modified":1489734656125},{"_id":"themes/next/README.en.md","hash":"4ece25ee5f64447cd522e54cb0fffd9a375f0bd4","modified":1489734656117},{"_id":"themes/next/_config.yml","hash":"26c89dd30c602b8f35b7f3a62b8ba3ac293ea32e","modified":1489819081624},{"_id":"themes/next/bower.json","hash":"5abc236d9cc2512f5457ed57c1fba76669eb7399","modified":1489734651465},{"_id":"themes/next/gulpfile.coffee","hash":"933e6d29eb82522cff0df209d52b935e91b1111c","modified":1489734651697},{"_id":"themes/next/package.json","hash":"7e87b2621104b39a30488654c2a8a0c6a563574b","modified":1489734655865},{"_id":"source/PIC/avatar.png","hash":"4a99f3c19c4865188152928779e0211c307d39fe","modified":1489734634981},{"_id":"source/_posts/BlogDemo.md","hash":"675be7acfc1c7f6f65af1353b059a6c025abad9c","modified":1489817550179},{"_id":"source/_posts/CRC32.md","hash":"1870f657f9067137d6d7d15b7d98a7b8b0a66bcd","modified":1489817275183},{"_id":"source/_posts/CSharpCheckBoxList.md","hash":"4ab65a8dfc5d8ecf58acc2f91bceb80e28f2b80e","modified":1489817849455},{"_id":"source/_posts/CSharpGDIDraw.md","hash":"25ea22844c95608ea623abb6bc326c8c33638cfe","modified":1489817525419},{"_id":"source/_posts/CSharpListBox-DropDownList.md","hash":"760ee4864fe6d1c33f06e4124545f10ed40a1292","modified":1489817777739},{"_id":"source/_posts/CSharpRadioButtonList.md","hash":"e4d10c60fbbab08af5d320157089d4750589500c","modified":1489818626327},{"_id":"source/_posts/GitHub-Usage.md","hash":"b676de844756bc5f5a467c1e9addd76ff401d358","modified":1489817514411},{"_id":"source/_posts/LinkOracle.md","hash":"20867c0fc1f83f53350b393646a96b35d0bc563f","modified":1489817498443},{"_id":"source/_posts/ObjectDataSource-1.md","hash":"e2e6a3f7844ce58a0e134373836e8ad1ba16909a","modified":1489817643771},{"_id":"source/_posts/ObjectDataSource-2.md","hash":"33214a5a45dca8d17723a23e919c4768e0f9938e","modified":1489817691015},{"_id":"source/_posts/SqlHelperOperate.md","hash":"11c15661a27323bb931fee6a23ea21989783cf71","modified":1489817481491},{"_id":"source/_posts/SqlHelperProcess.md","hash":"110aa540a8de189025156fb9a20b2f0bf6d185f3","modified":1489817977387},{"_id":"source/tags/index.md","hash":"4048e39f49611f55906f1a619ae2d723442d6d2e","modified":1489734634845},{"_id":"source/categories/index.md","hash":"c0c428a006797c765054bb40937e9cb4e143792f","modified":1489734634981},{"_id":"source/uploads/avatar.png","hash":"4a99f3c19c4865188152928779e0211c307d39fe","modified":1489734634981},{"_id":"source/uploads/avatar.jpg","hash":"bf2415efbe326e06b0ce1a072635f11feb573bdf","modified":1489737146854},{"_id":"themes/next/.github/CONTRIBUTING.md","hash":"5ab257af816986cd0e53f9527a92d5934ac70ae9","modified":1489734651217},{"_id":"themes/next/.github/ISSUE_TEMPLATE.md","hash":"c2024ded82143807c28a299c5fe6b927ef3525ff","modified":1489734651185},{"_id":"themes/next/languages/de.yml","hash":"1fdea1f84b7f691f5b4dd4d2b43eeb27b10fa0c8","modified":1489734651705},{"_id":"themes/next/languages/en.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1489734651717},{"_id":"themes/next/languages/default.yml","hash":"95ec5cdfb563854f231b76162a3494f6ecc5bf61","modified":1489734651709},{"_id":"themes/next/languages/id.yml","hash":"34396bef27c4ab9e9a3c5d3e3aa94b0e3b3a7b0d","modified":1489734651725},{"_id":"themes/next/languages/fr-FR.yml","hash":"e98f1558347752a20019b71f0b1f9c8be1b34f42","modified":1489734651709},{"_id":"themes/next/languages/ja.yml","hash":"49f12149edcc1892b26a6207328cda64da20116d","modified":1489734652005},{"_id":"themes/next/languages/ko.yml","hash":"b6bc5d6b0c000deb44099b42d3aebb8c49dbfca9","modified":1489734652173},{"_id":"themes/next/languages/pt-BR.yml","hash":"7742ba4c0d682cbe1d38305332ebc928abd754b5","modified":1489734652173},{"_id":"themes/next/languages/pt.yml","hash":"6b660b117314cad93f08757601df3adb04c68beb","modified":1489734652173},{"_id":"themes/next/languages/ru.yml","hash":"5022885d8955e1b91d8841048db272bf99c59a76","modified":1489734652173},{"_id":"themes/next/languages/zh-Hans.yml","hash":"9db17e566475e255b56bbfe68d9bfa266ba40871","modified":1489734652173},{"_id":"themes/next/languages/zh-hk.yml","hash":"19c23d21f262e24c06ee6ddfd51d2a6585304f88","modified":1489734652337},{"_id":"themes/next/languages/zh-tw.yml","hash":"68407799271c78ecc07f03d238257dd8c65ad42d","modified":1489734652537},{"_id":"themes/next/layout/_layout.swig","hash":"2c0c3547a5b470024326a33ae2779d5ee0252266","modified":1489734653149},{"_id":"themes/next/layout/archive.swig","hash":"b5b59d70fc1563f482fa07afd435752774ad5981","modified":1489734652557},{"_id":"themes/next/layout/category.swig","hash":"6422d196ceaff4220d54b8af770e7e957f3364ad","modified":1489734652577},{"_id":"themes/next/layout/index.swig","hash":"427d0b95b854e311ae363088ab39a393bf8fdc8b","modified":1489734652561},{"_id":"themes/next/layout/page.swig","hash":"3727fab9dadb967e9c2204edca787dc72264674a","modified":1489734652565},{"_id":"themes/next/layout/post.swig","hash":"e2e512142961ddfe77eba29eaa88f4a2ee43ae18","modified":1489734652561},{"_id":"themes/next/layout/schedule.swig","hash":"1f1cdc268f4ef773fd3ae693bbdf7d0b2f45c3a3","modified":1489734652825},{"_id":"themes/next/layout/tag.swig","hash":"07cf49c49c39a14dfbe9ce8e7d7eea3d4d0a4911","modified":1489734652857},{"_id":"themes/next/scripts/merge-configs.js","hash":"13c8b3a2d9fce06c2488820d9248d190c8100e0a","modified":1489734656141},{"_id":"themes/next/scripts/merge.js","hash":"9130dabe6a674c54b535f322b17d75fe6081472f","modified":1489734656185},{"_id":"themes/next/source/404.html","hash":"9eb955271b03c72a4bb23a06b60e4ecb4070a880","modified":1489734656421},{"_id":"themes/next/test/.jshintrc","hash":"19f93d13d1689fe033c82eb2d5f3ce30b6543cc0","modified":1489734665357},{"_id":"themes/next/test/intern.js","hash":"11fa8a4f5c3b4119a179ae0a2584c8187f907a73","modified":1489734665601},{"_id":"themes/next/test/helpers.js","hash":"a1f5de25154c3724ffc24a91ddc576cdbd60864f","modified":1489734665369},{"_id":"themes/next/source/fonts/.gitkeep","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489734661113},{"_id":"themes/next/layout/_custom/header.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1489734652853},{"_id":"themes/next/layout/_custom/sidebar.swig","hash":"adc83b19e793491b1c6ea0fd8b46cd9f32e592fc","modified":1489734652857},{"_id":"themes/next/layout/_macro/post-collapse.swig","hash":"5864f5567ba5efeabcf6ea355013c0b603ee07f2","modified":1489734653165},{"_id":"themes/next/layout/_macro/post.swig","hash":"2c2efe44ea013030f3ce5da7bfdeddb74489eb6e","modified":1489734653173},{"_id":"themes/next/layout/_macro/reward.swig","hash":"37e5b7c42ec17b9b6b786c5512bcc481a21c974e","modified":1489734653165},{"_id":"themes/next/layout/_macro/sidebar.swig","hash":"911b99ba0445b2c07373128d87a4ef2eb7de341a","modified":1489734653169},{"_id":"themes/next/layout/_macro/wechat-subscriber.swig","hash":"14e785adeb0e671ba0ff9a553e6f0d8def6c670c","modified":1489734653173},{"_id":"themes/next/layout/_partials/comments.swig","hash":"970aa668680896262b1056bb5787fc9ec8754495","modified":1489734653473},{"_id":"themes/next/layout/_partials/duoshuo-hot-articles.swig","hash":"5d4638c46aef65bf32a01681495b62416ccc98db","modified":1489734653473},{"_id":"themes/next/layout/_partials/footer.swig","hash":"c144be31fc0cd087de11829c650f78df923c6ef0","modified":1489734653473},{"_id":"themes/next/layout/_partials/head.swig","hash":"a0eafe24d1dae30c790ae35612154b3ffbbd5cce","modified":1489734653473},{"_id":"themes/next/layout/_partials/header.swig","hash":"a1ffbb691dfad3eaf2832a11766e58a179003b8b","modified":1489734653801},{"_id":"themes/next/layout/_partials/pagination.swig","hash":"9e8e21d194ef44d271b1cca0bc1448c14d7edf4f","modified":1489734653985},{"_id":"themes/next/layout/_partials/page-header.swig","hash":"1efd925d34a5d4ba2dc0838d9c86ba911e705fc9","modified":1489734653981},{"_id":"themes/next/layout/_partials/search.swig","hash":"7b61e96508df70152b809ea5354236ab7f0d54f4","modified":1489734654073},{"_id":"themes/next/layout/_scripts/baidu-push.swig","hash":"c057b17f79e8261680fbae8dc4e81317a127c799","modified":1489734654365},{"_id":"themes/next/layout/_scripts/boostrap.swig","hash":"03aaebe9d50f6acb007ec38cc04acd1cfceb404d","modified":1489734654365},{"_id":"themes/next/layout/_scripts/commons.swig","hash":"766b2bdda29523ed6cd8d7aa197f996022f8fd94","modified":1489734654781},{"_id":"themes/next/layout/_scripts/vendors.swig","hash":"4512867d80d9eddfc3a0f5fea3c456f33aa9d522","modified":1489734655861},{"_id":"themes/next/scripts/tags/button.js","hash":"62e6dbeb53d07627a048132c79630b45d9a8f2cc","modified":1489734656165},{"_id":"themes/next/scripts/tags/center-quote.js","hash":"535fc542781021c4326dec24d8495cbb1387634a","modified":1489734656165},{"_id":"themes/next/scripts/tags/exturl.js","hash":"79378f3a1cd90518b07808ed09156a3ab55ffa31","modified":1489734656385},{"_id":"themes/next/scripts/tags/full-image.js","hash":"8eeb3fb89540299bdbb799edfdfdac3743b50596","modified":1489734656389},{"_id":"themes/next/scripts/tags/group-pictures.js","hash":"49252824cd53184dc9b97b2f2d87ff28e1b3ef27","modified":1489734656397},{"_id":"themes/next/scripts/tags/note.js","hash":"6752925eedbdb939d8ec4d11bdfb75199f18dd70","modified":1489734656405},{"_id":"themes/next/source/css/main.styl","hash":"20702c48d6053c92c5bcdbc68e8d0ef1369848a0","modified":1489734656509},{"_id":"themes/next/source/images/algolia_logo.svg","hash":"90035272fa31a3f65b3c0e2cb8a633876ef457dc","modified":1489734661117},{"_id":"themes/next/source/images/avatar.gif","hash":"264082bb3a1af70d5499c7d22b0902cb454b6d12","modified":1489734661361},{"_id":"themes/next/source/images/cc-by-nc-nd.svg","hash":"c6524ece3f8039a5f612feaf865d21ec8a794564","modified":1489734661365},{"_id":"themes/next/source/images/cc-by-nc-sa.svg","hash":"3031be41e8753c70508aa88e84ed8f4f653f157e","modified":1489734661377},{"_id":"themes/next/source/images/cc-by-nc.svg","hash":"8d39b39d88f8501c0d27f8df9aae47136ebc59b7","modified":1489734661549},{"_id":"themes/next/source/images/cc-by-nd.svg","hash":"c563508ce9ced1e66948024ba1153400ac0e0621","modified":1489734661549},{"_id":"themes/next/source/images/cc-by-sa.svg","hash":"aa4742d733c8af8d38d4c183b8adbdcab045872e","modified":1489734661561},{"_id":"themes/next/source/images/cc-zero.svg","hash":"87669bf8ac268a91d027a0a4802c92a1473e9030","modified":1489734661713},{"_id":"themes/next/source/images/loading.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1489734661713},{"_id":"themes/next/source/images/quote-l.svg","hash":"94e870b4c8c48da61d09522196d4dd40e277a98f","modified":1489734661805},{"_id":"themes/next/source/images/cc-by.svg","hash":"28a0a4fe355a974a5e42f68031652b76798d4f7e","modified":1489734661709},{"_id":"themes/next/source/images/placeholder.gif","hash":"5fbd472222feb8a22cf5b8aa5dc5b8e13af88e2b","modified":1489734661797},{"_id":"themes/next/source/images/quote-r.svg","hash":"e60ae504f9d99b712c793c3740c6b100d057d4ec","modified":1489734661821},{"_id":"themes/next/source/images/searchicon.png","hash":"67727a6a969be0b2659b908518fa6706eed307b8","modified":1489734662049},{"_id":"themes/next/layout/_scripts/schemes/mist.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489734654785},{"_id":"themes/next/layout/_scripts/schemes/muse.swig","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489734654785},{"_id":"themes/next/source/css/_mixins/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489734659913},{"_id":"themes/next/source/css/_mixins/Mist.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489734659765},{"_id":"themes/next/source/css/_mixins/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489734659753},{"_id":"themes/next/source/css/_variables/Muse.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489734661077},{"_id":"themes/next/source/css/_variables/custom.styl","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1489734661053},{"_id":"themes/next/layout/_components/algolia-search/assets.swig","hash":"28ff4ed6714c59124569ffcbd10f1173d53ca923","modified":1489734652825},{"_id":"themes/next/layout/_components/algolia-search/dom.swig","hash":"ba698f49dd3a868c95b240d802f5b1b24ff287e4","modified":1489734652853},{"_id":"themes/next/layout/_partials/head/custom-head.swig","hash":"9e1b9666efa77f4cf8d8261bcfa445a9ac608e53","modified":1489734653477},{"_id":"themes/next/layout/_partials/head/external-fonts.swig","hash":"7ce76358411184482bb0934e70037949dd0da8ca","modified":1489734653477},{"_id":"themes/next/layout/_partials/search/localsearch.swig","hash":"2d1075f4cabcb3956b7b84a8e210f5a66f0a5562","modified":1489734653985},{"_id":"themes/next/layout/_partials/search/swiftype.swig","hash":"959b7e04a96a5596056e4009b73b6489c117597e","modified":1489734653985},{"_id":"themes/next/layout/_partials/search/tinysou.swig","hash":"eefe2388ff3d424694045eda21346989b123977c","modified":1489734653985},{"_id":"themes/next/layout/_partials/share/add-this.swig","hash":"23e23dc0f76ef3c631f24c65277adf7ea517b383","modified":1489734654365},{"_id":"themes/next/layout/_partials/share/duoshuo_share.swig","hash":"89c5a5240ecb223acfe1d12377df5562a943fd5d","modified":1489734654365},{"_id":"themes/next/layout/_partials/share/jiathis.swig","hash":"63315fcf210799f894208c9f512737096df84962","modified":1489734654365},{"_id":"themes/next/layout/_scripts/pages/post-details.swig","hash":"069d1357c717572256e5cdee09574ebce529cbae","modified":1489734654785},{"_id":"themes/next/layout/_scripts/schemes/pisces.swig","hash":"a44acf9b0d0f44ef3dfc767376a95c984cc127de","modified":1489734654785},{"_id":"themes/next/layout/_scripts/third-party/analytics.swig","hash":"e46900412e28f529c26e25e6bada342006435a32","modified":1489734655353},{"_id":"themes/next/layout/_scripts/third-party/comments.swig","hash":"a279e1881208aff2f669fe235e9661ab825bc540","modified":1489734655641},{"_id":"themes/next/layout/_scripts/third-party/lean-analytics.swig","hash":"92dc60821307fc9769bea9b2d60adaeb798342af","modified":1489734655633},{"_id":"themes/next/layout/_scripts/third-party/localsearch.swig","hash":"f4dbd4c896e6510ded8ebe05394c28f8a86e71bf","modified":1489734655649},{"_id":"themes/next/layout/_scripts/third-party/mathjax.swig","hash":"6d25596d6a7c57700d37b607f8d9a62d89708683","modified":1489734655849},{"_id":"themes/next/layout/_scripts/third-party/schedule.swig","hash":"22369026c87fc23893c35a7f250b42f3bb1b60f1","modified":1489734655857},{"_id":"themes/next/layout/_scripts/third-party/tinysou.swig","hash":"cb3a5d36dbe1630bab84e03a52733a46df7c219b","modified":1489734655857},{"_id":"themes/next/layout/_partials/share/baidushare.swig","hash":"1f1107468aaf03f7d0dcd7eb2b653e2813a675b4","modified":1489734654365},{"_id":"themes/next/source/css/_custom/custom.styl","hash":"328d9a9696cc2ccf59c67d3c26000d569f46344c","modified":1489734659621},{"_id":"themes/next/source/css/_mixins/base.styl","hash":"78a83c38f69a8747bb74e420e6c9eeef1ea76525","modified":1489734659621},{"_id":"themes/next/source/css/_mixins/Pisces.styl","hash":"715d5b40dc52f319fe4bff0325beb874774d9bd9","modified":1489734659913},{"_id":"themes/next/source/css/_variables/Mist.styl","hash":"c8d35a6b9e3bff6d8fdb66de853065af9d37562d","modified":1489734661073},{"_id":"themes/next/source/css/_variables/base.styl","hash":"e7c76d93605e2b685274400afe51c55cc651486e","modified":1489734660837},{"_id":"themes/next/source/css/_variables/Pisces.styl","hash":"06f432f328a5b8a9ef0dbd5301b002aba600b4ce","modified":1489734661113},{"_id":"themes/next/source/js/src/affix.js","hash":"978e0422b5bf1b560236d8d10ebc1adcf66392e3","modified":1489734662049},{"_id":"themes/next/source/js/src/algolia-search.js","hash":"b172f697ed339a24b1e80261075232978d164c35","modified":1489734662053},{"_id":"themes/next/source/js/src/bootstrap.js","hash":"aab7be0a6e2724b3faa9338db93c19556c559625","modified":1489734662053},{"_id":"themes/next/source/js/src/exturl.js","hash":"e42e2aaab7bf4c19a0c8e779140e079c6aa5c0b1","modified":1489734662053},{"_id":"themes/next/source/js/src/hook-duoshuo.js","hash":"a6119070c0119f33e08b29da7d2cce2635eb40a0","modified":1489734662161},{"_id":"themes/next/source/js/src/motion.js","hash":"269414e84df544a4ccb88519f6abae4943db3c67","modified":1489734662353},{"_id":"themes/next/source/js/src/post-details.js","hash":"3b2d64c2e6ae072ba2a9ebf7f09908a1543abd58","modified":1489734662361},{"_id":"themes/next/source/js/src/scrollspy.js","hash":"fe4da1b9fe73518226446f5f27d2831e4426fc35","modified":1489734662369},{"_id":"themes/next/source/js/src/utils.js","hash":"e13c9ccf70d593bdf3b8cc1d768f595abd610e6e","modified":1489734662381},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.css","hash":"90ef19edc982645b118b095615838d9c5eaba0de","modified":1489734662385},{"_id":"themes/next/source/lib/canvas-nest/canvas-nest.min.js","hash":"0387e75e23b1db108a755073fe52a0d03eb391a7","modified":1489734662665},{"_id":"themes/next/source/lib/fastclick/LICENSE","hash":"dcd5b6b43095d9e90353a28b09cb269de8d4838e","modified":1489734663605},{"_id":"themes/next/source/lib/fastclick/.bower.json","hash":"93ebd5b35e632f714dcf1753e1f6db77ec74449b","modified":1489734663605},{"_id":"themes/next/source/lib/fastclick/README.md","hash":"1decd8e1adad2cd6db0ab50cf56de6035156f4ea","modified":1489734663701},{"_id":"themes/next/source/lib/fastclick/bower.json","hash":"13379463c7463b4b96d13556b46faa4cc38d81e6","modified":1489734663545},{"_id":"themes/next/source/lib/font-awesome/.bower.json","hash":"a2aaaf12378db56bd10596ba3daae30950eac051","modified":1489734663865},{"_id":"themes/next/source/lib/font-awesome/.gitignore","hash":"69d152fa46b517141ec3b1114dd6134724494d83","modified":1489734663837},{"_id":"themes/next/source/lib/font-awesome/HELP-US-OUT.txt","hash":"4f7bf961f1bed448f6ba99aeb9219fabf930ba96","modified":1489734664621},{"_id":"themes/next/source/lib/font-awesome/.npmignore","hash":"dcf470ab3a358103bb896a539cc03caeda10fa8b","modified":1489734663857},{"_id":"themes/next/source/lib/font-awesome/bower.json","hash":"279a8a718ab6c930a67c41237f0aac166c1b9440","modified":1489734663861},{"_id":"themes/next/source/lib/jquery/.bower.json","hash":"91745c2cc6c946c7275f952b2b0760b880cea69e","modified":1489734664585},{"_id":"themes/next/source/lib/jquery_lazyload/CONTRIBUTING.md","hash":"4891864c24c28efecd81a6a8d3f261145190f901","modified":1489734664889},{"_id":"themes/next/source/lib/jquery_lazyload/.bower.json","hash":"b7638afc93e9cd350d0783565ee9a7da6805ad8e","modified":1489734664725},{"_id":"themes/next/source/lib/jquery_lazyload/README.md","hash":"895d50fa29759af7835256522e9dd7dac597765c","modified":1489734665037},{"_id":"themes/next/source/lib/jquery_lazyload/bower.json","hash":"65bc85d12197e71c40a55c0cd7f6823995a05222","modified":1489734664849},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.lazyload.js","hash":"481fd478650e12b67c201a0ea41e92743f8b45a3","modified":1489734664877},{"_id":"themes/next/source/lib/jquery_lazyload/jquery.scrollstop.js","hash":"0e9a81785a011c98be5ea821a8ed7d411818cfd1","modified":1489734664853},{"_id":"themes/next/source/lib/velocity/bower.json","hash":"2ec99573e84c7117368beccb9e94b6bf35d2db03","modified":1489734665141},{"_id":"themes/next/source/lib/velocity/.bower.json","hash":"05f960846f1c7a93dab1d3f9a1121e86812e8c88","modified":1489734665137},{"_id":"themes/next/source/lib/velocity/velocity.min.js","hash":"2f1afadc12e4cf59ef3b405308d21baa97e739c6","modified":1489734665353},{"_id":"themes/next/source/lib/velocity/velocity.ui.js","hash":"6a1d101eab3de87527bb54fcc8c7b36b79d8f0df","modified":1489734665357},{"_id":"themes/next/source/lib/velocity/velocity.ui.min.js","hash":"ed5e534cd680a25d8d14429af824f38a2c7d9908","modified":1489734665381},{"_id":"themes/next/source/lib/jquery/index.js","hash":"41b4bfbaa96be6d1440db6e78004ade1c134e276","modified":1489734664757},{"_id":"themes/next/layout/_scripts/third-party/analytics/application-insights.swig","hash":"60426bf73f8a89ba61fb1be2df3ad5398e32c4ef","modified":1489734654785},{"_id":"themes/next/layout/_scripts/third-party/analytics/baidu-analytics.swig","hash":"deda6a814ed48debc694c4e0c466f06c127163d0","modified":1489734655085},{"_id":"themes/next/layout/_scripts/third-party/analytics/busuanzi-counter.swig","hash":"4fcbf57c4918528ab51d3d042cff92cf5aefb599","modified":1489734655093},{"_id":"themes/next/layout/_scripts/third-party/analytics/cnzz-analytics.swig","hash":"8160b27bee0aa372c7dc7c8476c05bae57f58d0f","modified":1489734655101},{"_id":"themes/next/layout/_scripts/third-party/analytics/facebook-sdk.swig","hash":"394d008e5e94575280407ad8a1607a028026cbc3","modified":1489734655093},{"_id":"themes/next/layout/_scripts/third-party/analytics/google-analytics.swig","hash":"5d9943d74cc2e0a91badcf4f755c6de77eab193a","modified":1489734655117},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-analytics.swig","hash":"3658414379e0e8a34c45c40feadc3edc8dc55f88","modified":1489734655113},{"_id":"themes/next/layout/_scripts/third-party/analytics/tencent-mta.swig","hash":"a652f202bd5b30c648c228ab8f0e997eb4928e44","modified":1489734655349},{"_id":"themes/next/layout/_scripts/third-party/analytics/vkontakte-api.swig","hash":"c3971fd154d781088e1cc665035f8561a4098f4c","modified":1489734655353},{"_id":"themes/next/layout/_scripts/third-party/comments/disqus.swig","hash":"fb1d04ede838b52ca7541973f86c3810f1ad396e","modified":1489734655365},{"_id":"themes/next/layout/_scripts/third-party/comments/gentie.swig","hash":"03592d1d731592103a41ebb87437fe4b0a4c78ca","modified":1489734655369},{"_id":"themes/next/layout/_scripts/third-party/comments/duoshuo.swig","hash":"a356b2185d40914447fde817eb3d358ab6b3e4c3","modified":1489734655369},{"_id":"themes/next/layout/_scripts/third-party/comments/hypercomments.swig","hash":"3e8dc5c6c912628a37e3b5f886bec7b2e5ed14ea","modified":1489734655609},{"_id":"themes/next/layout/_scripts/third-party/comments/livere.swig","hash":"7240f2e5ec7115f8abbbc4c9ef73d4bed180fdc7","modified":1489734655613},{"_id":"themes/next/layout/_scripts/third-party/comments/youyan.swig","hash":"af9dd8a4aed7d06cf47b363eebff48850888566c","modified":1489734655629},{"_id":"themes/next/source/css/_common/components/back-to-top.styl","hash":"ef089a407c90e58eca10c49bc47ec978f96e03ba","modified":1489734656689},{"_id":"themes/next/source/css/_common/components/back-to-top-sidebar.styl","hash":"59ad08bcc6fe9793594869ac2b4c525021453e78","modified":1489734656689},{"_id":"themes/next/source/css/_common/components/buttons.styl","hash":"0dfb4b3ba3180d7285e66f270e1d3fa0f132c3d2","modified":1489734656689},{"_id":"themes/next/source/css/_common/components/comments.styl","hash":"471f1627891aca5c0e1973e09fbcb01e1510d193","modified":1489734656697},{"_id":"themes/next/source/css/_common/components/components.styl","hash":"a6bb5256be6195e76addbda12f4ed7c662d65e7a","modified":1489734656697},{"_id":"themes/next/source/css/_common/components/pagination.styl","hash":"711c8830886619d4f4a0598b0cde5499dce50c62","modified":1489734657489},{"_id":"themes/next/source/css/_common/components/tag-cloud.styl","hash":"dd8a3b22fc2f222ac6e6c05bd8a773fb039169c0","modified":1489734658613},{"_id":"themes/next/source/css/_common/outline/outline.styl","hash":"2186be20e317505cd31886f1291429cc21f76703","modified":1489734659377},{"_id":"themes/next/source/css/_common/scaffolding/base.styl","hash":"7804e31c44717c9a9ddf0f8482b9b9c1a0f74538","modified":1489734659385},{"_id":"themes/next/source/css/_common/scaffolding/helpers.styl","hash":"9c25c75311e1bd4d68df031d3f2ae6d141a90766","modified":1489734659477},{"_id":"themes/next/source/css/_common/scaffolding/scaffolding.styl","hash":"013619c472c7e4b08311c464fcbe9fcf5edde603","modified":1489734659621},{"_id":"themes/next/source/css/_common/scaffolding/normalize.styl","hash":"ece571f38180febaf02ace8187ead8318a300ea7","modified":1489734659485},{"_id":"themes/next/source/css/_common/scaffolding/tables.styl","hash":"64f5d56c08d74a338813df1265580ca0cbf0190b","modified":1489734659617},{"_id":"themes/next/source/css/_schemes/Mist/_base.styl","hash":"c2d079788d6fc2e9a191ccdae94e50d55bf849dc","modified":1489734660073},{"_id":"themes/next/source/css/_schemes/Mist/_header.styl","hash":"5ae7906dc7c1d9468c7f4b4a6feddddc555797a1","modified":1489734660265},{"_id":"themes/next/source/css/_schemes/Mist/_logo.styl","hash":"38e5df90c8689a71c978fd83ba74af3d4e4e5386","modified":1489734660277},{"_id":"themes/next/source/css/_schemes/Mist/_posts-expanded.styl","hash":"fda14bc35be2e1b332809b55b3d07155a833dbf4","modified":1489734660297},{"_id":"themes/next/source/css/_schemes/Mist/_menu.styl","hash":"b0dcca862cd0cc6e732e33d975b476d744911742","modified":1489734660297},{"_id":"themes/next/source/css/_schemes/Mist/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1489734660297},{"_id":"themes/next/source/css/_schemes/Mist/index.styl","hash":"9a5581a770af8964064fef7afd3e16963e45547f","modified":1489734659933},{"_id":"themes/next/source/css/_schemes/Muse/_logo.styl","hash":"8829bc556ca38bfec4add4f15a2f028092ac6d46","modified":1489734660569},{"_id":"themes/next/source/css/_schemes/Muse/_layout.styl","hash":"0efa036a15c18f5abb058b7c0fad1dd9ac5eed4c","modified":1489734660549},{"_id":"themes/next/source/css/_schemes/Muse/index.styl","hash":"a0e2030a606c934fb2c5c7373aaae04a1caac4c5","modified":1489734660289},{"_id":"themes/next/source/css/_schemes/Pisces/_layout.styl","hash":"f15537cee1a9ef4fa1e72a1670ebce4097db8115","modified":1489734660821},{"_id":"themes/next/source/css/_schemes/Muse/_menu.styl","hash":"82bbaa6322764779a1ac2e2c8390ce901c7972e2","modified":1489734660577},{"_id":"themes/next/source/css/_schemes/Pisces/_menu.styl","hash":"215de948be49bcf14f06d500cef9f7035e406a43","modified":1489734660813},{"_id":"themes/next/source/css/_schemes/Pisces/_sidebar.styl","hash":"e3e23751d4ad24e8714b425d768cf68e37de7ded","modified":1489734660837},{"_id":"themes/next/source/css/_schemes/Pisces/_posts.styl","hash":"2f878213cb24c5ddc18877f6d15ec5c5f57745ac","modified":1489734660837},{"_id":"themes/next/source/css/_schemes/Pisces/index.styl","hash":"69ecd6c97e7cdfd822ac8102b45ad0ede85050db","modified":1489734660577},{"_id":"themes/next/source/css/_schemes/Muse/_search.styl","hash":"1452cbe674cc1d008e1e9640eb4283841058fc64","modified":1489734660577},{"_id":"themes/next/source/css/_schemes/Pisces/_brand.styl","hash":"c4ed249798296f60bda02351fe6404fb3ef2126f","modified":1489734660809},{"_id":"themes/next/source/js/src/schemes/pisces.js","hash":"79da92119bc246fe05d1626ac98426a83ec90a94","modified":1489734662385},{"_id":"themes/next/source/lib/fancybox/source/blank.gif","hash":"2daeaa8b5f19f0bc209d976c02bd6acb51b00b0a","modified":1489734662669},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading.gif","hash":"1a755fb2599f3a313cc6cfdb14df043f8c14a99c","modified":1489734662669},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite.png","hash":"17df19f97628e77be09c352bf27425faea248251","modified":1489734662957},{"_id":"themes/next/source/lib/fancybox/source/fancybox_loading@2x.gif","hash":"273b123496a42ba45c3416adb027cd99745058b0","modified":1489734662689},{"_id":"themes/next/source/lib/fancybox/source/fancybox_overlay.png","hash":"b3a4ee645ba494f52840ef8412015ba0f465dbe0","modified":1489734662669},{"_id":"themes/next/source/lib/fancybox/source/fancybox_sprite@2x.png","hash":"30c58913f327e28f466a00f4c1ac8001b560aed8","modified":1489734662961},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.css","hash":"5f163444617b6cf267342f06ac166a237bb62df9","modified":1489734663261},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.js","hash":"1cf3d47b5ccb7cb6e9019c64f2a88d03a64853e4","modified":1489734663285},{"_id":"themes/next/source/lib/fancybox/source/jquery.fancybox.pack.js","hash":"53360764b429c212f424399384417ccc233bb3be","modified":1489734663393},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.js","hash":"06cef196733a710e77ad7e386ced6963f092dc55","modified":1489734663605},{"_id":"themes/next/source/lib/fastclick/lib/fastclick.min.js","hash":"2cae0f5a6c5d6f3cb993015e6863f9483fc4de18","modified":1489734663605},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css","hash":"0140952c64e3f2b74ef64e050f2fe86eab6624c8","modified":1489734663973},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.css.map","hash":"0189d278706509412bac4745f96c83984e1d59f4","modified":1489734663977},{"_id":"themes/next/source/lib/font-awesome/css/font-awesome.min.css","hash":"512c7d79033e3028a9be61b540cf1a6870c896f8","modified":1489734664125},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.min.js","hash":"38628e75e4412cc6f11074e03e1c6d257aae495b","modified":1489734665033},{"_id":"themes/next/source/lib/ua-parser-js/dist/ua-parser.pack.js","hash":"214dad442a92d36af77ed0ca1d9092b16687f02f","modified":1489734665025},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1489734664409},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1489734664429},{"_id":"themes/next/source/lib/velocity/velocity.js","hash":"9f08181baea0cc0e906703b7e5df9111b9ef3373","modified":1489734665309},{"_id":"themes/next/source/css/_common/components/footer/footer.styl","hash":"8994ffcce84deac0471532f270f97c44fea54dc0","modified":1489734656789},{"_id":"themes/next/source/css/_common/components/header/header.styl","hash":"ae1ca14e51de67b07dba8f61ec79ee0e2e344574","modified":1489734656973},{"_id":"themes/next/source/css/_common/components/header/menu.styl","hash":"8a2421cb9005352905fae9d41a847ae56957247e","modified":1489734656977},{"_id":"themes/next/source/css/_common/components/header/headerband.styl","hash":"d27448f199fc2f9980b601bc22b87f08b5d64dd1","modified":1489734656945},{"_id":"themes/next/source/css/_common/components/header/site-nav.styl","hash":"49c2b2c14a1e7fcc810c6be4b632975d0204c281","modified":1489734656965},{"_id":"themes/next/source/css/_common/components/header/site-meta.styl","hash":"6c00f6e0978f4d8f9a846a15579963728aaa6a17","modified":1489734656965},{"_id":"themes/next/source/css/_common/components/highlight/diff.styl","hash":"96f32ea6c3265a3889e6abe57587f6e2a2a40dfb","modified":1489734656965},{"_id":"themes/next/source/css/_common/components/highlight/highlight.styl","hash":"755b04edbbfbdd981a783edb09c9cc34cb79cea7","modified":1489734657189},{"_id":"themes/next/source/css/_common/components/highlight/theme.styl","hash":"b76387934fb6bb75212b23c1a194486892cc495e","modified":1489734657193},{"_id":"themes/next/source/css/_common/components/pages/archive.styl","hash":"7778920dd105fa4de3a7ab206eeba30b1a7bac45","modified":1489734657213},{"_id":"themes/next/source/css/_common/components/pages/categories.styl","hash":"4eff5b252d7b614e500fc7d52c97ce325e57d3ab","modified":1489734657225},{"_id":"themes/next/source/css/_common/components/pages/pages.styl","hash":"2039590632bba3943c39319d80ef630af7928185","modified":1489734657221},{"_id":"themes/next/source/css/_common/components/pages/post-detail.styl","hash":"9bf4362a4d0ae151ada84b219d39fbe5bb8c790e","modified":1489734657225},{"_id":"themes/next/source/css/_common/components/pages/schedule.styl","hash":"a82afbb72d83ee394aedc7b37ac0008a9823b4f4","modified":1489734657473},{"_id":"themes/next/source/css/_common/components/post/post-button.styl","hash":"beccb53dcd658136fb91a0c5678dea8f37d6e0b6","modified":1489734657521},{"_id":"themes/next/source/css/_common/components/post/post-collapse.styl","hash":"8fae54591877a73dff0b29b2be2e8935e3c63575","modified":1489734657541},{"_id":"themes/next/source/css/_common/components/post/post-eof.styl","hash":"2cdc094ecf907a02fce25ad4a607cd5c40da0f2b","modified":1489734657565},{"_id":"themes/next/source/css/_common/components/post/post-expand.styl","hash":"77d51c3de352566abf2cfcd3e6bc9eb431c4d898","modified":1489734657581},{"_id":"themes/next/source/css/_common/components/post/post-gallery.styl","hash":"387ce23bba52b22a586b2dfb4ec618fe1ffd3926","modified":1489734657913},{"_id":"themes/next/source/css/_common/components/post/post-meta.styl","hash":"b9a2e76f019a5941191f1263b54aef7b69c48789","modified":1489734657917},{"_id":"themes/next/source/css/_common/components/post/post-nav.styl","hash":"a5d8617a24d7cb6c5ad91ea621183ca2c0917331","modified":1489734657929},{"_id":"themes/next/source/css/_common/components/post/post-tags.styl","hash":"a352ae5b1f8857393bf770d2e638bf15f0c9585d","modified":1489734658009},{"_id":"themes/next/source/css/_common/components/post/post-title.styl","hash":"963105a531403d7aad6d9e5e23e3bfabb8ec065a","modified":1489734657941},{"_id":"themes/next/source/css/_common/components/post/post-type.styl","hash":"10251257aceecb117233c9554dcf8ecfef8e2104","modified":1489734658185},{"_id":"themes/next/source/css/_common/components/post/post.styl","hash":"bfd806d0a9f21446a22df82ac02e37d0075cc3b5","modified":1489734658197},{"_id":"themes/next/source/css/_common/components/post/post-reward.styl","hash":"e792c8dc41561c96d128e9b421187f1c3dc978a0","modified":1489734658009},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author-links.styl","hash":"2e7ec9aaa3293941106b1bdd09055246aa3c3dc6","modified":1489734658197},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-author.styl","hash":"920343e41c124221a17f050bbb989494d44f7a24","modified":1489734658213},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-blogroll.styl","hash":"5f6ea57aabfa30a437059bf8352f1ad829dbd4ff","modified":1489734658293},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-feed-link.styl","hash":"9486ddd2cb255227db102d09a7df4cae0fabad72","modified":1489734658313},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-nav.styl","hash":"45fa7193435a8eae9960267438750b4c9fa9587f","modified":1489734658493},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toc.styl","hash":"7690b9596ec3a49befbe529a5a2649abec0faf76","modified":1489734658473},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar-toggle.styl","hash":"a2ec22ef4a6817bbb2abe8660fcd99fe4ca0cc5e","modified":1489734658505},{"_id":"themes/next/source/css/_common/components/sidebar/sidebar.styl","hash":"234facd038f144bd0fe09a31ed1357c5d74c517f","modified":1489734658489},{"_id":"themes/next/source/css/_common/components/sidebar/site-state.styl","hash":"3623e7fa4324ec1307370f33d8f287a9e20a5578","modified":1489734658589},{"_id":"themes/next/source/css/_common/components/tags/blockquote-center.styl","hash":"c2abe4d87148e23e15d49ee225bc650de60baf46","modified":1489734658753},{"_id":"themes/next/source/css/_common/components/tags/exturl.styl","hash":"1b3cc9f4e5a7f6e05b4100e9990b37b20d4a2005","modified":1489734658773},{"_id":"themes/next/source/css/_common/components/tags/full-image.styl","hash":"b8969e1654eec89a0fd10d88b337fee9cb03cd44","modified":1489734658773},{"_id":"themes/next/source/css/_common/components/tags/note.styl","hash":"74d0ba86f698165d13402670382a822c8736a556","modified":1489734658861},{"_id":"themes/next/source/css/_common/components/tags/group-pictures.styl","hash":"4851b981020c5cbc354a1af9b831a2dcb3cf9d39","modified":1489734658769},{"_id":"themes/next/source/css/_common/components/tags/tags.styl","hash":"8fe1e55bc290e6aaf07cc644fe27b62107a272a8","modified":1489734658861},{"_id":"themes/next/source/css/_common/components/third-party/duoshuo.styl","hash":"2340dd9b3202c61d73cc708b790fac5adddbfc7f","modified":1489734659029},{"_id":"themes/next/source/css/_common/components/third-party/busuanzi-counter.styl","hash":"d4e6d8d7b34dc69994593c208f875ae8f7e8a3ae","modified":1489734659029},{"_id":"themes/next/source/css/_common/components/third-party/algolia-search.styl","hash":"fd42777b9125fd8969dc39d4f15473e2b91b4142","modified":1489734659025},{"_id":"themes/next/source/css/_common/components/third-party/gentie.styl","hash":"586a3ec0f1015e7207cd6a2474362e068c341744","modified":1489734659169},{"_id":"themes/next/source/css/_common/components/third-party/jiathis.styl","hash":"327b5f63d55ec26f7663185c1a778440588d9803","modified":1489734659173},{"_id":"themes/next/source/css/_common/components/third-party/localsearch.styl","hash":"173490e21bece35a34858e8e534cf86e34561350","modified":1489734659345},{"_id":"themes/next/source/css/_common/components/third-party/baidushare.styl","hash":"93b08815c4d17e2b96fef8530ec1f1064dede6ef","modified":1489734659029},{"_id":"themes/next/source/css/_common/components/third-party/third-party.styl","hash":"42348219db93a85d2ee23cb06cebd4d8ab121726","modified":1489734659357},{"_id":"themes/next/source/css/_schemes/Mist/outline/outline.styl","hash":"5dc4859c66305f871e56cba78f64bfe3bf1b5f01","modified":1489734659945},{"_id":"themes/next/source/css/_schemes/Mist/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1489734659941},{"_id":"themes/next/source/css/_schemes/Muse/sidebar/sidebar-blogroll.styl","hash":"817587e46df49e819858c8ecbafa08b53d5ff040","modified":1489734660549},{"_id":"themes/next/source/lib/fancybox/source/helpers/fancybox_buttons.png","hash":"e385b139516c6813dcd64b8fc431c364ceafe5f3","modified":1489734662981},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.css","hash":"1a9d8e5c22b371fcc69d4dbbb823d9c39f04c0c8","modified":1489734663001},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-buttons.js","hash":"91e41741c2e93f732c82aaacec4cfc6e3f3ec876","modified":1489734663017},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-media.js","hash":"3bdf69ed2469e4fb57f5a95f17300eef891ff90d","modified":1489734663241},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.css","hash":"4ac329c16a5277592fc12a37cca3d72ca4ec292f","modified":1489734663249},{"_id":"themes/next/source/lib/fancybox/source/helpers/jquery.fancybox-thumbs.js","hash":"53e194f4a72e649c04fb586dd57762b8c022800b","modified":1489734663257},{"_id":"themes/next/source/lib/font-awesome/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1489734664601},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1489734664301},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1489734664401},{"_id":"themes/next/source/lib/algolia-instant-search/instantsearch.min.js","hash":"9ccc6f8144f54e86df9a3fd33a18368d81cf3a4f","modified":1489734662981},{"_id":"themes/next/source/lib/font-awesome/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1489734664657}],"Category":[{"name":"None","_id":"cj0evfi1z0005vcfufpz613g8"},{"name":"C","_id":"cj0evfi2b000avcfujfklayjh"},{"name":"CSharp","_id":"cj0evfi2h000gvcfu5vvfbgjc"},{"name":"Tools","_id":"cj0evfi310014vcfuu7q9ou4s"},{"name":"Nome","_id":"cj0evfi35001cvcfubd28wsvk"}],"Data":[],"Page":[{"_content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","source":"404.html","raw":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","date":"2017-03-17T07:10:34.977Z","updated":"2017-03-17T07:10:34.977Z","path":"404.html","title":"","comments":1,"layout":"page","_id":"cj0evfhtn0000vcfu8tqhd5b6","content":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\">\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\">\n  <meta name=\"robots\" content=\"all\">\n  <meta name=\"robots\" content=\"index,follow\">\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\" charset=\"utf-8\" homepageurl=\"/\" homepagename=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>","excerpt":"","more":"<!DOCTYPE HTML>\n<html>\n<head>\n  <meta http-equiv=\"content-type\" content=\"text/html;charset=utf-8;\"/>\n  <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge,chrome=1\" />\n  <meta name=\"robots\" content=\"all\" />\n  <meta name=\"robots\" content=\"index,follow\"/>\n  <link rel=\"stylesheet\" type=\"text/css\" href=\"https://qzone.qq.com/gy/404/style/404style.css\">\n</head>\n<body>\n  <script type=\"text/plain\" src=\"http://www.qq.com/404/search_children.js\"\n          charset=\"utf-8\" homePageUrl=\"/\"\n          homePageName=\"回到我的主页\">\n  </script>\n  <script src=\"https://qzone.qq.com/gy/404/data.js\" charset=\"utf-8\"></script>\n  <script src=\"https://qzone.qq.com/gy/404/page.js\" charset=\"utf-8\"></script>\n</body>\n</html>"},{"title":"tags","date":"2017-03-09T14:39:23.000Z","type":"tags","comments":0,"_content":"","source":"tags/index.md","raw":"---\ntitle: tags\ndate: 2017-03-09 14:39:23\ntype: \"tags\"\ncomments: false\n---\n","updated":"2017-03-17T07:10:34.845Z","path":"tags/index.html","layout":"page","_id":"cj0evfi1m0002vcfu2004y0vb","content":"","excerpt":"","more":""},{"title":"categories","date":"2017-03-09T14:42:49.000Z","type":"categories","_content":"","source":"categories/index.md","raw":"---\ntitle: categories\ndate: 2017-03-09 14:42:49\ntype: \"categories\"\n---\n","updated":"2017-03-17T07:10:34.981Z","path":"categories/index.html","comments":1,"layout":"page","_id":"cj0evfi1v0004vcfu2msiro5y","content":"","excerpt":"","more":""}],"Post":[{"title":"博客模板","date":"2017-03-18T17:00:50.000Z","_content":"\n# 1. 发布新文章\n\n\t$ hexo new \"new article\"\n\t\n之后在source/_posts目录下面，多了一个new-article.md的文件。打开之后修改：\n\n\t---\n\ttitle: 新博客\n\tdate: 2017-03-11 16:56:50\n\ttags:\n\t\t- blog\n\tcategories: None\n\t---\n\n修改后保存。之后执行并测试：\n\n\t$ hexo generate\n\t$ hexo server -p 8080\n\t\n发布：\n\n\t$ hexo g // 重新生成博客\n    $ hexo d // 发布\n    \n# 2. 图片\n\n![天花板](http://breakerthb.github.io/PIC/avatar.png)\n\n存储路径：source/PIC/avatar.png\n显示路径：<http://breakerthb.github.io/PIC/avatar.png>\n\n\n\n\n","source":"_posts/BlogDemo.md","raw":"---\ntitle: 博客模板\ndate: 2017-03-18 17:00:50\ntags:\n\t- blog\ncategories: None\n---\n\n# 1. 发布新文章\n\n\t$ hexo new \"new article\"\n\t\n之后在source/_posts目录下面，多了一个new-article.md的文件。打开之后修改：\n\n\t---\n\ttitle: 新博客\n\tdate: 2017-03-11 16:56:50\n\ttags:\n\t\t- blog\n\tcategories: None\n\t---\n\n修改后保存。之后执行并测试：\n\n\t$ hexo generate\n\t$ hexo server -p 8080\n\t\n发布：\n\n\t$ hexo g // 重新生成博客\n    $ hexo d // 发布\n    \n# 2. 图片\n\n![天花板](http://breakerthb.github.io/PIC/avatar.png)\n\n存储路径：source/PIC/avatar.png\n显示路径：<http://breakerthb.github.io/PIC/avatar.png>\n\n\n\n\n","slug":"BlogDemo","published":1,"updated":"2017-03-18T06:12:30.179Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0evfi1e0001vcfu11ijwfpq","content":"<h1 id=\"1-发布新文章\"><a href=\"#1-发布新文章\" class=\"headerlink\" title=\"1. 发布新文章\"></a>1. 发布新文章</h1><pre><code>$ hexo new &quot;new article&quot;\n</code></pre><p>之后在source/_posts目录下面，多了一个new-article.md的文件。打开之后修改：</p>\n<pre><code>---\ntitle: 新博客\ndate: 2017-03-11 16:56:50\ntags:\n    - blog\ncategories: None\n---\n</code></pre><p>修改后保存。之后执行并测试：</p>\n<pre><code>$ hexo generate\n$ hexo server -p 8080\n</code></pre><p>发布：</p>\n<pre><code>$ hexo g // 重新生成博客\n$ hexo d // 发布\n</code></pre><h1 id=\"2-图片\"><a href=\"#2-图片\" class=\"headerlink\" title=\"2. 图片\"></a>2. 图片</h1><p><img src=\"http://breakerthb.github.io/PIC/avatar.png\" alt=\"天花板\"></p>\n<p>存储路径：source/PIC/avatar.png<br>显示路径：<a href=\"http://breakerthb.github.io/PIC/avatar.png\">http://breakerthb.github.io/PIC/avatar.png</a></p>\n","excerpt":"","more":"<h1 id=\"1-发布新文章\"><a href=\"#1-发布新文章\" class=\"headerlink\" title=\"1. 发布新文章\"></a>1. 发布新文章</h1><pre><code>$ hexo new &quot;new article&quot;\n</code></pre><p>之后在source/_posts目录下面，多了一个new-article.md的文件。打开之后修改：</p>\n<pre><code>---\ntitle: 新博客\ndate: 2017-03-11 16:56:50\ntags:\n    - blog\ncategories: None\n---\n</code></pre><p>修改后保存。之后执行并测试：</p>\n<pre><code>$ hexo generate\n$ hexo server -p 8080\n</code></pre><p>发布：</p>\n<pre><code>$ hexo g // 重新生成博客\n$ hexo d // 发布\n</code></pre><h1 id=\"2-图片\"><a href=\"#2-图片\" class=\"headerlink\" title=\"2. 图片\"></a>2. 图片</h1><p><img src=\"http://breakerthb.github.io/PIC/avatar.png\" alt=\"天花板\"></p>\n<p>存储路径：source/PIC/avatar.png<br>显示路径：<a href=\"http://breakerthb.github.io/PIC/avatar.png\">http://breakerthb.github.io/PIC/avatar.png</a></p>\n"},{"title":"CRC32","date":"2017-03-18T06:06:25.000Z","_content":"\nCRC32是最基础的计算CheckSum值得方法。如果出现重复，可以考虑用CRC64或MD5方法。\n\n    const ULONG g_crc32_table[] =\n\t{\n\t    0x0, 0x77073096, 0xee0e612c, 0x990951ba, 0x76dc419,\n\t    0x706af48f, 0xe963a535, 0x9e6495a3, 0xedb8832, 0x79dcb8a4,\n\t    0xe0d5e91e, 0x97d2d988, 0x9b64c2b, 0x7eb17cbd, 0xe7b82d07,\n\t    0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,\n\t    0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856,\n\t    0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,\n\t    0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4,\n\t    0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,\n\t    0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,\n\t    0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a,\n\t    0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599,\n\t    0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,\n\t    0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190,\n\t    0x1db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x6b6b51f,\n\t    0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0xf00f934, 0x9609a88e,\n\t    0xe10e9818, 0x7f6a0dbb, 0x86d3d2d, 0x91646c97, 0xe6635c01,\n\t    0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed,\n\t    0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,\n\t    0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3,\n\t    0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,\n\t    0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a,\n\t    0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5,\n\t    0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010,\n\t    0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n\t    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17,\n\t    0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6,\n\t    0x3b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x4db2615,\n\t    0x73dc1683, 0xe3630b12, 0x94643b84, 0xd6d6a3e, 0x7a6a5aa8,\n\t    0xe40ecf0b, 0x9309ff9d, 0xa00ae27, 0x7d079eb1, 0xf00f9344,\n\t    0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,\n\t    0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a,\n\t    0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,\n\t    0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1,\n\t    0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c,\n\t    0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef,\n\t    0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,\n\t    0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe,\n\t    0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31,\n\t    0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c,\n\t    0x26d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x5005713,\n\t    0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0xcb61b38, 0x92d28e9b,\n\t    0xe5d5be0d, 0x7cdcefb7, 0xbdbdf21, 0x86d3d2d4, 0xf1d4e242,\n\t    0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1,\n\t    0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,\n\t    0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,\n\t    0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7,\n\t    0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66,\n\t    0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n\t    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,\n\t    0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8,\n\t    0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b,\n\t    0x2d02ef8d\n\t};\n\t\n\tWORD ReadSys_GetChecksum(BYTE* PData, int DataSize)\n\t{\n\t    int i;\n\t    WORD CheckSum;\n\t    CheckSum=0;\n\t    i = DataSize;\n\t    while(i--)\n\t    {\n\t        CheckSum+=(WORD)(*(PData++));      \n\t    }\n\t\n\t    return CheckSum;\n\t}\n\t\n\tULONG ReadSys_GetCRC32(BYTE *PData, USHORT DataSize)\n\t{\n\t    // Be sure to use unsigned variables,\n\t    // because negative values introduce high bits\n\t    // where zero bits are required.\n\t    int i;\n\t    WORD CheckSum;\n\t    BYTE* PBuffer;\n\t    DWORD  crc;\n\t    CheckSum = ReadSys_GetChecksum(PData,DataSize);\n\t \n\t    crc = 0ffffffff;\n\t    crc = (crc >> 8) ^ g_crc32_table[ (crc & 0xFF)^DataSize];\n\t    i = DataSize;\n\t    PBuffer=PData;\n\t    while(i--)\n\t    {\n\t        crc = (crc >> 8) ^ g_crc32_table[(crc & 0xFF) ^ *PBuffer];\n\t        PBuffer++;\n\t    }\n\t\n\t    crc = (crc >> 8) ^ g_crc32_table[ (crc & 0xFF)^(CheckSum>>8)];\n\t    crc = (crc >> 8) ^ g_crc32_table[ (crc & 0xFF)^(CheckSum&&0xff)];\n\t\n\t    //經過驗證,使用Checksum參與CRC32,仍然確保CRC32唯一.\n\t    //直接返回crc,不需要返回crc^0xfffffffff.\n\t    return crc; \n\t}","source":"_posts/CRC32.md","raw":"---\ntitle: CRC32\ntags:\n  - C\ncategories: C\ndate: 2017-03-18 06:06:25\n---\n\nCRC32是最基础的计算CheckSum值得方法。如果出现重复，可以考虑用CRC64或MD5方法。\n\n    const ULONG g_crc32_table[] =\n\t{\n\t    0x0, 0x77073096, 0xee0e612c, 0x990951ba, 0x76dc419,\n\t    0x706af48f, 0xe963a535, 0x9e6495a3, 0xedb8832, 0x79dcb8a4,\n\t    0xe0d5e91e, 0x97d2d988, 0x9b64c2b, 0x7eb17cbd, 0xe7b82d07,\n\t    0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,\n\t    0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856,\n\t    0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,\n\t    0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4,\n\t    0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,\n\t    0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,\n\t    0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a,\n\t    0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599,\n\t    0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,\n\t    0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190,\n\t    0x1db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x6b6b51f,\n\t    0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0xf00f934, 0x9609a88e,\n\t    0xe10e9818, 0x7f6a0dbb, 0x86d3d2d, 0x91646c97, 0xe6635c01,\n\t    0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed,\n\t    0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,\n\t    0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3,\n\t    0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,\n\t    0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a,\n\t    0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5,\n\t    0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010,\n\t    0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n\t    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17,\n\t    0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6,\n\t    0x3b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x4db2615,\n\t    0x73dc1683, 0xe3630b12, 0x94643b84, 0xd6d6a3e, 0x7a6a5aa8,\n\t    0xe40ecf0b, 0x9309ff9d, 0xa00ae27, 0x7d079eb1, 0xf00f9344,\n\t    0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,\n\t    0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a,\n\t    0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,\n\t    0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1,\n\t    0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c,\n\t    0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef,\n\t    0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,\n\t    0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe,\n\t    0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31,\n\t    0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c,\n\t    0x26d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x5005713,\n\t    0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0xcb61b38, 0x92d28e9b,\n\t    0xe5d5be0d, 0x7cdcefb7, 0xbdbdf21, 0x86d3d2d4, 0xf1d4e242,\n\t    0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1,\n\t    0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,\n\t    0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,\n\t    0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7,\n\t    0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66,\n\t    0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n\t    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,\n\t    0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8,\n\t    0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b,\n\t    0x2d02ef8d\n\t};\n\t\n\tWORD ReadSys_GetChecksum(BYTE* PData, int DataSize)\n\t{\n\t    int i;\n\t    WORD CheckSum;\n\t    CheckSum=0;\n\t    i = DataSize;\n\t    while(i--)\n\t    {\n\t        CheckSum+=(WORD)(*(PData++));      \n\t    }\n\t\n\t    return CheckSum;\n\t}\n\t\n\tULONG ReadSys_GetCRC32(BYTE *PData, USHORT DataSize)\n\t{\n\t    // Be sure to use unsigned variables,\n\t    // because negative values introduce high bits\n\t    // where zero bits are required.\n\t    int i;\n\t    WORD CheckSum;\n\t    BYTE* PBuffer;\n\t    DWORD  crc;\n\t    CheckSum = ReadSys_GetChecksum(PData,DataSize);\n\t \n\t    crc = 0ffffffff;\n\t    crc = (crc >> 8) ^ g_crc32_table[ (crc & 0xFF)^DataSize];\n\t    i = DataSize;\n\t    PBuffer=PData;\n\t    while(i--)\n\t    {\n\t        crc = (crc >> 8) ^ g_crc32_table[(crc & 0xFF) ^ *PBuffer];\n\t        PBuffer++;\n\t    }\n\t\n\t    crc = (crc >> 8) ^ g_crc32_table[ (crc & 0xFF)^(CheckSum>>8)];\n\t    crc = (crc >> 8) ^ g_crc32_table[ (crc & 0xFF)^(CheckSum&&0xff)];\n\t\n\t    //經過驗證,使用Checksum參與CRC32,仍然確保CRC32唯一.\n\t    //直接返回crc,不需要返回crc^0xfffffffff.\n\t    return crc; \n\t}","slug":"CRC32","published":1,"updated":"2017-03-18T06:07:55.183Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0evfi1r0003vcfuf8epi15s","content":"<p>CRC32是最基础的计算CheckSum值得方法。如果出现重复，可以考虑用CRC64或MD5方法。</p>\n<pre><code>const ULONG g_crc32_table[] =\n{\n    0x0, 0x77073096, 0xee0e612c, 0x990951ba, 0x76dc419,\n    0x706af48f, 0xe963a535, 0x9e6495a3, 0xedb8832, 0x79dcb8a4,\n    0xe0d5e91e, 0x97d2d988, 0x9b64c2b, 0x7eb17cbd, 0xe7b82d07,\n    0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,\n    0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856,\n    0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,\n    0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4,\n    0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,\n    0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,\n    0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a,\n    0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599,\n    0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,\n    0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190,\n    0x1db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x6b6b51f,\n    0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0xf00f934, 0x9609a88e,\n    0xe10e9818, 0x7f6a0dbb, 0x86d3d2d, 0x91646c97, 0xe6635c01,\n    0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed,\n    0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,\n    0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3,\n    0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,\n    0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a,\n    0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5,\n    0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010,\n    0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17,\n    0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6,\n    0x3b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x4db2615,\n    0x73dc1683, 0xe3630b12, 0x94643b84, 0xd6d6a3e, 0x7a6a5aa8,\n    0xe40ecf0b, 0x9309ff9d, 0xa00ae27, 0x7d079eb1, 0xf00f9344,\n    0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,\n    0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a,\n    0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,\n    0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1,\n    0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c,\n    0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef,\n    0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,\n    0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe,\n    0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31,\n    0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c,\n    0x26d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x5005713,\n    0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0xcb61b38, 0x92d28e9b,\n    0xe5d5be0d, 0x7cdcefb7, 0xbdbdf21, 0x86d3d2d4, 0xf1d4e242,\n    0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1,\n    0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,\n    0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,\n    0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7,\n    0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66,\n    0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,\n    0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8,\n    0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b,\n    0x2d02ef8d\n};\n\nWORD ReadSys_GetChecksum(BYTE* PData, int DataSize)\n{\n    int i;\n    WORD CheckSum;\n    CheckSum=0;\n    i = DataSize;\n    while(i--)\n    {\n        CheckSum+=(WORD)(*(PData++));      \n    }\n\n    return CheckSum;\n}\n\nULONG ReadSys_GetCRC32(BYTE *PData, USHORT DataSize)\n{\n    // Be sure to use unsigned variables,\n    // because negative values introduce high bits\n    // where zero bits are required.\n    int i;\n    WORD CheckSum;\n    BYTE* PBuffer;\n    DWORD  crc;\n    CheckSum = ReadSys_GetChecksum(PData,DataSize);\n\n    crc = 0ffffffff;\n    crc = (crc &gt;&gt; 8) ^ g_crc32_table[ (crc &amp; 0xFF)^DataSize];\n    i = DataSize;\n    PBuffer=PData;\n    while(i--)\n    {\n        crc = (crc &gt;&gt; 8) ^ g_crc32_table[(crc &amp; 0xFF) ^ *PBuffer];\n        PBuffer++;\n    }\n\n    crc = (crc &gt;&gt; 8) ^ g_crc32_table[ (crc &amp; 0xFF)^(CheckSum&gt;&gt;8)];\n    crc = (crc &gt;&gt; 8) ^ g_crc32_table[ (crc &amp; 0xFF)^(CheckSum&amp;&amp;0xff)];\n\n    //經過驗證,使用Checksum參與CRC32,仍然確保CRC32唯一.\n    //直接返回crc,不需要返回crc^0xfffffffff.\n    return crc; \n}\n</code></pre>","excerpt":"","more":"<p>CRC32是最基础的计算CheckSum值得方法。如果出现重复，可以考虑用CRC64或MD5方法。</p>\n<pre><code>const ULONG g_crc32_table[] =\n{\n    0x0, 0x77073096, 0xee0e612c, 0x990951ba, 0x76dc419,\n    0x706af48f, 0xe963a535, 0x9e6495a3, 0xedb8832, 0x79dcb8a4,\n    0xe0d5e91e, 0x97d2d988, 0x9b64c2b, 0x7eb17cbd, 0xe7b82d07,\n    0x90bf1d91, 0x1db71064, 0x6ab020f2, 0xf3b97148, 0x84be41de,\n    0x1adad47d, 0x6ddde4eb, 0xf4d4b551, 0x83d385c7, 0x136c9856,\n    0x646ba8c0, 0xfd62f97a, 0x8a65c9ec, 0x14015c4f, 0x63066cd9,\n    0xfa0f3d63, 0x8d080df5, 0x3b6e20c8, 0x4c69105e, 0xd56041e4,\n    0xa2677172, 0x3c03e4d1, 0x4b04d447, 0xd20d85fd, 0xa50ab56b,\n    0x35b5a8fa, 0x42b2986c, 0xdbbbc9d6, 0xacbcf940, 0x32d86ce3,\n    0x45df5c75, 0xdcd60dcf, 0xabd13d59, 0x26d930ac, 0x51de003a,\n    0xc8d75180, 0xbfd06116, 0x21b4f4b5, 0x56b3c423, 0xcfba9599,\n    0xb8bda50f, 0x2802b89e, 0x5f058808, 0xc60cd9b2, 0xb10be924,\n    0x2f6f7c87, 0x58684c11, 0xc1611dab, 0xb6662d3d, 0x76dc4190,\n    0x1db7106, 0x98d220bc, 0xefd5102a, 0x71b18589, 0x6b6b51f,\n    0x9fbfe4a5, 0xe8b8d433, 0x7807c9a2, 0xf00f934, 0x9609a88e,\n    0xe10e9818, 0x7f6a0dbb, 0x86d3d2d, 0x91646c97, 0xe6635c01,\n    0x6b6b51f4, 0x1c6c6162, 0x856530d8, 0xf262004e, 0x6c0695ed,\n    0x1b01a57b, 0x8208f4c1, 0xf50fc457, 0x65b0d9c6, 0x12b7e950,\n    0x8bbeb8ea, 0xfcb9887c, 0x62dd1ddf, 0x15da2d49, 0x8cd37cf3,\n    0xfbd44c65, 0x4db26158, 0x3ab551ce, 0xa3bc0074, 0xd4bb30e2,\n    0x4adfa541, 0x3dd895d7, 0xa4d1c46d, 0xd3d6f4fb, 0x4369e96a,\n    0x346ed9fc, 0xad678846, 0xda60b8d0, 0x44042d73, 0x33031de5,\n    0xaa0a4c5f, 0xdd0d7cc9, 0x5005713c, 0x270241aa, 0xbe0b1010,\n    0xc90c2086, 0x5768b525, 0x206f85b3, 0xb966d409, 0xce61e49f,\n    0x5edef90e, 0x29d9c998, 0xb0d09822, 0xc7d7a8b4, 0x59b33d17,\n    0x2eb40d81, 0xb7bd5c3b, 0xc0ba6cad, 0xedb88320, 0x9abfb3b6,\n    0x3b6e20c, 0x74b1d29a, 0xead54739, 0x9dd277af, 0x4db2615,\n    0x73dc1683, 0xe3630b12, 0x94643b84, 0xd6d6a3e, 0x7a6a5aa8,\n    0xe40ecf0b, 0x9309ff9d, 0xa00ae27, 0x7d079eb1, 0xf00f9344,\n    0x8708a3d2, 0x1e01f268, 0x6906c2fe, 0xf762575d, 0x806567cb,\n    0x196c3671, 0x6e6b06e7, 0xfed41b76, 0x89d32be0, 0x10da7a5a,\n    0x67dd4acc, 0xf9b9df6f, 0x8ebeeff9, 0x17b7be43, 0x60b08ed5,\n    0xd6d6a3e8, 0xa1d1937e, 0x38d8c2c4, 0x4fdff252, 0xd1bb67f1,\n    0xa6bc5767, 0x3fb506dd, 0x48b2364b, 0xd80d2bda, 0xaf0a1b4c,\n    0x36034af6, 0x41047a60, 0xdf60efc3, 0xa867df55, 0x316e8eef,\n    0x4669be79, 0xcb61b38c, 0xbc66831a, 0x256fd2a0, 0x5268e236,\n    0xcc0c7795, 0xbb0b4703, 0x220216b9, 0x5505262f, 0xc5ba3bbe,\n    0xb2bd0b28, 0x2bb45a92, 0x5cb36a04, 0xc2d7ffa7, 0xb5d0cf31,\n    0x2cd99e8b, 0x5bdeae1d, 0x9b64c2b0, 0xec63f226, 0x756aa39c,\n    0x26d930a, 0x9c0906a9, 0xeb0e363f, 0x72076785, 0x5005713,\n    0x95bf4a82, 0xe2b87a14, 0x7bb12bae, 0xcb61b38, 0x92d28e9b,\n    0xe5d5be0d, 0x7cdcefb7, 0xbdbdf21, 0x86d3d2d4, 0xf1d4e242,\n    0x68ddb3f8, 0x1fda836e, 0x81be16cd, 0xf6b9265b, 0x6fb077e1,\n    0x18b74777, 0x88085ae6, 0xff0f6a70, 0x66063bca, 0x11010b5c,\n    0x8f659eff, 0xf862ae69, 0x616bffd3, 0x166ccf45, 0xa00ae278,\n    0xd70dd2ee, 0x4e048354, 0x3903b3c2, 0xa7672661, 0xd06016f7,\n    0x4969474d, 0x3e6e77db, 0xaed16a4a, 0xd9d65adc, 0x40df0b66,\n    0x37d83bf0, 0xa9bcae53, 0xdebb9ec5, 0x47b2cf7f, 0x30b5ffe9,\n    0xbdbdf21c, 0xcabac28a, 0x53b39330, 0x24b4a3a6, 0xbad03605,\n    0xcdd70693, 0x54de5729, 0x23d967bf, 0xb3667a2e, 0xc4614ab8,\n    0x5d681b02, 0x2a6f2b94, 0xb40bbe37, 0xc30c8ea1, 0x5a05df1b,\n    0x2d02ef8d\n};\n\nWORD ReadSys_GetChecksum(BYTE* PData, int DataSize)\n{\n    int i;\n    WORD CheckSum;\n    CheckSum=0;\n    i = DataSize;\n    while(i--)\n    {\n        CheckSum+=(WORD)(*(PData++));      \n    }\n\n    return CheckSum;\n}\n\nULONG ReadSys_GetCRC32(BYTE *PData, USHORT DataSize)\n{\n    // Be sure to use unsigned variables,\n    // because negative values introduce high bits\n    // where zero bits are required.\n    int i;\n    WORD CheckSum;\n    BYTE* PBuffer;\n    DWORD  crc;\n    CheckSum = ReadSys_GetChecksum(PData,DataSize);\n\n    crc = 0ffffffff;\n    crc = (crc &gt;&gt; 8) ^ g_crc32_table[ (crc &amp; 0xFF)^DataSize];\n    i = DataSize;\n    PBuffer=PData;\n    while(i--)\n    {\n        crc = (crc &gt;&gt; 8) ^ g_crc32_table[(crc &amp; 0xFF) ^ *PBuffer];\n        PBuffer++;\n    }\n\n    crc = (crc &gt;&gt; 8) ^ g_crc32_table[ (crc &amp; 0xFF)^(CheckSum&gt;&gt;8)];\n    crc = (crc &gt;&gt; 8) ^ g_crc32_table[ (crc &amp; 0xFF)^(CheckSum&amp;&amp;0xff)];\n\n    //經過驗證,使用Checksum參與CRC32,仍然確保CRC32唯一.\n    //直接返回crc,不需要返回crc^0xfffffffff.\n    return crc; \n}\n</code></pre>"},{"title":"CSharpGDI+绘图","date":"2017-03-18T05:58:48.000Z","_content":"\nGDI+：Graphics Device Interface Plus也就是图形设备接口,提供了各种丰富的图形图像处理功能;在C#.NET中，使用GDI+处理二维（2D）的图形和图像，使用DirectX处理三维（3D）的图形图像,图形图像处理用到的主要命名空间是System . Drawing：提供了对GDI+基本图形功能的访问，主要有Graphics类、Bitmap类、从Brush类继承的类、Font类、Icon类、Image类、Pen类、Color类等.\n\n画板可以通过Graphics这个类来创建\n\n笔又可以分好多种类,比如铅笔（用来画线条）,画刷（用来画区域）等。在c#中我们可以用Pen,Brush类来实现类似功能\n\n颜色自然是用Color类\n\n所需命名空间：using System.Drawing;\n\n# Demo 1 : 在空白窗体中画基本图形\n\n准备一个画板:\n创建一个画板主要有3种方式:\n\n> A: 在窗体或控件的Paint事件中直接引用Graphics对象  \n> B: 利用窗体或某个控件的CreateGraphics方法  \n> C: 从继承自图像的任何对象创建Graphics对象\n\n这次我们就先以A为例:\n\n    private void Form1_Paint(object sender, PaintEventArgs e)\n    {\n    \tGraphics g = e.Graphics; //创建画板,这里的画板是由Form提供的.\n    }\n\n然后,我们要只笔:\n\n    private void Form1_Paint(object sender, PaintEventArgs e)\n    {\n\t\tGraphics g = e.Graphics; //创建画板,这里的画板是由Form提供的.\n\t\tPen p = new Pen(Color.Blue, 2);//定义了一个蓝色,宽度为的画笔\n    }\n\n接下来我们就可以来画画了.\n\n\tprivate void Form1_Paint(object sender, PaintEventArgs e)\n\t{\n\t\tGraphics g = e.Graphics; //创建画板,这里的画板是由Form提供的.\n\t\tPen p = new Pen(Color.Blue, 2);//定义了一个蓝色,宽度为的画笔\n\t\tg.DrawLine(p, 10, 10, 100, 100);//在画板上画直线,起始坐标为(10,10),终点坐标为(100,100)\n\t\tg.DrawRectangle(p, 10, 10, 100, 100);//在画板上画矩形,起始坐标为(10,10),宽为,高为\n\t\tg.DrawEllipse(p, 10, 10, 100, 100);//在画板上画椭圆,起始坐标为(10,10),外接矩形的宽为,高为\n\t}\n\n效果图如下:\n\n![执行效果](http://upload-images.jianshu.io/upload_images/145902-73dd0d82c9c17074.JPG)\n\n\n# Demo 2 : Pen的使用\n\nPen的属性主要有: Color(颜色),DashCap(短划线终点形状),DashStyle(虚线样式),EndCap(线尾形状),StartCap(线头形状),Width(粗细)等.我们可以用Pen 来画虚线,带箭头的直线等\n\n    Pen　p = new　Pen(Color.Blue, 5);//设置笔的粗细为,颜色为蓝色\n    \n    Graphics　g = this.CreateGraphics();\n    \n    //画虚线\n    \n    p.DashStyle = DashStyle.Dot;//定义虚线的样式为点\n    \n    g.DrawLine(p, 10, 10, 200, 10);\n    \n    //自定义虚线\n    p.DashPattern = new　float[] { 2, 1 };//设置短划线和空白部分的数组\n    g.DrawLine(p, 10, 20, 200, 20);\n    //画箭头,只对不封闭曲线有用\n    p.DashStyle = DashStyle.Solid;//实线\n    p.EndCap = LineCap.ArrowAnchor;//定义线尾的样式为箭头\n    g.DrawLine(p, 10, 30, 200, 30);\n    g.Dispose();\n    p.Dispose();\n\n以上代码运行结果:\n\n![http://images.cnblogs.com/cnblogs\\_com/stg609/a3.JPG](http://upload-images.jianshu.io/upload_images/145902-16f9e2f1f8bb35f0.jpg)\n\n# Demo 3 : Brush的使用\n\n作用:我们可以用画刷填充各种图形形状，如矩形、椭圆、扇形、多边形和封闭路径等,主要有几种不同类型的画刷:\n\nSolidBrush：画刷最简单的形式，用纯色进行绘制\n\nHatchBrush：类似于 SolidBrush，但是可以利用该类从大量预设的图案中选择绘制时要使用的图案，而不是纯色\n\nTextureBrush：使用纹理（如图像）进行绘制\n\nLinearGradientBrush：使用沿渐变混合的两种颜色进行绘制\n\nPathGradientBrush ：基于编程者定义的唯一路径，使用复杂的混合色渐变进行绘制\n\n我们这里只是简单介绍使用其中的几种:\n\n\n    Graphics g = this.CreateGraphics();\n    \n    Rectangle rect = new Rectangle(10, 10, 50, 50);//定义矩形,参数为起点横纵坐标以及其长和宽\n    \n    //单色填充\n    \n    SolidBrush b1 = new SolidBrush(Color.Blue);//定义单色画刷　　　　　\n    \n    g.FillRectangle(b1, rect);//填充这个矩形\n    \n    //字符串\n    \n    g.DrawString(\"字符串\", new Font(\"宋体\", 10), b1, new PointF(90, 10));\n    \n    //用图片填充\n    \n    TextureBrush b2 = new TextureBrush(Image.FromFile(@\"e:picture1.jpg\"));\n    \n    rect.Location = new Point(10, 70);//更改这个矩形的起点坐标\n    \n    rect.Width = 200;//更改这个矩形的宽来\n    \n    rect.Height = 200;//更改这个矩形的高\n    \n    g.FillRectangle(b2, rect);\n    \n    //用渐变色填充\n    \n    rect.Location = new Point(10, 290);\n    \n    LinearGradientBrush b3 = new　LinearGradientBrush(rect, Color.Yellow , Color.Black , LinearGradientMode.Horizontal);\n    \n    g.FillRectangle(b3, rect);\n\n　　运行效果图:\n\n![http://images.cnblogs.com/cnblogs\\_com/stg609/a1.jpg](http://upload-images.jianshu.io/upload_images/145902-f0d75c4d89030d54.jpg)\n\n\n# Demo 4 : 颜色的使用\n\n在GDI+中，颜色封装在Color结构中。把红、绿、蓝色值传送给Color结构的一个函数，就可以创建一中颜色，几乎从来不需要创建颜色。Color结构包含大约150个属性，提供了大量的预置颜色。如果需要以LightGoldenrodYellow 或 LavenderBlush颜色绘制图形，都有预定义的颜色我们使用。声明一个Color类型的变量，用Color结构中的一种颜色初始化它，如下：\n\nColor redColor = Color.Red;\n\nColor anotherColor = Color.LightGoldenrodYellow;\n\n下面几乎已经准备好绘图了，但绘图前有两点需要注意。\n\n表示颜色的另一种方法是把颜色分解为3种组件：色调、饱和度、亮度。Color结构包含完成分解颜色的实用方法：GetBrightness()、GetHue()、GetSaturation()。\n\n下面的示例将创建一个颜色选择对话框，使用它查看以RGB定义的颜色和以色调、饱和度、亮度定义的颜色之间的关系。\n\n    public Form1()\n    {\n    \n    InitializeComponent();\n    \n    this.colorDialog1.ShowDialog();\n    \n    }\n\n生成这个窗体时，就生成了颜色选择对话框。\n\n运行应用程序，单击Define Custom Colors按钮，显示一个对话框，在其中可以使用鼠标选择一种颜色，查看该颜色的RGB值。还可以获得该颜色的色调、饱和度、亮度值。也可以直接输入RGB值，查看得到的颜色。\n\n\n# Demo 5 : 坐标轴变换\n\n在winform中的坐标轴和我们平时接触的平面直角坐标轴不同,winform中的坐标轴方向完全相反:窗体的左上角为原点(0,0),水平向左则X增大,垂直下向则Y增大\n\n![效果](http://upload-images.jianshu.io/upload_images/145902-b7532e0e0f58cc6e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n我们来实际操作下,通过旋转坐标轴的方向来画出不同角度的图案,或通过更改坐标原点的位置来平衡坐标轴的位置.\n\n    Graphics g = this.CreateGraphics();\n    //单色填充\n    //SolidBrush b1 = new SolidBrush(Color.Blue);//定义单色画刷　　　　　\n    Pen p = new Pen(Color.Blue,1);\n    //转变坐标轴角度\n    for (int i = 0; i < 90; i++)\n    {\n    　　 g.RotateTransform(i);//每旋转一度就画一条线\n    　　 g.DrawLine(p, 0, 0, 100, 0);\n    　　 g.ResetTransform();//恢复坐标轴坐标\n    }\n    //平移坐标轴\n    g.TranslateTransform(100, 100);\n    g.DrawLine(p, 0, 0, 100, 0);\n    g.ResetTransform();\n    //先平移到指定坐标,然后进行度旋转\n    g.TranslateTransform(100,200);\n    for (int i = 0; i < 8; i++)\n    {\n        g.RotateTransform(45);\n        g.DrawLine(p, 0, 0, 100, 0);\n    }\n    g.Dispose();\n\n运行效果图:\n\n![执行效果](http://upload-images.jianshu.io/upload_images/145902-7dd399b659ac9708.jpg)\n\n\n# Demo 6 : Point\n\nGDI+使用Point表示一个点。这是一个二维平面上的点--一个像素的表示方式。许多GDI+函数例如DrawLine()。以Point作为参数。声明和构造Point的代码如下所示：\n\n\tPoint p = new Point()1,1;\n\n有一些公共属性可以获得和设置Point的X和Y的坐标。\n\n\n# Demo 7 : Size\n\nGDI+使用Size表示一个尺寸(像素)。Size结构包含宽度和高度。声明和构造Size的代码如下所示：\n    \n\tSize s = new Size(5,5);\n\n有一些公共属性可以获得和设置Size的宽度和高度。\n\n\n# Demo 8 : Rectangle\n\nGDI+在许多不同的地方使用这个结构，以指定矩形的坐标。Point结构定义矩形的左上角，Size定义其大小。Rectangle有两个构造函数。一个构造函数的参数是X坐标，Y坐标，宽度和高度，另一个构造函数的参数是Point和Size结构，声明和构建Rectangle的两个范例如下：\n\n\tRectangle r1 = new Rectangle(1,2,5,6);\n\tPoint p = new Point(1,2);\n\tSize s = new Size(5,6);\n\tRectangle = new Rectangle(p,s);\n       \n有一些公共属性可以获得和设置Rectangle的4个点和大小。另外，还有其他属性和方法可以完成诸如测试矩形是否维空，确定矩形是否与另一个矩形相交，提取两个矩形的相交部分，合并两个矩形等工作。\n\n下面两个更重要的数据类型可以用作GDI+中许多绘图函数的参数。\n\n\n# Demo 9 : GraphicsPaths\n\nGraphicsPath类表示一系列连续的线条和曲线。在构造一条路径时，可以添加线条、Bezier曲线、圆弧、饼形图、多边形和矩形等。在构造一条复杂的路径后，可以用一个操作绘制路径：调用DrawPath()。可以调用FillPath()填充路径。\n使用一个点数组和PathTypes构造GraphicsPath，PathTypes是一个byte数组，其中的每个元素对应于点数组中的每一个元素，并给出了路径如何通过这些点来构造的其他信息。例如：如果点是路径的起始点，那么这个点的路径类型就是PathPointType.Start。如果点是两个线条的连接点，那么这个点的路径类型就是PathPointType.Line。如果点用于构造一条从前一点到后一点之间的Bezier曲线，路径类型就是PathPointType.Bezier。\n下面是用4条线段创建一个图形路径：\n\n\tusing System.Drawing.Drawing2D; //增加此句\n\t\n\tprotected override void OnPaint(PaintEventArgs e)\n\t{\n\t        GraphicsPath path;\n\t        path = new GraphicsPath(new Point[]{\n\t                   new Point(10,10),\n\t                   new Point(150,10),\n\t                   new Point(200,150),\n\t                   new Point(10,150),\n\t                   new Point(200,160),\n\t                   },new byte[]{\n\t                   (byte)PathPointType.Start,\n\t                   (byte)PathPointType.Line,\n\t                   (byte)PathPointType.Line,\n\t                   (byte)PathPointType.Line,\n\t                   (byte)PathPointType.Line});\n\t        e.Graphics.DrawPath(Pens.Black,path);\n\t}\n\n# Demo 10 : Regions\n\nRegion类是一个复杂的图形，由矩形和路径组成。在构造了一个Regions后，就可以使用FillRegion()方法绘制该区域。下面的示例创建一个Region对象，并绘制到窗口中。\n下面的代码创建一个区域，给它添加一个Rectangle和一个GraphicsPath，再用蓝色填充该区域：\n\n\tusing System.Drawing,Drawing2D;\n\tprotected override void OnPaint(PaintEventArgs e)\n\t{\n\t    Rectangle r1 = new Rectangle(10,10,50,50);\n\t    Rectangle r2 = new Rectangle(40,40,50,50);\n\t    Region r = new Region(r1);\n\t    r.Union(r2);\n\t\n\t    GraphicsPath path = new GraphicsPath(new Point[]{\n\t        new Point(45,45),\n\t        new Point(145,55),\n\t        new Point(200,150),\n\t        new Point(75,150),\n\t        new Point(45,45)}, \n\t        new byte[]{\n\t        (byte)PathPointType.Start,\n\t        (byte)PathPointType.Bezier,\n\t        (byte)PathPointType.Bezier,\n\t        (byte)PathPointType.Bezier,\n\t        (byte)PathPointType.Line});\n\t\n\t    r.Union(path);\n\t    e.Graphics.FillRegion(Brushes.Blue, r);\n\t}\n\n  \n构造区域代码有些复杂，最复杂的是如何构造组成区域的路径。构造区域包括构造矩形和路径，之后调用Union()方法。如果决定使矩形和路径相交，就可以用Intersection()方法替代Union()。\n\n\nPS:最后我们来看下Graphics这个画板上我们还可以画什么\n\n其实我们上面用到的都是在画一些简单的图形,直线,矩形,扇形,圆孤等,我们还可以用它来绘制图片,这可以用它的DrawI\nmage方法.","source":"_posts/CSharpGDIDraw.md","raw":"---\ntitle: CSharpGDI+绘图\ntags:\n  - CSharp\n  - GDI\ncategories: CSharp\ndate: 2017-03-18 05:58:48\n---\n\nGDI+：Graphics Device Interface Plus也就是图形设备接口,提供了各种丰富的图形图像处理功能;在C#.NET中，使用GDI+处理二维（2D）的图形和图像，使用DirectX处理三维（3D）的图形图像,图形图像处理用到的主要命名空间是System . Drawing：提供了对GDI+基本图形功能的访问，主要有Graphics类、Bitmap类、从Brush类继承的类、Font类、Icon类、Image类、Pen类、Color类等.\n\n画板可以通过Graphics这个类来创建\n\n笔又可以分好多种类,比如铅笔（用来画线条）,画刷（用来画区域）等。在c#中我们可以用Pen,Brush类来实现类似功能\n\n颜色自然是用Color类\n\n所需命名空间：using System.Drawing;\n\n# Demo 1 : 在空白窗体中画基本图形\n\n准备一个画板:\n创建一个画板主要有3种方式:\n\n> A: 在窗体或控件的Paint事件中直接引用Graphics对象  \n> B: 利用窗体或某个控件的CreateGraphics方法  \n> C: 从继承自图像的任何对象创建Graphics对象\n\n这次我们就先以A为例:\n\n    private void Form1_Paint(object sender, PaintEventArgs e)\n    {\n    \tGraphics g = e.Graphics; //创建画板,这里的画板是由Form提供的.\n    }\n\n然后,我们要只笔:\n\n    private void Form1_Paint(object sender, PaintEventArgs e)\n    {\n\t\tGraphics g = e.Graphics; //创建画板,这里的画板是由Form提供的.\n\t\tPen p = new Pen(Color.Blue, 2);//定义了一个蓝色,宽度为的画笔\n    }\n\n接下来我们就可以来画画了.\n\n\tprivate void Form1_Paint(object sender, PaintEventArgs e)\n\t{\n\t\tGraphics g = e.Graphics; //创建画板,这里的画板是由Form提供的.\n\t\tPen p = new Pen(Color.Blue, 2);//定义了一个蓝色,宽度为的画笔\n\t\tg.DrawLine(p, 10, 10, 100, 100);//在画板上画直线,起始坐标为(10,10),终点坐标为(100,100)\n\t\tg.DrawRectangle(p, 10, 10, 100, 100);//在画板上画矩形,起始坐标为(10,10),宽为,高为\n\t\tg.DrawEllipse(p, 10, 10, 100, 100);//在画板上画椭圆,起始坐标为(10,10),外接矩形的宽为,高为\n\t}\n\n效果图如下:\n\n![执行效果](http://upload-images.jianshu.io/upload_images/145902-73dd0d82c9c17074.JPG)\n\n\n# Demo 2 : Pen的使用\n\nPen的属性主要有: Color(颜色),DashCap(短划线终点形状),DashStyle(虚线样式),EndCap(线尾形状),StartCap(线头形状),Width(粗细)等.我们可以用Pen 来画虚线,带箭头的直线等\n\n    Pen　p = new　Pen(Color.Blue, 5);//设置笔的粗细为,颜色为蓝色\n    \n    Graphics　g = this.CreateGraphics();\n    \n    //画虚线\n    \n    p.DashStyle = DashStyle.Dot;//定义虚线的样式为点\n    \n    g.DrawLine(p, 10, 10, 200, 10);\n    \n    //自定义虚线\n    p.DashPattern = new　float[] { 2, 1 };//设置短划线和空白部分的数组\n    g.DrawLine(p, 10, 20, 200, 20);\n    //画箭头,只对不封闭曲线有用\n    p.DashStyle = DashStyle.Solid;//实线\n    p.EndCap = LineCap.ArrowAnchor;//定义线尾的样式为箭头\n    g.DrawLine(p, 10, 30, 200, 30);\n    g.Dispose();\n    p.Dispose();\n\n以上代码运行结果:\n\n![http://images.cnblogs.com/cnblogs\\_com/stg609/a3.JPG](http://upload-images.jianshu.io/upload_images/145902-16f9e2f1f8bb35f0.jpg)\n\n# Demo 3 : Brush的使用\n\n作用:我们可以用画刷填充各种图形形状，如矩形、椭圆、扇形、多边形和封闭路径等,主要有几种不同类型的画刷:\n\nSolidBrush：画刷最简单的形式，用纯色进行绘制\n\nHatchBrush：类似于 SolidBrush，但是可以利用该类从大量预设的图案中选择绘制时要使用的图案，而不是纯色\n\nTextureBrush：使用纹理（如图像）进行绘制\n\nLinearGradientBrush：使用沿渐变混合的两种颜色进行绘制\n\nPathGradientBrush ：基于编程者定义的唯一路径，使用复杂的混合色渐变进行绘制\n\n我们这里只是简单介绍使用其中的几种:\n\n\n    Graphics g = this.CreateGraphics();\n    \n    Rectangle rect = new Rectangle(10, 10, 50, 50);//定义矩形,参数为起点横纵坐标以及其长和宽\n    \n    //单色填充\n    \n    SolidBrush b1 = new SolidBrush(Color.Blue);//定义单色画刷　　　　　\n    \n    g.FillRectangle(b1, rect);//填充这个矩形\n    \n    //字符串\n    \n    g.DrawString(\"字符串\", new Font(\"宋体\", 10), b1, new PointF(90, 10));\n    \n    //用图片填充\n    \n    TextureBrush b2 = new TextureBrush(Image.FromFile(@\"e:picture1.jpg\"));\n    \n    rect.Location = new Point(10, 70);//更改这个矩形的起点坐标\n    \n    rect.Width = 200;//更改这个矩形的宽来\n    \n    rect.Height = 200;//更改这个矩形的高\n    \n    g.FillRectangle(b2, rect);\n    \n    //用渐变色填充\n    \n    rect.Location = new Point(10, 290);\n    \n    LinearGradientBrush b3 = new　LinearGradientBrush(rect, Color.Yellow , Color.Black , LinearGradientMode.Horizontal);\n    \n    g.FillRectangle(b3, rect);\n\n　　运行效果图:\n\n![http://images.cnblogs.com/cnblogs\\_com/stg609/a1.jpg](http://upload-images.jianshu.io/upload_images/145902-f0d75c4d89030d54.jpg)\n\n\n# Demo 4 : 颜色的使用\n\n在GDI+中，颜色封装在Color结构中。把红、绿、蓝色值传送给Color结构的一个函数，就可以创建一中颜色，几乎从来不需要创建颜色。Color结构包含大约150个属性，提供了大量的预置颜色。如果需要以LightGoldenrodYellow 或 LavenderBlush颜色绘制图形，都有预定义的颜色我们使用。声明一个Color类型的变量，用Color结构中的一种颜色初始化它，如下：\n\nColor redColor = Color.Red;\n\nColor anotherColor = Color.LightGoldenrodYellow;\n\n下面几乎已经准备好绘图了，但绘图前有两点需要注意。\n\n表示颜色的另一种方法是把颜色分解为3种组件：色调、饱和度、亮度。Color结构包含完成分解颜色的实用方法：GetBrightness()、GetHue()、GetSaturation()。\n\n下面的示例将创建一个颜色选择对话框，使用它查看以RGB定义的颜色和以色调、饱和度、亮度定义的颜色之间的关系。\n\n    public Form1()\n    {\n    \n    InitializeComponent();\n    \n    this.colorDialog1.ShowDialog();\n    \n    }\n\n生成这个窗体时，就生成了颜色选择对话框。\n\n运行应用程序，单击Define Custom Colors按钮，显示一个对话框，在其中可以使用鼠标选择一种颜色，查看该颜色的RGB值。还可以获得该颜色的色调、饱和度、亮度值。也可以直接输入RGB值，查看得到的颜色。\n\n\n# Demo 5 : 坐标轴变换\n\n在winform中的坐标轴和我们平时接触的平面直角坐标轴不同,winform中的坐标轴方向完全相反:窗体的左上角为原点(0,0),水平向左则X增大,垂直下向则Y增大\n\n![效果](http://upload-images.jianshu.io/upload_images/145902-b7532e0e0f58cc6e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n我们来实际操作下,通过旋转坐标轴的方向来画出不同角度的图案,或通过更改坐标原点的位置来平衡坐标轴的位置.\n\n    Graphics g = this.CreateGraphics();\n    //单色填充\n    //SolidBrush b1 = new SolidBrush(Color.Blue);//定义单色画刷　　　　　\n    Pen p = new Pen(Color.Blue,1);\n    //转变坐标轴角度\n    for (int i = 0; i < 90; i++)\n    {\n    　　 g.RotateTransform(i);//每旋转一度就画一条线\n    　　 g.DrawLine(p, 0, 0, 100, 0);\n    　　 g.ResetTransform();//恢复坐标轴坐标\n    }\n    //平移坐标轴\n    g.TranslateTransform(100, 100);\n    g.DrawLine(p, 0, 0, 100, 0);\n    g.ResetTransform();\n    //先平移到指定坐标,然后进行度旋转\n    g.TranslateTransform(100,200);\n    for (int i = 0; i < 8; i++)\n    {\n        g.RotateTransform(45);\n        g.DrawLine(p, 0, 0, 100, 0);\n    }\n    g.Dispose();\n\n运行效果图:\n\n![执行效果](http://upload-images.jianshu.io/upload_images/145902-7dd399b659ac9708.jpg)\n\n\n# Demo 6 : Point\n\nGDI+使用Point表示一个点。这是一个二维平面上的点--一个像素的表示方式。许多GDI+函数例如DrawLine()。以Point作为参数。声明和构造Point的代码如下所示：\n\n\tPoint p = new Point()1,1;\n\n有一些公共属性可以获得和设置Point的X和Y的坐标。\n\n\n# Demo 7 : Size\n\nGDI+使用Size表示一个尺寸(像素)。Size结构包含宽度和高度。声明和构造Size的代码如下所示：\n    \n\tSize s = new Size(5,5);\n\n有一些公共属性可以获得和设置Size的宽度和高度。\n\n\n# Demo 8 : Rectangle\n\nGDI+在许多不同的地方使用这个结构，以指定矩形的坐标。Point结构定义矩形的左上角，Size定义其大小。Rectangle有两个构造函数。一个构造函数的参数是X坐标，Y坐标，宽度和高度，另一个构造函数的参数是Point和Size结构，声明和构建Rectangle的两个范例如下：\n\n\tRectangle r1 = new Rectangle(1,2,5,6);\n\tPoint p = new Point(1,2);\n\tSize s = new Size(5,6);\n\tRectangle = new Rectangle(p,s);\n       \n有一些公共属性可以获得和设置Rectangle的4个点和大小。另外，还有其他属性和方法可以完成诸如测试矩形是否维空，确定矩形是否与另一个矩形相交，提取两个矩形的相交部分，合并两个矩形等工作。\n\n下面两个更重要的数据类型可以用作GDI+中许多绘图函数的参数。\n\n\n# Demo 9 : GraphicsPaths\n\nGraphicsPath类表示一系列连续的线条和曲线。在构造一条路径时，可以添加线条、Bezier曲线、圆弧、饼形图、多边形和矩形等。在构造一条复杂的路径后，可以用一个操作绘制路径：调用DrawPath()。可以调用FillPath()填充路径。\n使用一个点数组和PathTypes构造GraphicsPath，PathTypes是一个byte数组，其中的每个元素对应于点数组中的每一个元素，并给出了路径如何通过这些点来构造的其他信息。例如：如果点是路径的起始点，那么这个点的路径类型就是PathPointType.Start。如果点是两个线条的连接点，那么这个点的路径类型就是PathPointType.Line。如果点用于构造一条从前一点到后一点之间的Bezier曲线，路径类型就是PathPointType.Bezier。\n下面是用4条线段创建一个图形路径：\n\n\tusing System.Drawing.Drawing2D; //增加此句\n\t\n\tprotected override void OnPaint(PaintEventArgs e)\n\t{\n\t        GraphicsPath path;\n\t        path = new GraphicsPath(new Point[]{\n\t                   new Point(10,10),\n\t                   new Point(150,10),\n\t                   new Point(200,150),\n\t                   new Point(10,150),\n\t                   new Point(200,160),\n\t                   },new byte[]{\n\t                   (byte)PathPointType.Start,\n\t                   (byte)PathPointType.Line,\n\t                   (byte)PathPointType.Line,\n\t                   (byte)PathPointType.Line,\n\t                   (byte)PathPointType.Line});\n\t        e.Graphics.DrawPath(Pens.Black,path);\n\t}\n\n# Demo 10 : Regions\n\nRegion类是一个复杂的图形，由矩形和路径组成。在构造了一个Regions后，就可以使用FillRegion()方法绘制该区域。下面的示例创建一个Region对象，并绘制到窗口中。\n下面的代码创建一个区域，给它添加一个Rectangle和一个GraphicsPath，再用蓝色填充该区域：\n\n\tusing System.Drawing,Drawing2D;\n\tprotected override void OnPaint(PaintEventArgs e)\n\t{\n\t    Rectangle r1 = new Rectangle(10,10,50,50);\n\t    Rectangle r2 = new Rectangle(40,40,50,50);\n\t    Region r = new Region(r1);\n\t    r.Union(r2);\n\t\n\t    GraphicsPath path = new GraphicsPath(new Point[]{\n\t        new Point(45,45),\n\t        new Point(145,55),\n\t        new Point(200,150),\n\t        new Point(75,150),\n\t        new Point(45,45)}, \n\t        new byte[]{\n\t        (byte)PathPointType.Start,\n\t        (byte)PathPointType.Bezier,\n\t        (byte)PathPointType.Bezier,\n\t        (byte)PathPointType.Bezier,\n\t        (byte)PathPointType.Line});\n\t\n\t    r.Union(path);\n\t    e.Graphics.FillRegion(Brushes.Blue, r);\n\t}\n\n  \n构造区域代码有些复杂，最复杂的是如何构造组成区域的路径。构造区域包括构造矩形和路径，之后调用Union()方法。如果决定使矩形和路径相交，就可以用Intersection()方法替代Union()。\n\n\nPS:最后我们来看下Graphics这个画板上我们还可以画什么\n\n其实我们上面用到的都是在画一些简单的图形,直线,矩形,扇形,圆孤等,我们还可以用它来绘制图片,这可以用它的DrawI\nmage方法.","slug":"CSharpGDIDraw","published":1,"updated":"2017-03-18T06:12:05.419Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0evfi230007vcfuwpgay9ki","content":"<p>GDI+：Graphics Device Interface Plus也就是图形设备接口,提供了各种丰富的图形图像处理功能;在C#.NET中，使用GDI+处理二维（2D）的图形和图像，使用DirectX处理三维（3D）的图形图像,图形图像处理用到的主要命名空间是System . Drawing：提供了对GDI+基本图形功能的访问，主要有Graphics类、Bitmap类、从Brush类继承的类、Font类、Icon类、Image类、Pen类、Color类等.</p>\n<p>画板可以通过Graphics这个类来创建</p>\n<p>笔又可以分好多种类,比如铅笔（用来画线条）,画刷（用来画区域）等。在c#中我们可以用Pen,Brush类来实现类似功能</p>\n<p>颜色自然是用Color类</p>\n<p>所需命名空间：using System.Drawing;</p>\n<h1 id=\"Demo-1-在空白窗体中画基本图形\"><a href=\"#Demo-1-在空白窗体中画基本图形\" class=\"headerlink\" title=\"Demo 1 : 在空白窗体中画基本图形\"></a>Demo 1 : 在空白窗体中画基本图形</h1><p>准备一个画板:<br>创建一个画板主要有3种方式:</p>\n<blockquote>\n<p>A: 在窗体或控件的Paint事件中直接引用Graphics对象<br>B: 利用窗体或某个控件的CreateGraphics方法<br>C: 从继承自图像的任何对象创建Graphics对象</p>\n</blockquote>\n<p>这次我们就先以A为例:</p>\n<pre><code>private void Form1_Paint(object sender, PaintEventArgs e)\n{\n    Graphics g = e.Graphics; //创建画板,这里的画板是由Form提供的.\n}\n</code></pre><p>然后,我们要只笔:</p>\n<pre><code>private void Form1_Paint(object sender, PaintEventArgs e)\n{\n    Graphics g = e.Graphics; //创建画板,这里的画板是由Form提供的.\n    Pen p = new Pen(Color.Blue, 2);//定义了一个蓝色,宽度为的画笔\n}\n</code></pre><p>接下来我们就可以来画画了.</p>\n<pre><code>private void Form1_Paint(object sender, PaintEventArgs e)\n{\n    Graphics g = e.Graphics; //创建画板,这里的画板是由Form提供的.\n    Pen p = new Pen(Color.Blue, 2);//定义了一个蓝色,宽度为的画笔\n    g.DrawLine(p, 10, 10, 100, 100);//在画板上画直线,起始坐标为(10,10),终点坐标为(100,100)\n    g.DrawRectangle(p, 10, 10, 100, 100);//在画板上画矩形,起始坐标为(10,10),宽为,高为\n    g.DrawEllipse(p, 10, 10, 100, 100);//在画板上画椭圆,起始坐标为(10,10),外接矩形的宽为,高为\n}\n</code></pre><p>效果图如下:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-73dd0d82c9c17074.JPG\" alt=\"执行效果\"></p>\n<h1 id=\"Demo-2-Pen的使用\"><a href=\"#Demo-2-Pen的使用\" class=\"headerlink\" title=\"Demo 2 : Pen的使用\"></a>Demo 2 : Pen的使用</h1><p>Pen的属性主要有: Color(颜色),DashCap(短划线终点形状),DashStyle(虚线样式),EndCap(线尾形状),StartCap(线头形状),Width(粗细)等.我们可以用Pen 来画虚线,带箭头的直线等</p>\n<pre><code>Pen　p = new　Pen(Color.Blue, 5);//设置笔的粗细为,颜色为蓝色\n\nGraphics　g = this.CreateGraphics();\n\n//画虚线\n\np.DashStyle = DashStyle.Dot;//定义虚线的样式为点\n\ng.DrawLine(p, 10, 10, 200, 10);\n\n//自定义虚线\np.DashPattern = new　float[] { 2, 1 };//设置短划线和空白部分的数组\ng.DrawLine(p, 10, 20, 200, 20);\n//画箭头,只对不封闭曲线有用\np.DashStyle = DashStyle.Solid;//实线\np.EndCap = LineCap.ArrowAnchor;//定义线尾的样式为箭头\ng.DrawLine(p, 10, 30, 200, 30);\ng.Dispose();\np.Dispose();\n</code></pre><p>以上代码运行结果:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-16f9e2f1f8bb35f0.jpg\" alt=\"http://images.cnblogs.com/cnblogs\\_com/stg609/a3.JPG\"></p>\n<h1 id=\"Demo-3-Brush的使用\"><a href=\"#Demo-3-Brush的使用\" class=\"headerlink\" title=\"Demo 3 : Brush的使用\"></a>Demo 3 : Brush的使用</h1><p>作用:我们可以用画刷填充各种图形形状，如矩形、椭圆、扇形、多边形和封闭路径等,主要有几种不同类型的画刷:</p>\n<p>SolidBrush：画刷最简单的形式，用纯色进行绘制</p>\n<p>HatchBrush：类似于 SolidBrush，但是可以利用该类从大量预设的图案中选择绘制时要使用的图案，而不是纯色</p>\n<p>TextureBrush：使用纹理（如图像）进行绘制</p>\n<p>LinearGradientBrush：使用沿渐变混合的两种颜色进行绘制</p>\n<p>PathGradientBrush ：基于编程者定义的唯一路径，使用复杂的混合色渐变进行绘制</p>\n<p>我们这里只是简单介绍使用其中的几种:</p>\n<pre><code>Graphics g = this.CreateGraphics();\n\nRectangle rect = new Rectangle(10, 10, 50, 50);//定义矩形,参数为起点横纵坐标以及其长和宽\n\n//单色填充\n\nSolidBrush b1 = new SolidBrush(Color.Blue);//定义单色画刷　　　　　\n\ng.FillRectangle(b1, rect);//填充这个矩形\n\n//字符串\n\ng.DrawString(&quot;字符串&quot;, new Font(&quot;宋体&quot;, 10), b1, new PointF(90, 10));\n\n//用图片填充\n\nTextureBrush b2 = new TextureBrush(Image.FromFile(@&quot;e:picture1.jpg&quot;));\n\nrect.Location = new Point(10, 70);//更改这个矩形的起点坐标\n\nrect.Width = 200;//更改这个矩形的宽来\n\nrect.Height = 200;//更改这个矩形的高\n\ng.FillRectangle(b2, rect);\n\n//用渐变色填充\n\nrect.Location = new Point(10, 290);\n\nLinearGradientBrush b3 = new　LinearGradientBrush(rect, Color.Yellow , Color.Black , LinearGradientMode.Horizontal);\n\ng.FillRectangle(b3, rect);\n</code></pre><p>　　运行效果图:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-f0d75c4d89030d54.jpg\" alt=\"http://images.cnblogs.com/cnblogs\\_com/stg609/a1.jpg\"></p>\n<h1 id=\"Demo-4-颜色的使用\"><a href=\"#Demo-4-颜色的使用\" class=\"headerlink\" title=\"Demo 4 : 颜色的使用\"></a>Demo 4 : 颜色的使用</h1><p>在GDI+中，颜色封装在Color结构中。把红、绿、蓝色值传送给Color结构的一个函数，就可以创建一中颜色，几乎从来不需要创建颜色。Color结构包含大约150个属性，提供了大量的预置颜色。如果需要以LightGoldenrodYellow 或 LavenderBlush颜色绘制图形，都有预定义的颜色我们使用。声明一个Color类型的变量，用Color结构中的一种颜色初始化它，如下：</p>\n<p>Color redColor = Color.Red;</p>\n<p>Color anotherColor = Color.LightGoldenrodYellow;</p>\n<p>下面几乎已经准备好绘图了，但绘图前有两点需要注意。</p>\n<p>表示颜色的另一种方法是把颜色分解为3种组件：色调、饱和度、亮度。Color结构包含完成分解颜色的实用方法：GetBrightness()、GetHue()、GetSaturation()。</p>\n<p>下面的示例将创建一个颜色选择对话框，使用它查看以RGB定义的颜色和以色调、饱和度、亮度定义的颜色之间的关系。</p>\n<pre><code>public Form1()\n{\n\nInitializeComponent();\n\nthis.colorDialog1.ShowDialog();\n\n}\n</code></pre><p>生成这个窗体时，就生成了颜色选择对话框。</p>\n<p>运行应用程序，单击Define Custom Colors按钮，显示一个对话框，在其中可以使用鼠标选择一种颜色，查看该颜色的RGB值。还可以获得该颜色的色调、饱和度、亮度值。也可以直接输入RGB值，查看得到的颜色。</p>\n<h1 id=\"Demo-5-坐标轴变换\"><a href=\"#Demo-5-坐标轴变换\" class=\"headerlink\" title=\"Demo 5 : 坐标轴变换\"></a>Demo 5 : 坐标轴变换</h1><p>在winform中的坐标轴和我们平时接触的平面直角坐标轴不同,winform中的坐标轴方向完全相反:窗体的左上角为原点(0,0),水平向左则X增大,垂直下向则Y增大</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-b7532e0e0f58cc6e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"效果\"></p>\n<p>我们来实际操作下,通过旋转坐标轴的方向来画出不同角度的图案,或通过更改坐标原点的位置来平衡坐标轴的位置.</p>\n<pre><code>Graphics g = this.CreateGraphics();\n//单色填充\n//SolidBrush b1 = new SolidBrush(Color.Blue);//定义单色画刷　　　　　\nPen p = new Pen(Color.Blue,1);\n//转变坐标轴角度\nfor (int i = 0; i &lt; 90; i++)\n{\n　　 g.RotateTransform(i);//每旋转一度就画一条线\n　　 g.DrawLine(p, 0, 0, 100, 0);\n　　 g.ResetTransform();//恢复坐标轴坐标\n}\n//平移坐标轴\ng.TranslateTransform(100, 100);\ng.DrawLine(p, 0, 0, 100, 0);\ng.ResetTransform();\n//先平移到指定坐标,然后进行度旋转\ng.TranslateTransform(100,200);\nfor (int i = 0; i &lt; 8; i++)\n{\n    g.RotateTransform(45);\n    g.DrawLine(p, 0, 0, 100, 0);\n}\ng.Dispose();\n</code></pre><p>运行效果图:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-7dd399b659ac9708.jpg\" alt=\"执行效果\"></p>\n<h1 id=\"Demo-6-Point\"><a href=\"#Demo-6-Point\" class=\"headerlink\" title=\"Demo 6 : Point\"></a>Demo 6 : Point</h1><p>GDI+使用Point表示一个点。这是一个二维平面上的点–一个像素的表示方式。许多GDI+函数例如DrawLine()。以Point作为参数。声明和构造Point的代码如下所示：</p>\n<pre><code>Point p = new Point()1,1;\n</code></pre><p>有一些公共属性可以获得和设置Point的X和Y的坐标。</p>\n<h1 id=\"Demo-7-Size\"><a href=\"#Demo-7-Size\" class=\"headerlink\" title=\"Demo 7 : Size\"></a>Demo 7 : Size</h1><p>GDI+使用Size表示一个尺寸(像素)。Size结构包含宽度和高度。声明和构造Size的代码如下所示：</p>\n<pre><code>Size s = new Size(5,5);\n</code></pre><p>有一些公共属性可以获得和设置Size的宽度和高度。</p>\n<h1 id=\"Demo-8-Rectangle\"><a href=\"#Demo-8-Rectangle\" class=\"headerlink\" title=\"Demo 8 : Rectangle\"></a>Demo 8 : Rectangle</h1><p>GDI+在许多不同的地方使用这个结构，以指定矩形的坐标。Point结构定义矩形的左上角，Size定义其大小。Rectangle有两个构造函数。一个构造函数的参数是X坐标，Y坐标，宽度和高度，另一个构造函数的参数是Point和Size结构，声明和构建Rectangle的两个范例如下：</p>\n<pre><code>Rectangle r1 = new Rectangle(1,2,5,6);\nPoint p = new Point(1,2);\nSize s = new Size(5,6);\nRectangle = new Rectangle(p,s);\n</code></pre><p>有一些公共属性可以获得和设置Rectangle的4个点和大小。另外，还有其他属性和方法可以完成诸如测试矩形是否维空，确定矩形是否与另一个矩形相交，提取两个矩形的相交部分，合并两个矩形等工作。</p>\n<p>下面两个更重要的数据类型可以用作GDI+中许多绘图函数的参数。</p>\n<h1 id=\"Demo-9-GraphicsPaths\"><a href=\"#Demo-9-GraphicsPaths\" class=\"headerlink\" title=\"Demo 9 : GraphicsPaths\"></a>Demo 9 : GraphicsPaths</h1><p>GraphicsPath类表示一系列连续的线条和曲线。在构造一条路径时，可以添加线条、Bezier曲线、圆弧、饼形图、多边形和矩形等。在构造一条复杂的路径后，可以用一个操作绘制路径：调用DrawPath()。可以调用FillPath()填充路径。<br>使用一个点数组和PathTypes构造GraphicsPath，PathTypes是一个byte数组，其中的每个元素对应于点数组中的每一个元素，并给出了路径如何通过这些点来构造的其他信息。例如：如果点是路径的起始点，那么这个点的路径类型就是PathPointType.Start。如果点是两个线条的连接点，那么这个点的路径类型就是PathPointType.Line。如果点用于构造一条从前一点到后一点之间的Bezier曲线，路径类型就是PathPointType.Bezier。<br>下面是用4条线段创建一个图形路径：</p>\n<pre><code>using System.Drawing.Drawing2D; //增加此句\n\nprotected override void OnPaint(PaintEventArgs e)\n{\n        GraphicsPath path;\n        path = new GraphicsPath(new Point[]{\n                   new Point(10,10),\n                   new Point(150,10),\n                   new Point(200,150),\n                   new Point(10,150),\n                   new Point(200,160),\n                   },new byte[]{\n                   (byte)PathPointType.Start,\n                   (byte)PathPointType.Line,\n                   (byte)PathPointType.Line,\n                   (byte)PathPointType.Line,\n                   (byte)PathPointType.Line});\n        e.Graphics.DrawPath(Pens.Black,path);\n}\n</code></pre><h1 id=\"Demo-10-Regions\"><a href=\"#Demo-10-Regions\" class=\"headerlink\" title=\"Demo 10 : Regions\"></a>Demo 10 : Regions</h1><p>Region类是一个复杂的图形，由矩形和路径组成。在构造了一个Regions后，就可以使用FillRegion()方法绘制该区域。下面的示例创建一个Region对象，并绘制到窗口中。<br>下面的代码创建一个区域，给它添加一个Rectangle和一个GraphicsPath，再用蓝色填充该区域：</p>\n<pre><code>using System.Drawing,Drawing2D;\nprotected override void OnPaint(PaintEventArgs e)\n{\n    Rectangle r1 = new Rectangle(10,10,50,50);\n    Rectangle r2 = new Rectangle(40,40,50,50);\n    Region r = new Region(r1);\n    r.Union(r2);\n\n    GraphicsPath path = new GraphicsPath(new Point[]{\n        new Point(45,45),\n        new Point(145,55),\n        new Point(200,150),\n        new Point(75,150),\n        new Point(45,45)}, \n        new byte[]{\n        (byte)PathPointType.Start,\n        (byte)PathPointType.Bezier,\n        (byte)PathPointType.Bezier,\n        (byte)PathPointType.Bezier,\n        (byte)PathPointType.Line});\n\n    r.Union(path);\n    e.Graphics.FillRegion(Brushes.Blue, r);\n}\n</code></pre><p>构造区域代码有些复杂，最复杂的是如何构造组成区域的路径。构造区域包括构造矩形和路径，之后调用Union()方法。如果决定使矩形和路径相交，就可以用Intersection()方法替代Union()。</p>\n<p>PS:最后我们来看下Graphics这个画板上我们还可以画什么</p>\n<p>其实我们上面用到的都是在画一些简单的图形,直线,矩形,扇形,圆孤等,我们还可以用它来绘制图片,这可以用它的DrawI<br>mage方法.</p>\n","excerpt":"","more":"<p>GDI+：Graphics Device Interface Plus也就是图形设备接口,提供了各种丰富的图形图像处理功能;在C#.NET中，使用GDI+处理二维（2D）的图形和图像，使用DirectX处理三维（3D）的图形图像,图形图像处理用到的主要命名空间是System . Drawing：提供了对GDI+基本图形功能的访问，主要有Graphics类、Bitmap类、从Brush类继承的类、Font类、Icon类、Image类、Pen类、Color类等.</p>\n<p>画板可以通过Graphics这个类来创建</p>\n<p>笔又可以分好多种类,比如铅笔（用来画线条）,画刷（用来画区域）等。在c#中我们可以用Pen,Brush类来实现类似功能</p>\n<p>颜色自然是用Color类</p>\n<p>所需命名空间：using System.Drawing;</p>\n<h1 id=\"Demo-1-在空白窗体中画基本图形\"><a href=\"#Demo-1-在空白窗体中画基本图形\" class=\"headerlink\" title=\"Demo 1 : 在空白窗体中画基本图形\"></a>Demo 1 : 在空白窗体中画基本图形</h1><p>准备一个画板:<br>创建一个画板主要有3种方式:</p>\n<blockquote>\n<p>A: 在窗体或控件的Paint事件中直接引用Graphics对象<br>B: 利用窗体或某个控件的CreateGraphics方法<br>C: 从继承自图像的任何对象创建Graphics对象</p>\n</blockquote>\n<p>这次我们就先以A为例:</p>\n<pre><code>private void Form1_Paint(object sender, PaintEventArgs e)\n{\n    Graphics g = e.Graphics; //创建画板,这里的画板是由Form提供的.\n}\n</code></pre><p>然后,我们要只笔:</p>\n<pre><code>private void Form1_Paint(object sender, PaintEventArgs e)\n{\n    Graphics g = e.Graphics; //创建画板,这里的画板是由Form提供的.\n    Pen p = new Pen(Color.Blue, 2);//定义了一个蓝色,宽度为的画笔\n}\n</code></pre><p>接下来我们就可以来画画了.</p>\n<pre><code>private void Form1_Paint(object sender, PaintEventArgs e)\n{\n    Graphics g = e.Graphics; //创建画板,这里的画板是由Form提供的.\n    Pen p = new Pen(Color.Blue, 2);//定义了一个蓝色,宽度为的画笔\n    g.DrawLine(p, 10, 10, 100, 100);//在画板上画直线,起始坐标为(10,10),终点坐标为(100,100)\n    g.DrawRectangle(p, 10, 10, 100, 100);//在画板上画矩形,起始坐标为(10,10),宽为,高为\n    g.DrawEllipse(p, 10, 10, 100, 100);//在画板上画椭圆,起始坐标为(10,10),外接矩形的宽为,高为\n}\n</code></pre><p>效果图如下:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-73dd0d82c9c17074.JPG\" alt=\"执行效果\"></p>\n<h1 id=\"Demo-2-Pen的使用\"><a href=\"#Demo-2-Pen的使用\" class=\"headerlink\" title=\"Demo 2 : Pen的使用\"></a>Demo 2 : Pen的使用</h1><p>Pen的属性主要有: Color(颜色),DashCap(短划线终点形状),DashStyle(虚线样式),EndCap(线尾形状),StartCap(线头形状),Width(粗细)等.我们可以用Pen 来画虚线,带箭头的直线等</p>\n<pre><code>Pen　p = new　Pen(Color.Blue, 5);//设置笔的粗细为,颜色为蓝色\n\nGraphics　g = this.CreateGraphics();\n\n//画虚线\n\np.DashStyle = DashStyle.Dot;//定义虚线的样式为点\n\ng.DrawLine(p, 10, 10, 200, 10);\n\n//自定义虚线\np.DashPattern = new　float[] { 2, 1 };//设置短划线和空白部分的数组\ng.DrawLine(p, 10, 20, 200, 20);\n//画箭头,只对不封闭曲线有用\np.DashStyle = DashStyle.Solid;//实线\np.EndCap = LineCap.ArrowAnchor;//定义线尾的样式为箭头\ng.DrawLine(p, 10, 30, 200, 30);\ng.Dispose();\np.Dispose();\n</code></pre><p>以上代码运行结果:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-16f9e2f1f8bb35f0.jpg\" alt=\"http://images.cnblogs.com/cnblogs\\_com/stg609/a3.JPG\"></p>\n<h1 id=\"Demo-3-Brush的使用\"><a href=\"#Demo-3-Brush的使用\" class=\"headerlink\" title=\"Demo 3 : Brush的使用\"></a>Demo 3 : Brush的使用</h1><p>作用:我们可以用画刷填充各种图形形状，如矩形、椭圆、扇形、多边形和封闭路径等,主要有几种不同类型的画刷:</p>\n<p>SolidBrush：画刷最简单的形式，用纯色进行绘制</p>\n<p>HatchBrush：类似于 SolidBrush，但是可以利用该类从大量预设的图案中选择绘制时要使用的图案，而不是纯色</p>\n<p>TextureBrush：使用纹理（如图像）进行绘制</p>\n<p>LinearGradientBrush：使用沿渐变混合的两种颜色进行绘制</p>\n<p>PathGradientBrush ：基于编程者定义的唯一路径，使用复杂的混合色渐变进行绘制</p>\n<p>我们这里只是简单介绍使用其中的几种:</p>\n<pre><code>Graphics g = this.CreateGraphics();\n\nRectangle rect = new Rectangle(10, 10, 50, 50);//定义矩形,参数为起点横纵坐标以及其长和宽\n\n//单色填充\n\nSolidBrush b1 = new SolidBrush(Color.Blue);//定义单色画刷　　　　　\n\ng.FillRectangle(b1, rect);//填充这个矩形\n\n//字符串\n\ng.DrawString(&quot;字符串&quot;, new Font(&quot;宋体&quot;, 10), b1, new PointF(90, 10));\n\n//用图片填充\n\nTextureBrush b2 = new TextureBrush(Image.FromFile(@&quot;e:picture1.jpg&quot;));\n\nrect.Location = new Point(10, 70);//更改这个矩形的起点坐标\n\nrect.Width = 200;//更改这个矩形的宽来\n\nrect.Height = 200;//更改这个矩形的高\n\ng.FillRectangle(b2, rect);\n\n//用渐变色填充\n\nrect.Location = new Point(10, 290);\n\nLinearGradientBrush b3 = new　LinearGradientBrush(rect, Color.Yellow , Color.Black , LinearGradientMode.Horizontal);\n\ng.FillRectangle(b3, rect);\n</code></pre><p>　　运行效果图:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-f0d75c4d89030d54.jpg\" alt=\"http://images.cnblogs.com/cnblogs\\_com/stg609/a1.jpg\"></p>\n<h1 id=\"Demo-4-颜色的使用\"><a href=\"#Demo-4-颜色的使用\" class=\"headerlink\" title=\"Demo 4 : 颜色的使用\"></a>Demo 4 : 颜色的使用</h1><p>在GDI+中，颜色封装在Color结构中。把红、绿、蓝色值传送给Color结构的一个函数，就可以创建一中颜色，几乎从来不需要创建颜色。Color结构包含大约150个属性，提供了大量的预置颜色。如果需要以LightGoldenrodYellow 或 LavenderBlush颜色绘制图形，都有预定义的颜色我们使用。声明一个Color类型的变量，用Color结构中的一种颜色初始化它，如下：</p>\n<p>Color redColor = Color.Red;</p>\n<p>Color anotherColor = Color.LightGoldenrodYellow;</p>\n<p>下面几乎已经准备好绘图了，但绘图前有两点需要注意。</p>\n<p>表示颜色的另一种方法是把颜色分解为3种组件：色调、饱和度、亮度。Color结构包含完成分解颜色的实用方法：GetBrightness()、GetHue()、GetSaturation()。</p>\n<p>下面的示例将创建一个颜色选择对话框，使用它查看以RGB定义的颜色和以色调、饱和度、亮度定义的颜色之间的关系。</p>\n<pre><code>public Form1()\n{\n\nInitializeComponent();\n\nthis.colorDialog1.ShowDialog();\n\n}\n</code></pre><p>生成这个窗体时，就生成了颜色选择对话框。</p>\n<p>运行应用程序，单击Define Custom Colors按钮，显示一个对话框，在其中可以使用鼠标选择一种颜色，查看该颜色的RGB值。还可以获得该颜色的色调、饱和度、亮度值。也可以直接输入RGB值，查看得到的颜色。</p>\n<h1 id=\"Demo-5-坐标轴变换\"><a href=\"#Demo-5-坐标轴变换\" class=\"headerlink\" title=\"Demo 5 : 坐标轴变换\"></a>Demo 5 : 坐标轴变换</h1><p>在winform中的坐标轴和我们平时接触的平面直角坐标轴不同,winform中的坐标轴方向完全相反:窗体的左上角为原点(0,0),水平向左则X增大,垂直下向则Y增大</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-b7532e0e0f58cc6e.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"效果\"></p>\n<p>我们来实际操作下,通过旋转坐标轴的方向来画出不同角度的图案,或通过更改坐标原点的位置来平衡坐标轴的位置.</p>\n<pre><code>Graphics g = this.CreateGraphics();\n//单色填充\n//SolidBrush b1 = new SolidBrush(Color.Blue);//定义单色画刷　　　　　\nPen p = new Pen(Color.Blue,1);\n//转变坐标轴角度\nfor (int i = 0; i &lt; 90; i++)\n{\n　　 g.RotateTransform(i);//每旋转一度就画一条线\n　　 g.DrawLine(p, 0, 0, 100, 0);\n　　 g.ResetTransform();//恢复坐标轴坐标\n}\n//平移坐标轴\ng.TranslateTransform(100, 100);\ng.DrawLine(p, 0, 0, 100, 0);\ng.ResetTransform();\n//先平移到指定坐标,然后进行度旋转\ng.TranslateTransform(100,200);\nfor (int i = 0; i &lt; 8; i++)\n{\n    g.RotateTransform(45);\n    g.DrawLine(p, 0, 0, 100, 0);\n}\ng.Dispose();\n</code></pre><p>运行效果图:</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-7dd399b659ac9708.jpg\" alt=\"执行效果\"></p>\n<h1 id=\"Demo-6-Point\"><a href=\"#Demo-6-Point\" class=\"headerlink\" title=\"Demo 6 : Point\"></a>Demo 6 : Point</h1><p>GDI+使用Point表示一个点。这是一个二维平面上的点–一个像素的表示方式。许多GDI+函数例如DrawLine()。以Point作为参数。声明和构造Point的代码如下所示：</p>\n<pre><code>Point p = new Point()1,1;\n</code></pre><p>有一些公共属性可以获得和设置Point的X和Y的坐标。</p>\n<h1 id=\"Demo-7-Size\"><a href=\"#Demo-7-Size\" class=\"headerlink\" title=\"Demo 7 : Size\"></a>Demo 7 : Size</h1><p>GDI+使用Size表示一个尺寸(像素)。Size结构包含宽度和高度。声明和构造Size的代码如下所示：</p>\n<pre><code>Size s = new Size(5,5);\n</code></pre><p>有一些公共属性可以获得和设置Size的宽度和高度。</p>\n<h1 id=\"Demo-8-Rectangle\"><a href=\"#Demo-8-Rectangle\" class=\"headerlink\" title=\"Demo 8 : Rectangle\"></a>Demo 8 : Rectangle</h1><p>GDI+在许多不同的地方使用这个结构，以指定矩形的坐标。Point结构定义矩形的左上角，Size定义其大小。Rectangle有两个构造函数。一个构造函数的参数是X坐标，Y坐标，宽度和高度，另一个构造函数的参数是Point和Size结构，声明和构建Rectangle的两个范例如下：</p>\n<pre><code>Rectangle r1 = new Rectangle(1,2,5,6);\nPoint p = new Point(1,2);\nSize s = new Size(5,6);\nRectangle = new Rectangle(p,s);\n</code></pre><p>有一些公共属性可以获得和设置Rectangle的4个点和大小。另外，还有其他属性和方法可以完成诸如测试矩形是否维空，确定矩形是否与另一个矩形相交，提取两个矩形的相交部分，合并两个矩形等工作。</p>\n<p>下面两个更重要的数据类型可以用作GDI+中许多绘图函数的参数。</p>\n<h1 id=\"Demo-9-GraphicsPaths\"><a href=\"#Demo-9-GraphicsPaths\" class=\"headerlink\" title=\"Demo 9 : GraphicsPaths\"></a>Demo 9 : GraphicsPaths</h1><p>GraphicsPath类表示一系列连续的线条和曲线。在构造一条路径时，可以添加线条、Bezier曲线、圆弧、饼形图、多边形和矩形等。在构造一条复杂的路径后，可以用一个操作绘制路径：调用DrawPath()。可以调用FillPath()填充路径。<br>使用一个点数组和PathTypes构造GraphicsPath，PathTypes是一个byte数组，其中的每个元素对应于点数组中的每一个元素，并给出了路径如何通过这些点来构造的其他信息。例如：如果点是路径的起始点，那么这个点的路径类型就是PathPointType.Start。如果点是两个线条的连接点，那么这个点的路径类型就是PathPointType.Line。如果点用于构造一条从前一点到后一点之间的Bezier曲线，路径类型就是PathPointType.Bezier。<br>下面是用4条线段创建一个图形路径：</p>\n<pre><code>using System.Drawing.Drawing2D; //增加此句\n\nprotected override void OnPaint(PaintEventArgs e)\n{\n        GraphicsPath path;\n        path = new GraphicsPath(new Point[]{\n                   new Point(10,10),\n                   new Point(150,10),\n                   new Point(200,150),\n                   new Point(10,150),\n                   new Point(200,160),\n                   },new byte[]{\n                   (byte)PathPointType.Start,\n                   (byte)PathPointType.Line,\n                   (byte)PathPointType.Line,\n                   (byte)PathPointType.Line,\n                   (byte)PathPointType.Line});\n        e.Graphics.DrawPath(Pens.Black,path);\n}\n</code></pre><h1 id=\"Demo-10-Regions\"><a href=\"#Demo-10-Regions\" class=\"headerlink\" title=\"Demo 10 : Regions\"></a>Demo 10 : Regions</h1><p>Region类是一个复杂的图形，由矩形和路径组成。在构造了一个Regions后，就可以使用FillRegion()方法绘制该区域。下面的示例创建一个Region对象，并绘制到窗口中。<br>下面的代码创建一个区域，给它添加一个Rectangle和一个GraphicsPath，再用蓝色填充该区域：</p>\n<pre><code>using System.Drawing,Drawing2D;\nprotected override void OnPaint(PaintEventArgs e)\n{\n    Rectangle r1 = new Rectangle(10,10,50,50);\n    Rectangle r2 = new Rectangle(40,40,50,50);\n    Region r = new Region(r1);\n    r.Union(r2);\n\n    GraphicsPath path = new GraphicsPath(new Point[]{\n        new Point(45,45),\n        new Point(145,55),\n        new Point(200,150),\n        new Point(75,150),\n        new Point(45,45)}, \n        new byte[]{\n        (byte)PathPointType.Start,\n        (byte)PathPointType.Bezier,\n        (byte)PathPointType.Bezier,\n        (byte)PathPointType.Bezier,\n        (byte)PathPointType.Line});\n\n    r.Union(path);\n    e.Graphics.FillRegion(Brushes.Blue, r);\n}\n</code></pre><p>构造区域代码有些复杂，最复杂的是如何构造组成区域的路径。构造区域包括构造矩形和路径，之后调用Union()方法。如果决定使矩形和路径相交，就可以用Intersection()方法替代Union()。</p>\n<p>PS:最后我们来看下Graphics这个画板上我们还可以画什么</p>\n<p>其实我们上面用到的都是在画一些简单的图形,直线,矩形,扇形,圆孤等,我们还可以用它来绘制图片,这可以用它的DrawI<br>mage方法.</p>\n"},{"title":"C# CheckBoxList控件","date":"2017-03-18T06:16:55.000Z","_content":"\n单个的CheckBox控件对于一两个复选框的使用是比较方便的，然而，如果想要在一个页面中排放n个复选框，而且这些复选框的内容需要从数据库中动态获取时，CheckBoxList控件就非常有用。它能够通过控件数组的方法操作一系列的复选框。\n\n下面介绍CheckBoxList控件的一些简单用法。\n\n# 1.与ObjectDataSource绑定\n\n## 1）创建一个与数据库关联好的ObjectDataSource控件。如有问题请参考：\n <http://blog.sina.com.cn/s/blog_6849d1c201017ryg.html>\n\n## 2）为CheckListBox选择新数据源\n\n![CheckBoxList控件](http://upload-images.jianshu.io/upload_images/145902-e143c24a765906d6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 3）选择\n\n![CheckBoxList控件](http://upload-images.jianshu.io/upload_images/145902-0582b394e8ad890c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n数据源选择ObjectDataSource即可。后面两项一个是显示内容，一个是值内容（Value属性的值）。这两项都要填数据表中的字段。\n这样就绑定成功了。\n\n# 2.添加项\n\n\tcheckedListBox1.Items.Add(\"蓝色\");\n\tcheckedListBox1.Items.Add(\"红色\");\n\tcheckedListBox1.Items.Add(\"黄色\");\n\n# 3.判断第i项是否选中,选中为true,否则为false\n\n\tif（checkedListBox1.GetItemChecked(i)）\n\t{\n\t    return true;\n\t}\n\telse\n\t{\n\t    return false;\n\t}\n\n# 4.设置第i项是否选中\n\n\tcheckedListBox1.SetItemChecked(i, true); //true改为false为没有选中。\n\tcheckedListBox1.SetItemCheckState(i, CheckState.Checked);\n\n# 5.设置全选\n\n\tif(true)\n\t{\n\t    for (int j = 0; j < checkedListBox1.Items.Count; j++)\n\t        checkedListBox1.SetItemChecked(j, true);\n\t}\n\telse\n\t{\n\t    for (int j =0; j < checkedListBox1.Items.Count; j++)\n\t        checkedListBox1.SetItemChecked(j, false);\n\t}\n\n# 6.得到全部选中的值 ，并将选中的项的文本组合成为一个字符串。\n\n\tstring strCollected = string.Empty;\n\tfor (int i = 0; i < checkedListBox1.Items.Count; i++)\n\t{\n\t    if (checkedListBox1.GetItemChecked(i))\n\t    {\n\t        if (strCollected == string.Empty)\n\t        {\n\t            strCollected = checkedListBox1.GetItemText(checkedListBox1.Items[i]);\n\t        }\n\t        else\n\t        {\n\t            strCollected = strCollected + \"/\" + checkedListBox1.GetItemText(checkedListBox1.Items[i]);\n\t         }\n\t     }\n\t}\n\n# 7.清除checkedListBox中所有的选项\n\n\tfor (int i = 0; i < checkedListBox1.Items.Count; i++)\n\t{\n\t    checkedListBox1.Items.Clear();\n\t}\n\n# 8.设置索引为index的项为选中状态\n\n\tfor (int i = 0; i < checkedListBox1.Items.Count; i++)\n\t{\n\t    checkedListBox1.SetItemChecked(i, true);\n\t}\n\n# 9.选中checkedListBox1所有的选项\n\n\tfor (int i = 0; i < checkedListBox1.Items.Count; i++)\n\t{\n\t    checkedListBox1.SetItemCheckState(i, CheckState.Checked);\n\t}\n\n# 10.checkedListBox1中选定的项->checkedListBox2\n\n\tfor (int i = 0; i < checkedListBox1.CheckedItems.Count; i++)\n\t{\n\tcheckedListBox2.Items.Add(this.checkedListBox1.CheckedItems);\n\t\n\t//remove是除去一个具体的值，不是index，注意了\n\tcheckedListBox1.Items.Remove(this.checkedListBox1.CheckedItems);\n\t}\n\nPS: CheckBoxList控件中的每个CheckBox的排列方法都可以通过属性界面进行调整，请参考：\n<http://msdn.microsoft.com/zh-tw/library/wffkd2c9.aspx>","source":"_posts/CSharpCheckBoxList.md","raw":"---\ntitle: C# CheckBoxList控件\ntags:\n  - CSharp\ncategories: CSharp\ndate: 2017-03-18 06:16:55\n---\n\n单个的CheckBox控件对于一两个复选框的使用是比较方便的，然而，如果想要在一个页面中排放n个复选框，而且这些复选框的内容需要从数据库中动态获取时，CheckBoxList控件就非常有用。它能够通过控件数组的方法操作一系列的复选框。\n\n下面介绍CheckBoxList控件的一些简单用法。\n\n# 1.与ObjectDataSource绑定\n\n## 1）创建一个与数据库关联好的ObjectDataSource控件。如有问题请参考：\n <http://blog.sina.com.cn/s/blog_6849d1c201017ryg.html>\n\n## 2）为CheckListBox选择新数据源\n\n![CheckBoxList控件](http://upload-images.jianshu.io/upload_images/145902-e143c24a765906d6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 3）选择\n\n![CheckBoxList控件](http://upload-images.jianshu.io/upload_images/145902-0582b394e8ad890c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n数据源选择ObjectDataSource即可。后面两项一个是显示内容，一个是值内容（Value属性的值）。这两项都要填数据表中的字段。\n这样就绑定成功了。\n\n# 2.添加项\n\n\tcheckedListBox1.Items.Add(\"蓝色\");\n\tcheckedListBox1.Items.Add(\"红色\");\n\tcheckedListBox1.Items.Add(\"黄色\");\n\n# 3.判断第i项是否选中,选中为true,否则为false\n\n\tif（checkedListBox1.GetItemChecked(i)）\n\t{\n\t    return true;\n\t}\n\telse\n\t{\n\t    return false;\n\t}\n\n# 4.设置第i项是否选中\n\n\tcheckedListBox1.SetItemChecked(i, true); //true改为false为没有选中。\n\tcheckedListBox1.SetItemCheckState(i, CheckState.Checked);\n\n# 5.设置全选\n\n\tif(true)\n\t{\n\t    for (int j = 0; j < checkedListBox1.Items.Count; j++)\n\t        checkedListBox1.SetItemChecked(j, true);\n\t}\n\telse\n\t{\n\t    for (int j =0; j < checkedListBox1.Items.Count; j++)\n\t        checkedListBox1.SetItemChecked(j, false);\n\t}\n\n# 6.得到全部选中的值 ，并将选中的项的文本组合成为一个字符串。\n\n\tstring strCollected = string.Empty;\n\tfor (int i = 0; i < checkedListBox1.Items.Count; i++)\n\t{\n\t    if (checkedListBox1.GetItemChecked(i))\n\t    {\n\t        if (strCollected == string.Empty)\n\t        {\n\t            strCollected = checkedListBox1.GetItemText(checkedListBox1.Items[i]);\n\t        }\n\t        else\n\t        {\n\t            strCollected = strCollected + \"/\" + checkedListBox1.GetItemText(checkedListBox1.Items[i]);\n\t         }\n\t     }\n\t}\n\n# 7.清除checkedListBox中所有的选项\n\n\tfor (int i = 0; i < checkedListBox1.Items.Count; i++)\n\t{\n\t    checkedListBox1.Items.Clear();\n\t}\n\n# 8.设置索引为index的项为选中状态\n\n\tfor (int i = 0; i < checkedListBox1.Items.Count; i++)\n\t{\n\t    checkedListBox1.SetItemChecked(i, true);\n\t}\n\n# 9.选中checkedListBox1所有的选项\n\n\tfor (int i = 0; i < checkedListBox1.Items.Count; i++)\n\t{\n\t    checkedListBox1.SetItemCheckState(i, CheckState.Checked);\n\t}\n\n# 10.checkedListBox1中选定的项->checkedListBox2\n\n\tfor (int i = 0; i < checkedListBox1.CheckedItems.Count; i++)\n\t{\n\tcheckedListBox2.Items.Add(this.checkedListBox1.CheckedItems);\n\t\n\t//remove是除去一个具体的值，不是index，注意了\n\tcheckedListBox1.Items.Remove(this.checkedListBox1.CheckedItems);\n\t}\n\nPS: CheckBoxList控件中的每个CheckBox的排列方法都可以通过属性界面进行调整，请参考：\n<http://msdn.microsoft.com/zh-tw/library/wffkd2c9.aspx>","slug":"CSharpCheckBoxList","published":1,"updated":"2017-03-18T06:17:29.455Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0evfi260008vcfupinahyon","content":"<p>单个的CheckBox控件对于一两个复选框的使用是比较方便的，然而，如果想要在一个页面中排放n个复选框，而且这些复选框的内容需要从数据库中动态获取时，CheckBoxList控件就非常有用。它能够通过控件数组的方法操作一系列的复选框。</p>\n<p>下面介绍CheckBoxList控件的一些简单用法。</p>\n<h1 id=\"1-与ObjectDataSource绑定\"><a href=\"#1-与ObjectDataSource绑定\" class=\"headerlink\" title=\"1.与ObjectDataSource绑定\"></a>1.与ObjectDataSource绑定</h1><h2 id=\"1）创建一个与数据库关联好的ObjectDataSource控件。如有问题请参考：\"><a href=\"#1）创建一个与数据库关联好的ObjectDataSource控件。如有问题请参考：\" class=\"headerlink\" title=\"1）创建一个与数据库关联好的ObjectDataSource控件。如有问题请参考：\"></a>1）创建一个与数据库关联好的ObjectDataSource控件。如有问题请参考：</h2><p> <a href=\"http://blog.sina.com.cn/s/blog_6849d1c201017ryg.html\" target=\"_blank\" rel=\"external\">http://blog.sina.com.cn/s/blog_6849d1c201017ryg.html</a></p>\n<h2 id=\"2）为CheckListBox选择新数据源\"><a href=\"#2）为CheckListBox选择新数据源\" class=\"headerlink\" title=\"2）为CheckListBox选择新数据源\"></a>2）为CheckListBox选择新数据源</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/145902-e143c24a765906d6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"CheckBoxList控件\"></p>\n<h2 id=\"3）选择\"><a href=\"#3）选择\" class=\"headerlink\" title=\"3）选择\"></a>3）选择</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/145902-0582b394e8ad890c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"CheckBoxList控件\"></p>\n<p>数据源选择ObjectDataSource即可。后面两项一个是显示内容，一个是值内容（Value属性的值）。这两项都要填数据表中的字段。<br>这样就绑定成功了。</p>\n<h1 id=\"2-添加项\"><a href=\"#2-添加项\" class=\"headerlink\" title=\"2.添加项\"></a>2.添加项</h1><pre><code>checkedListBox1.Items.Add(&quot;蓝色&quot;);\ncheckedListBox1.Items.Add(&quot;红色&quot;);\ncheckedListBox1.Items.Add(&quot;黄色&quot;);\n</code></pre><h1 id=\"3-判断第i项是否选中-选中为true-否则为false\"><a href=\"#3-判断第i项是否选中-选中为true-否则为false\" class=\"headerlink\" title=\"3.判断第i项是否选中,选中为true,否则为false\"></a>3.判断第i项是否选中,选中为true,否则为false</h1><pre><code>if（checkedListBox1.GetItemChecked(i)）\n{\n    return true;\n}\nelse\n{\n    return false;\n}\n</code></pre><h1 id=\"4-设置第i项是否选中\"><a href=\"#4-设置第i项是否选中\" class=\"headerlink\" title=\"4.设置第i项是否选中\"></a>4.设置第i项是否选中</h1><pre><code>checkedListBox1.SetItemChecked(i, true); //true改为false为没有选中。\ncheckedListBox1.SetItemCheckState(i, CheckState.Checked);\n</code></pre><h1 id=\"5-设置全选\"><a href=\"#5-设置全选\" class=\"headerlink\" title=\"5.设置全选\"></a>5.设置全选</h1><pre><code>if(true)\n{\n    for (int j = 0; j &lt; checkedListBox1.Items.Count; j++)\n        checkedListBox1.SetItemChecked(j, true);\n}\nelse\n{\n    for (int j =0; j &lt; checkedListBox1.Items.Count; j++)\n        checkedListBox1.SetItemChecked(j, false);\n}\n</code></pre><h1 id=\"6-得到全部选中的值-，并将选中的项的文本组合成为一个字符串。\"><a href=\"#6-得到全部选中的值-，并将选中的项的文本组合成为一个字符串。\" class=\"headerlink\" title=\"6.得到全部选中的值 ，并将选中的项的文本组合成为一个字符串。\"></a>6.得到全部选中的值 ，并将选中的项的文本组合成为一个字符串。</h1><pre><code>string strCollected = string.Empty;\nfor (int i = 0; i &lt; checkedListBox1.Items.Count; i++)\n{\n    if (checkedListBox1.GetItemChecked(i))\n    {\n        if (strCollected == string.Empty)\n        {\n            strCollected = checkedListBox1.GetItemText(checkedListBox1.Items[i]);\n        }\n        else\n        {\n            strCollected = strCollected + &quot;/&quot; + checkedListBox1.GetItemText(checkedListBox1.Items[i]);\n         }\n     }\n}\n</code></pre><h1 id=\"7-清除checkedListBox中所有的选项\"><a href=\"#7-清除checkedListBox中所有的选项\" class=\"headerlink\" title=\"7.清除checkedListBox中所有的选项\"></a>7.清除checkedListBox中所有的选项</h1><pre><code>for (int i = 0; i &lt; checkedListBox1.Items.Count; i++)\n{\n    checkedListBox1.Items.Clear();\n}\n</code></pre><h1 id=\"8-设置索引为index的项为选中状态\"><a href=\"#8-设置索引为index的项为选中状态\" class=\"headerlink\" title=\"8.设置索引为index的项为选中状态\"></a>8.设置索引为index的项为选中状态</h1><pre><code>for (int i = 0; i &lt; checkedListBox1.Items.Count; i++)\n{\n    checkedListBox1.SetItemChecked(i, true);\n}\n</code></pre><h1 id=\"9-选中checkedListBox1所有的选项\"><a href=\"#9-选中checkedListBox1所有的选项\" class=\"headerlink\" title=\"9.选中checkedListBox1所有的选项\"></a>9.选中checkedListBox1所有的选项</h1><pre><code>for (int i = 0; i &lt; checkedListBox1.Items.Count; i++)\n{\n    checkedListBox1.SetItemCheckState(i, CheckState.Checked);\n}\n</code></pre><h1 id=\"10-checkedListBox1中选定的项-gt-checkedListBox2\"><a href=\"#10-checkedListBox1中选定的项-gt-checkedListBox2\" class=\"headerlink\" title=\"10.checkedListBox1中选定的项-&gt;checkedListBox2\"></a>10.checkedListBox1中选定的项-&gt;checkedListBox2</h1><pre><code>for (int i = 0; i &lt; checkedListBox1.CheckedItems.Count; i++)\n{\ncheckedListBox2.Items.Add(this.checkedListBox1.CheckedItems);\n\n//remove是除去一个具体的值，不是index，注意了\ncheckedListBox1.Items.Remove(this.checkedListBox1.CheckedItems);\n}\n</code></pre><p>PS: CheckBoxList控件中的每个CheckBox的排列方法都可以通过属性界面进行调整，请参考：<br><a href=\"http://msdn.microsoft.com/zh-tw/library/wffkd2c9.aspx\" target=\"_blank\" rel=\"external\">http://msdn.microsoft.com/zh-tw/library/wffkd2c9.aspx</a></p>\n","excerpt":"","more":"<p>单个的CheckBox控件对于一两个复选框的使用是比较方便的，然而，如果想要在一个页面中排放n个复选框，而且这些复选框的内容需要从数据库中动态获取时，CheckBoxList控件就非常有用。它能够通过控件数组的方法操作一系列的复选框。</p>\n<p>下面介绍CheckBoxList控件的一些简单用法。</p>\n<h1 id=\"1-与ObjectDataSource绑定\"><a href=\"#1-与ObjectDataSource绑定\" class=\"headerlink\" title=\"1.与ObjectDataSource绑定\"></a>1.与ObjectDataSource绑定</h1><h2 id=\"1）创建一个与数据库关联好的ObjectDataSource控件。如有问题请参考：\"><a href=\"#1）创建一个与数据库关联好的ObjectDataSource控件。如有问题请参考：\" class=\"headerlink\" title=\"1）创建一个与数据库关联好的ObjectDataSource控件。如有问题请参考：\"></a>1）创建一个与数据库关联好的ObjectDataSource控件。如有问题请参考：</h2><p> <a href=\"http://blog.sina.com.cn/s/blog_6849d1c201017ryg.html\">http://blog.sina.com.cn/s/blog_6849d1c201017ryg.html</a></p>\n<h2 id=\"2）为CheckListBox选择新数据源\"><a href=\"#2）为CheckListBox选择新数据源\" class=\"headerlink\" title=\"2）为CheckListBox选择新数据源\"></a>2）为CheckListBox选择新数据源</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/145902-e143c24a765906d6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"CheckBoxList控件\"></p>\n<h2 id=\"3）选择\"><a href=\"#3）选择\" class=\"headerlink\" title=\"3）选择\"></a>3）选择</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/145902-0582b394e8ad890c?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"CheckBoxList控件\"></p>\n<p>数据源选择ObjectDataSource即可。后面两项一个是显示内容，一个是值内容（Value属性的值）。这两项都要填数据表中的字段。<br>这样就绑定成功了。</p>\n<h1 id=\"2-添加项\"><a href=\"#2-添加项\" class=\"headerlink\" title=\"2.添加项\"></a>2.添加项</h1><pre><code>checkedListBox1.Items.Add(&quot;蓝色&quot;);\ncheckedListBox1.Items.Add(&quot;红色&quot;);\ncheckedListBox1.Items.Add(&quot;黄色&quot;);\n</code></pre><h1 id=\"3-判断第i项是否选中-选中为true-否则为false\"><a href=\"#3-判断第i项是否选中-选中为true-否则为false\" class=\"headerlink\" title=\"3.判断第i项是否选中,选中为true,否则为false\"></a>3.判断第i项是否选中,选中为true,否则为false</h1><pre><code>if（checkedListBox1.GetItemChecked(i)）\n{\n    return true;\n}\nelse\n{\n    return false;\n}\n</code></pre><h1 id=\"4-设置第i项是否选中\"><a href=\"#4-设置第i项是否选中\" class=\"headerlink\" title=\"4.设置第i项是否选中\"></a>4.设置第i项是否选中</h1><pre><code>checkedListBox1.SetItemChecked(i, true); //true改为false为没有选中。\ncheckedListBox1.SetItemCheckState(i, CheckState.Checked);\n</code></pre><h1 id=\"5-设置全选\"><a href=\"#5-设置全选\" class=\"headerlink\" title=\"5.设置全选\"></a>5.设置全选</h1><pre><code>if(true)\n{\n    for (int j = 0; j &lt; checkedListBox1.Items.Count; j++)\n        checkedListBox1.SetItemChecked(j, true);\n}\nelse\n{\n    for (int j =0; j &lt; checkedListBox1.Items.Count; j++)\n        checkedListBox1.SetItemChecked(j, false);\n}\n</code></pre><h1 id=\"6-得到全部选中的值-，并将选中的项的文本组合成为一个字符串。\"><a href=\"#6-得到全部选中的值-，并将选中的项的文本组合成为一个字符串。\" class=\"headerlink\" title=\"6.得到全部选中的值 ，并将选中的项的文本组合成为一个字符串。\"></a>6.得到全部选中的值 ，并将选中的项的文本组合成为一个字符串。</h1><pre><code>string strCollected = string.Empty;\nfor (int i = 0; i &lt; checkedListBox1.Items.Count; i++)\n{\n    if (checkedListBox1.GetItemChecked(i))\n    {\n        if (strCollected == string.Empty)\n        {\n            strCollected = checkedListBox1.GetItemText(checkedListBox1.Items[i]);\n        }\n        else\n        {\n            strCollected = strCollected + &quot;/&quot; + checkedListBox1.GetItemText(checkedListBox1.Items[i]);\n         }\n     }\n}\n</code></pre><h1 id=\"7-清除checkedListBox中所有的选项\"><a href=\"#7-清除checkedListBox中所有的选项\" class=\"headerlink\" title=\"7.清除checkedListBox中所有的选项\"></a>7.清除checkedListBox中所有的选项</h1><pre><code>for (int i = 0; i &lt; checkedListBox1.Items.Count; i++)\n{\n    checkedListBox1.Items.Clear();\n}\n</code></pre><h1 id=\"8-设置索引为index的项为选中状态\"><a href=\"#8-设置索引为index的项为选中状态\" class=\"headerlink\" title=\"8.设置索引为index的项为选中状态\"></a>8.设置索引为index的项为选中状态</h1><pre><code>for (int i = 0; i &lt; checkedListBox1.Items.Count; i++)\n{\n    checkedListBox1.SetItemChecked(i, true);\n}\n</code></pre><h1 id=\"9-选中checkedListBox1所有的选项\"><a href=\"#9-选中checkedListBox1所有的选项\" class=\"headerlink\" title=\"9.选中checkedListBox1所有的选项\"></a>9.选中checkedListBox1所有的选项</h1><pre><code>for (int i = 0; i &lt; checkedListBox1.Items.Count; i++)\n{\n    checkedListBox1.SetItemCheckState(i, CheckState.Checked);\n}\n</code></pre><h1 id=\"10-checkedListBox1中选定的项-gt-checkedListBox2\"><a href=\"#10-checkedListBox1中选定的项-gt-checkedListBox2\" class=\"headerlink\" title=\"10.checkedListBox1中选定的项-&gt;checkedListBox2\"></a>10.checkedListBox1中选定的项-&gt;checkedListBox2</h1><pre><code>for (int i = 0; i &lt; checkedListBox1.CheckedItems.Count; i++)\n{\ncheckedListBox2.Items.Add(this.checkedListBox1.CheckedItems);\n\n//remove是除去一个具体的值，不是index，注意了\ncheckedListBox1.Items.Remove(this.checkedListBox1.CheckedItems);\n}\n</code></pre><p>PS: CheckBoxList控件中的每个CheckBox的排列方法都可以通过属性界面进行调整，请参考：<br><a href=\"http://msdn.microsoft.com/zh-tw/library/wffkd2c9.aspx\">http://msdn.microsoft.com/zh-tw/library/wffkd2c9.aspx</a></p>\n"},{"title":"ListBox&DropDownList控件（省、市选择）","date":"2017-03-18T06:15:31.000Z","_content":"\n# 涉及技术点：\n\n- 1. ListBox控件的用法\n- 2. DropDownList控件的用法\n- 3. 控件联动\n- 4. ObjectDataSource绑定控件后的数据刷新\n- 5. 给Select方法带参数的ObjectDataSource控件传参\n\n\n在信息填写的表单中，常会需要填写省市之类的信息，如果能够选取会比较方便。这里就涉及一个控件联动的问题。下面我们就具体了解一下如何利用前面提到的技术设计这么一个从后台管理到前台应用的程序。\n\n# 一，数据库设计\n\n需要两张表，一张保存省的名称，另一张保存市的名称。两张表是1：n的级联关系。下面是创建数据库脚本：\n\n      create table TProvince\n      (\n        Id int primary key identity,\n        Name varchar(50) not null\n      )\n\t\n      create table TCity\n      (\n        Id int primary key identity,\n        Name varchar(50) not null,\n        ProvinceId int references TProvince(Id)\n      )\n\n在表中添加一条基本信息，用来初始显示。\n\n\tinsert into TProvince values('北京')\n\tinsert into TCity values('北京', 1)\n\n这样，数据库就建立好了。\n\n# 二，新建数据集\n\n我们这次完全使用控件绑定来完成数据库的访问，以数据集为基础。\n1.新建一个数据集（DataSet）,命名为DSProvinceCity.xsd\n2.从工具箱中添加两个TableAdapter，分别与 TProvince 和 TCity 表关联。具体方法之前的日志已经讲过。添加后，会生成两个DataTable对象（TProvice和TCity）还有两个TableAdapter对象(TProvinceTableAdapter和TCityAdaper)。如图所示。\n\n![ListBox&DropDownList控件（省、市选择）](http://upload-images.jianshu.io/upload_images/145902-195631dbbbafbbe3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 三，UI设计\n\n页面分为两部分，后台管理部分和前台应用部分。\n后台管理部分：用于帮助管理员上传各个省、市名称和对应关系的数据\n前台应用部分：用户上传数据时使用\n\n# 四，后台管理部分（ListBox联动）\n\n1.在页面中添加两个ListBox控件，分别命名为lbProvince和lbCity\n2.添加一个ObjectDataSource控件，命名为ODSProvince，配置数据源\n3.选择业务对象\n\n![ListBox&DropDownList控件（省、市选择）](http://upload-images.jianshu.io/upload_images/145902-699fad3cf510beb0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n4.重复2、3添加另一个ObjectDataSource控件（ODSCity）。并配置数据源\n5.为lbProvince选择数据源\n\n![ListBox&DropDownList控件（省、市选择）](http://upload-images.jianshu.io/upload_images/145902-d44522b13fcded85?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n6.为lbCity选择数据源\n\n![http://s9.sinaimg.cn/large/6849d1c2g0a4382bbc698&690](http://upload-images.jianshu.io/upload_images/145902-4efed013f80c2c11?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n运行一下看看是否能够正常显示数据。下面我们看看如何设计一个添加“省”的功能。\n7.在页面上添加一个TextBox控件，命名为txtProvinceAdd。再添加一个Button，命名为btnProvinceAdd。并添加如下代码：\n\n\t    protected void btnProvinceAdd_Click(object sender, EventArgs e)\n\t    {\n\t        TProvinceTableAdapter province = new TProvinceTableAdapter();\n\t        province.Insert(txtProvinceAdd.Text.ToString().Trim());\n\t        txtProvinceAdd.Text = \"\";\n\t        lbProvince.DataBind(); // 重新绑定数据源\n\t    }\n\n给没有引用的命名空间加入using语句，这里可以用VS中的自动添加功能。这样我们就能通过TProvinceTableAdapter 提供的方法将新的省名写进数据库了。\nlbProvince.DataBind();\n这句话很重要，如果没有它，添加了省名的lbProvince控件不会有任何变化。重新绑定后能实现数据的刷新。\n运行一下程序，添加几个省。\n\n8.重复7的动作，添加txtCityAdd和btnCityAdd。并添加如下代码：\n\n    protected void btnCityAdd_Click(object sender, EventArgs e)\n    {\n        TCityTableAdapter city = new TCityTableAdapter();\n        city.Insert(txtCityAdd.Text.ToString().Trim(), Convert.ToInt16(lbProvince.SelectedValue));\n        txtCityAdd.Text = \"\";\n        lbCity.DataBind();\n    }\n\n由于市名需要和省名进行关联，因此我们在添加市之前要先选择一个省名，lbProvince控件获得焦点后，lbProvince.SelectedValue语句能够得到选中省名的ID号。\n为两个ListBox添加初始焦点位置，代码如下：\n\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        if (!IsPostBack) // 只有第一次加载时付初值\n        {\n            lbProvince.SelectedIndex = 0;\n            lbCity.SelectedIndex = 0;\n        }\n    }\n\n运行一下程序，给某个省添加几个市吧。\n貌似有点问题，好像添加之后省和市并不对应。那是因为两个控件的联动没有做好。\n\n9.将lbProvince控件的AutoPostBack属性设为True,并添加点击事件。代码如下：\n  \n    protected void lbProvince_SelectedIndexChanged(object sender, EventArgs e)\n    {\n        lbCity.DataBind();\n    }\n\n10.修改TCityTableAdapter的Select方法\n\n![ListBox&DropDownList控件（省、市选择）](http://upload-images.jianshu.io/upload_images/145902-2e150dd4f5687713?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在DataSet数据集界面中，选择TCityTableAdapter,在它的SelectCommand子属性中，选择CommandText。弹出查询生成器。\n\n![ListBox&DropDownList控件（省、市选择）](http://upload-images.jianshu.io/upload_images/145902-9b4652f912fbefb6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在SQL语句中添加“where ProvinceId=@ProvinceId”语句。\n这是，运行程序会报错，因为ODSCity控件没有给TCityTableAdapter传参。\n\n11.修改ODSCity\n\n双击ODSCity控件，添加如下代码：\n\n    protected void ODSCity_Selecting(object sender, ObjectDataSourceSelectingEventArgs e)\n    {\n        e.InputParameters[\"ProvinceId\"] = lbProvince.SelectedValue; // 传参方法\n    }\n\n这下再运行试试。是不是一切都对了。\n如果需要添加删除方法，可以继续下面的步骤。\n\n12.添加两个Button，分别命名为btnProvinceDel和btnCityDel。实现代码如下：\n\n    protected void btnProvinceDel_Click(object sender, EventArgs e)\n    {\n        int nProvinceID = Convert.ToInt16(lbProvince.SelectedValue);\n\n        TCityTableAdapter city = new TCityTableAdapter();\n        DSProvinceCity.TCityDataTable cityTable = city.GetCityData(nProvinceID);\n\n        if (cityTable.Rows.Count > 0)\n        {\n            Response.Write(\"<script type=\"text/javascript\">alert('这个省不能删除!');</script>\");\n        }\n        else\n        {\n            TProvinceTableAdapter province = new TProvinceTableAdapter();\n            province.Delete(nProvinceID);\n        }\n    }\n    protected void btnCityDel_Click(object sender, EventArgs e)\n    {\n        TCityTableAdapter city = new TCityTableAdapter();\n        city.Delete(Convert.ToInt16(lbCity.SelectedValue));\n\n        lbCity.DataBind();\n    }\n由于省表的ID是市表的外键，因此在删除省中的记录时要先判断是否已经将级联关系删除完全。\n\n这样，后台管理程序就OK了。\n\n# 五，前台管理程序\n\n1.在页面中添加两个DropDownList控件，分别命名为ddlProvince和ddlCity\n2.创建一个新ObjectDataSource控件，命名为ODSCityAnother与TCityTableAdaper关联\n3.与ListBox控件类似，让ddlProvince控件与ODSProvince控件绑定，让ddlCity控件与ODSCityAnother控件绑定\n4.双击ODSCityAnother控件，添加代码如下：\n\n    protected void ODSCityAnother_Selecting(object sender, ObjectDataSourceSelectingEventArgs e)\n    {\n        e.InputParameters[\"ProvinceId\"] = ddlProvince.SelectedValue; \n    }\n\n5.双击ddlProvince控件，添加代码如下：\n\n    protected void ddlProvince_SelectedIndexChanged(object sender, EventArgs e)\n    {\n        ddlCity.DataBind();\n    }\n\n6.ddlProvince控件AutoPostBack属性设为True\n\n运行一下，感受前台程序的体验吧。是不是很爽啊，哈哈~\n\n# 附录：\nASPX页面代码：\n\n\t<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\t<head id=\"Head1\" runat=\"server\">\n\t    <title>ProvinceCity</title>\n\t    <style type=\"text/css\">\n\t        .style1\n\t        {\n\t            width: 500;\n\t            border-width:1px;\n\t            border-style:solid;\n\t            border-color:Black;\n\t            margin:auto;\n\t        }\n\t        .Title\n\t        {\n\t            width:204px;\n\t            background-color:Blue;\n\t            color:White;\n\t        }\n\t        .style2\n\t        {\n\t            width: 204px;\n\t            border-width:1px;\n\t            border-style:solid;\n\t            border-color:Black;\n\t        }\n\t    </style>\n\t</head>\n\t<body>\n\t    <form id=\"form1\" runat=\"server\">\n\t\n\t    <div style=\" width:100%; text-align:center;\">\n\t        <div style=\"height:30px;\">后台管理程序</div>\n\t        <table class=\"style1\">\n\t            <tr>\n\t                <td class=\"Title\">\n\t                    省</td>\n\t                <td class=\"Title\">\n\t                    市</td>\n\t            </tr>\n\t            <tr>\n\t                <td class=\"style2\">\n\t                    <asp:ListBox ID=\"lbProvince\" runat=\"server\"  \n\t                        DataSourceID=\"ODSProvince\" DataTextField=\"Name\" DataValueField=\"Id\" \n\t                        Height=\"220px\" \n\t                        Width=\"200px\" onselectedindexchanged=\"lbProvince_SelectedIndexChanged\"></asp:ListBox>\n\t                </td>\n\t                <td class=\"style2\">\n\t                    <asp:ListBox ID=\"lbCity\" runat=\"server\" DataSourceID=\"ODSCity\" \n\t                        DataTextField=\"Name\" DataValueField=\"Id\" Height=\"220px\" Width=\"200px\">\n\t                    </asp:ListBox>\n\t                </td>\n\t            </tr>\n\t            <tr>\n\t                <td class=\"style2\">\n\t                    <asp:Button ID=\"btnProvinceDel\" runat=\"server\"  \n\t                        Text=\"删除\" onclick=\"btnProvinceDel_Click\" />\n\t                </td>\n\t                <td class=\"style2\">\n\t                    <asp:Button ID=\"btnCityDel\" runat=\"server\" Text=\"删除\" onclick=\"btnCityDel_Click\" \n\t                         />\n\t                </td>\n\t            </tr>\n\t            <tr>\n\t                <td class=\"style2\">\n\t                    <asp:TextBox ID=\"txtProvinceAdd\" runat=\"server\"></asp:TextBox>\n\t                    <asp:Button ID=\"btnProvinceAdd\" runat=\"server\" Text=\"添加\" \n\t                        onclick=\"btnProvinceAdd_Click\" />\n\t                </td>\n\t                <td class=\"style2\">\n\t                    <asp:TextBox ID=\"txtCityAdd\" runat=\"server\"></asp:TextBox>\n\t                    <asp:Button ID=\"btnCityAdd\" runat=\"server\" Text=\"添加\" \n\t                        onclick=\"btnCityAdd_Click\" />\n\t                </td>\n\t            </tr>\n\t            <tr>\n\t                <td class=\"style2\">\n\t                    &nbsp;</td>\n\t                <td class=\"style2\">\n\t                    &nbsp;</td>\n\t            </tr>\n\t        </table>\n\t    </div>\n\t\n\t    <asp:ObjectDataSource ID=\"ODSProvince\" runat=\"server\" DeleteMethod=\"Delete\" \n\t        InsertMethod=\"Insert\" OldValuesParameterFormatString=\"original_{0}\" \n\t        SelectMethod=\"GetProvinceData\" \n\t        TypeName=\"DSProvinceCityTableAdapters.TProvinceTableAdapter\" \n\t        UpdateMethod=\"Update\">\n\t        <DeleteParameters>\n\t            <asp:Parameter Name=\"Original_Id\" Type=\"Int32\" />\n\t        </DeleteParameters>\n\t        <InsertParameters>\n\t            <asp:Parameter Name=\"Name\" Type=\"String\" />\n\t        </InsertParameters>\n\t        <UpdateParameters>\n\t            <asp:Parameter Name=\"Name\" Type=\"String\" />\n\t            <asp:Parameter Name=\"Original_Id\" Type=\"Int32\" />\n\t        </UpdateParameters>\n\t    </asp:ObjectDataSource>\n\t    <asp:ObjectDataSource ID=\"ODSCity\" runat=\"server\" DeleteMethod=\"Delete\" \n\t        InsertMethod=\"Insert\" OldValuesParameterFormatString=\"original_{0}\" \n\t        SelectMethod=\"GetCityData\" \n\t        TypeName=\"DSProvinceCityTableAdapters.TCityTableAdapter\" \n\t        UpdateMethod=\"Update\" onselecting=\"ODSCity_Selecting\">\n\t        <DeleteParameters>\n\t            <asp:Parameter Name=\"Original_Id\" Type=\"Int32\" />\n\t        </DeleteParameters>\n\t        <InsertParameters>\n\t            <asp:Parameter Name=\"Name\" Type=\"String\" />\n\t            <asp:Parameter Name=\"ProvinceId\" Type=\"Int32\" />\n\t        </InsertParameters>\n\t        <UpdateParameters>\n\t            <asp:Parameter Name=\"Name\" Type=\"String\" />\n\t            <asp:Parameter Name=\"ProvinceId\" Type=\"Int32\" />\n\t            <asp:Parameter Name=\"Original_Id\" Type=\"Int32\" />\n\t        </UpdateParameters>\n\t    </asp:ObjectDataSource>\n\t    <hr/>\n\t\n\t    <div style=\" width:100%; text-align:center;\">\n\t        <div style=\"height:30px;\">前台应用程序</div>\n\t         <table class=\"style1\">\n\t            <tr>\n\t                <td class=\"Title\">\n\t                    省</td>\n\t                <td class=\"Title\">\n\t                    市</td>\n\t            </tr>\n\t            <tr>\n\t                <td class=\"style2\">\n\t                    <asp:DropDownList ID=\"ddlProvince\" runat=\"server\"  \n\t                        DataSourceID=\"ODSProvince\" DataTextField=\"Name\" DataValueField=\"Id\" onselectedindexchanged=\"ddlProvince_SelectedIndexChanged\" \n\t                        >\n\t                    </asp:DropDownList>\n\t                </td>\n\t                <td class=\"style2\">\n\t                    <asp:DropDownList ID=\"ddlCity\" runat=\"server\" DataSourceID=\"ODSCityAnother\" \n\t                        DataTextField=\"Name\" DataValueField=\"Id\">\n\t                    </asp:DropDownList>\n\t                </td>\n\t            </tr>\n\t          </table>\n\t    </div>\n\t \n\t    <asp:ObjectDataSource ID=\"ODSCityAnother\" runat=\"server\" DeleteMethod=\"Delete\" \n\t        InsertMethod=\"Insert\" OldValuesParameterFormatString=\"original_{0}\" \n\t        onselecting=\"ODSCityAnother_Selecting\" SelectMethod=\"GetCityData\" \n\t        TypeName=\"DSProvinceCityTableAdapters.TCityTableAdapter\" UpdateMethod=\"Update\">\n\t        <DeleteParameters>\n\t            <asp:Parameter Name=\"Original_Id\" Type=\"Int32\" />\n\t        </DeleteParameters>\n\t        <InsertParameters>\n\t            <asp:Parameter Name=\"Name\" Type=\"String\" />\n\t            <asp:Parameter Name=\"ProvinceId\" Type=\"Int32\" />\n\t        </InsertParameters>\n\t        <SelectParameters>\n\t            <asp:Parameter Name=\"ProvinceId\" Type=\"Int32\" />\n\t        </SelectParameters>\n\t        <UpdateParameters>\n\t            <asp:Parameter Name=\"Name\" Type=\"String\" />\n\t            <asp:Parameter Name=\"ProvinceId\" Type=\"Int32\" />\n\t            <asp:Parameter Name=\"Original_Id\" Type=\"Int32\" />\n\t        </UpdateParameters>\n\t    </asp:ObjectDataSource>\n\t    <hr/>\n\t    </form>\n\t</body>\n\t</html>","source":"_posts/CSharpListBox-DropDownList.md","raw":"---\ntitle: ListBox&DropDownList控件（省、市选择）\ntags:\n  - CSharp\ncategories: CSharp\ndate: 2017-03-18 06:15:31\n---\n\n# 涉及技术点：\n\n- 1. ListBox控件的用法\n- 2. DropDownList控件的用法\n- 3. 控件联动\n- 4. ObjectDataSource绑定控件后的数据刷新\n- 5. 给Select方法带参数的ObjectDataSource控件传参\n\n\n在信息填写的表单中，常会需要填写省市之类的信息，如果能够选取会比较方便。这里就涉及一个控件联动的问题。下面我们就具体了解一下如何利用前面提到的技术设计这么一个从后台管理到前台应用的程序。\n\n# 一，数据库设计\n\n需要两张表，一张保存省的名称，另一张保存市的名称。两张表是1：n的级联关系。下面是创建数据库脚本：\n\n      create table TProvince\n      (\n        Id int primary key identity,\n        Name varchar(50) not null\n      )\n\t\n      create table TCity\n      (\n        Id int primary key identity,\n        Name varchar(50) not null,\n        ProvinceId int references TProvince(Id)\n      )\n\n在表中添加一条基本信息，用来初始显示。\n\n\tinsert into TProvince values('北京')\n\tinsert into TCity values('北京', 1)\n\n这样，数据库就建立好了。\n\n# 二，新建数据集\n\n我们这次完全使用控件绑定来完成数据库的访问，以数据集为基础。\n1.新建一个数据集（DataSet）,命名为DSProvinceCity.xsd\n2.从工具箱中添加两个TableAdapter，分别与 TProvince 和 TCity 表关联。具体方法之前的日志已经讲过。添加后，会生成两个DataTable对象（TProvice和TCity）还有两个TableAdapter对象(TProvinceTableAdapter和TCityAdaper)。如图所示。\n\n![ListBox&DropDownList控件（省、市选择）](http://upload-images.jianshu.io/upload_images/145902-195631dbbbafbbe3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n# 三，UI设计\n\n页面分为两部分，后台管理部分和前台应用部分。\n后台管理部分：用于帮助管理员上传各个省、市名称和对应关系的数据\n前台应用部分：用户上传数据时使用\n\n# 四，后台管理部分（ListBox联动）\n\n1.在页面中添加两个ListBox控件，分别命名为lbProvince和lbCity\n2.添加一个ObjectDataSource控件，命名为ODSProvince，配置数据源\n3.选择业务对象\n\n![ListBox&DropDownList控件（省、市选择）](http://upload-images.jianshu.io/upload_images/145902-699fad3cf510beb0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n4.重复2、3添加另一个ObjectDataSource控件（ODSCity）。并配置数据源\n5.为lbProvince选择数据源\n\n![ListBox&DropDownList控件（省、市选择）](http://upload-images.jianshu.io/upload_images/145902-d44522b13fcded85?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n6.为lbCity选择数据源\n\n![http://s9.sinaimg.cn/large/6849d1c2g0a4382bbc698&690](http://upload-images.jianshu.io/upload_images/145902-4efed013f80c2c11?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n运行一下看看是否能够正常显示数据。下面我们看看如何设计一个添加“省”的功能。\n7.在页面上添加一个TextBox控件，命名为txtProvinceAdd。再添加一个Button，命名为btnProvinceAdd。并添加如下代码：\n\n\t    protected void btnProvinceAdd_Click(object sender, EventArgs e)\n\t    {\n\t        TProvinceTableAdapter province = new TProvinceTableAdapter();\n\t        province.Insert(txtProvinceAdd.Text.ToString().Trim());\n\t        txtProvinceAdd.Text = \"\";\n\t        lbProvince.DataBind(); // 重新绑定数据源\n\t    }\n\n给没有引用的命名空间加入using语句，这里可以用VS中的自动添加功能。这样我们就能通过TProvinceTableAdapter 提供的方法将新的省名写进数据库了。\nlbProvince.DataBind();\n这句话很重要，如果没有它，添加了省名的lbProvince控件不会有任何变化。重新绑定后能实现数据的刷新。\n运行一下程序，添加几个省。\n\n8.重复7的动作，添加txtCityAdd和btnCityAdd。并添加如下代码：\n\n    protected void btnCityAdd_Click(object sender, EventArgs e)\n    {\n        TCityTableAdapter city = new TCityTableAdapter();\n        city.Insert(txtCityAdd.Text.ToString().Trim(), Convert.ToInt16(lbProvince.SelectedValue));\n        txtCityAdd.Text = \"\";\n        lbCity.DataBind();\n    }\n\n由于市名需要和省名进行关联，因此我们在添加市之前要先选择一个省名，lbProvince控件获得焦点后，lbProvince.SelectedValue语句能够得到选中省名的ID号。\n为两个ListBox添加初始焦点位置，代码如下：\n\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        if (!IsPostBack) // 只有第一次加载时付初值\n        {\n            lbProvince.SelectedIndex = 0;\n            lbCity.SelectedIndex = 0;\n        }\n    }\n\n运行一下程序，给某个省添加几个市吧。\n貌似有点问题，好像添加之后省和市并不对应。那是因为两个控件的联动没有做好。\n\n9.将lbProvince控件的AutoPostBack属性设为True,并添加点击事件。代码如下：\n  \n    protected void lbProvince_SelectedIndexChanged(object sender, EventArgs e)\n    {\n        lbCity.DataBind();\n    }\n\n10.修改TCityTableAdapter的Select方法\n\n![ListBox&DropDownList控件（省、市选择）](http://upload-images.jianshu.io/upload_images/145902-2e150dd4f5687713?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在DataSet数据集界面中，选择TCityTableAdapter,在它的SelectCommand子属性中，选择CommandText。弹出查询生成器。\n\n![ListBox&DropDownList控件（省、市选择）](http://upload-images.jianshu.io/upload_images/145902-9b4652f912fbefb6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n在SQL语句中添加“where ProvinceId=@ProvinceId”语句。\n这是，运行程序会报错，因为ODSCity控件没有给TCityTableAdapter传参。\n\n11.修改ODSCity\n\n双击ODSCity控件，添加如下代码：\n\n    protected void ODSCity_Selecting(object sender, ObjectDataSourceSelectingEventArgs e)\n    {\n        e.InputParameters[\"ProvinceId\"] = lbProvince.SelectedValue; // 传参方法\n    }\n\n这下再运行试试。是不是一切都对了。\n如果需要添加删除方法，可以继续下面的步骤。\n\n12.添加两个Button，分别命名为btnProvinceDel和btnCityDel。实现代码如下：\n\n    protected void btnProvinceDel_Click(object sender, EventArgs e)\n    {\n        int nProvinceID = Convert.ToInt16(lbProvince.SelectedValue);\n\n        TCityTableAdapter city = new TCityTableAdapter();\n        DSProvinceCity.TCityDataTable cityTable = city.GetCityData(nProvinceID);\n\n        if (cityTable.Rows.Count > 0)\n        {\n            Response.Write(\"<script type=\"text/javascript\">alert('这个省不能删除!');</script>\");\n        }\n        else\n        {\n            TProvinceTableAdapter province = new TProvinceTableAdapter();\n            province.Delete(nProvinceID);\n        }\n    }\n    protected void btnCityDel_Click(object sender, EventArgs e)\n    {\n        TCityTableAdapter city = new TCityTableAdapter();\n        city.Delete(Convert.ToInt16(lbCity.SelectedValue));\n\n        lbCity.DataBind();\n    }\n由于省表的ID是市表的外键，因此在删除省中的记录时要先判断是否已经将级联关系删除完全。\n\n这样，后台管理程序就OK了。\n\n# 五，前台管理程序\n\n1.在页面中添加两个DropDownList控件，分别命名为ddlProvince和ddlCity\n2.创建一个新ObjectDataSource控件，命名为ODSCityAnother与TCityTableAdaper关联\n3.与ListBox控件类似，让ddlProvince控件与ODSProvince控件绑定，让ddlCity控件与ODSCityAnother控件绑定\n4.双击ODSCityAnother控件，添加代码如下：\n\n    protected void ODSCityAnother_Selecting(object sender, ObjectDataSourceSelectingEventArgs e)\n    {\n        e.InputParameters[\"ProvinceId\"] = ddlProvince.SelectedValue; \n    }\n\n5.双击ddlProvince控件，添加代码如下：\n\n    protected void ddlProvince_SelectedIndexChanged(object sender, EventArgs e)\n    {\n        ddlCity.DataBind();\n    }\n\n6.ddlProvince控件AutoPostBack属性设为True\n\n运行一下，感受前台程序的体验吧。是不是很爽啊，哈哈~\n\n# 附录：\nASPX页面代码：\n\n\t<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\t<head id=\"Head1\" runat=\"server\">\n\t    <title>ProvinceCity</title>\n\t    <style type=\"text/css\">\n\t        .style1\n\t        {\n\t            width: 500;\n\t            border-width:1px;\n\t            border-style:solid;\n\t            border-color:Black;\n\t            margin:auto;\n\t        }\n\t        .Title\n\t        {\n\t            width:204px;\n\t            background-color:Blue;\n\t            color:White;\n\t        }\n\t        .style2\n\t        {\n\t            width: 204px;\n\t            border-width:1px;\n\t            border-style:solid;\n\t            border-color:Black;\n\t        }\n\t    </style>\n\t</head>\n\t<body>\n\t    <form id=\"form1\" runat=\"server\">\n\t\n\t    <div style=\" width:100%; text-align:center;\">\n\t        <div style=\"height:30px;\">后台管理程序</div>\n\t        <table class=\"style1\">\n\t            <tr>\n\t                <td class=\"Title\">\n\t                    省</td>\n\t                <td class=\"Title\">\n\t                    市</td>\n\t            </tr>\n\t            <tr>\n\t                <td class=\"style2\">\n\t                    <asp:ListBox ID=\"lbProvince\" runat=\"server\"  \n\t                        DataSourceID=\"ODSProvince\" DataTextField=\"Name\" DataValueField=\"Id\" \n\t                        Height=\"220px\" \n\t                        Width=\"200px\" onselectedindexchanged=\"lbProvince_SelectedIndexChanged\"></asp:ListBox>\n\t                </td>\n\t                <td class=\"style2\">\n\t                    <asp:ListBox ID=\"lbCity\" runat=\"server\" DataSourceID=\"ODSCity\" \n\t                        DataTextField=\"Name\" DataValueField=\"Id\" Height=\"220px\" Width=\"200px\">\n\t                    </asp:ListBox>\n\t                </td>\n\t            </tr>\n\t            <tr>\n\t                <td class=\"style2\">\n\t                    <asp:Button ID=\"btnProvinceDel\" runat=\"server\"  \n\t                        Text=\"删除\" onclick=\"btnProvinceDel_Click\" />\n\t                </td>\n\t                <td class=\"style2\">\n\t                    <asp:Button ID=\"btnCityDel\" runat=\"server\" Text=\"删除\" onclick=\"btnCityDel_Click\" \n\t                         />\n\t                </td>\n\t            </tr>\n\t            <tr>\n\t                <td class=\"style2\">\n\t                    <asp:TextBox ID=\"txtProvinceAdd\" runat=\"server\"></asp:TextBox>\n\t                    <asp:Button ID=\"btnProvinceAdd\" runat=\"server\" Text=\"添加\" \n\t                        onclick=\"btnProvinceAdd_Click\" />\n\t                </td>\n\t                <td class=\"style2\">\n\t                    <asp:TextBox ID=\"txtCityAdd\" runat=\"server\"></asp:TextBox>\n\t                    <asp:Button ID=\"btnCityAdd\" runat=\"server\" Text=\"添加\" \n\t                        onclick=\"btnCityAdd_Click\" />\n\t                </td>\n\t            </tr>\n\t            <tr>\n\t                <td class=\"style2\">\n\t                    &nbsp;</td>\n\t                <td class=\"style2\">\n\t                    &nbsp;</td>\n\t            </tr>\n\t        </table>\n\t    </div>\n\t\n\t    <asp:ObjectDataSource ID=\"ODSProvince\" runat=\"server\" DeleteMethod=\"Delete\" \n\t        InsertMethod=\"Insert\" OldValuesParameterFormatString=\"original_{0}\" \n\t        SelectMethod=\"GetProvinceData\" \n\t        TypeName=\"DSProvinceCityTableAdapters.TProvinceTableAdapter\" \n\t        UpdateMethod=\"Update\">\n\t        <DeleteParameters>\n\t            <asp:Parameter Name=\"Original_Id\" Type=\"Int32\" />\n\t        </DeleteParameters>\n\t        <InsertParameters>\n\t            <asp:Parameter Name=\"Name\" Type=\"String\" />\n\t        </InsertParameters>\n\t        <UpdateParameters>\n\t            <asp:Parameter Name=\"Name\" Type=\"String\" />\n\t            <asp:Parameter Name=\"Original_Id\" Type=\"Int32\" />\n\t        </UpdateParameters>\n\t    </asp:ObjectDataSource>\n\t    <asp:ObjectDataSource ID=\"ODSCity\" runat=\"server\" DeleteMethod=\"Delete\" \n\t        InsertMethod=\"Insert\" OldValuesParameterFormatString=\"original_{0}\" \n\t        SelectMethod=\"GetCityData\" \n\t        TypeName=\"DSProvinceCityTableAdapters.TCityTableAdapter\" \n\t        UpdateMethod=\"Update\" onselecting=\"ODSCity_Selecting\">\n\t        <DeleteParameters>\n\t            <asp:Parameter Name=\"Original_Id\" Type=\"Int32\" />\n\t        </DeleteParameters>\n\t        <InsertParameters>\n\t            <asp:Parameter Name=\"Name\" Type=\"String\" />\n\t            <asp:Parameter Name=\"ProvinceId\" Type=\"Int32\" />\n\t        </InsertParameters>\n\t        <UpdateParameters>\n\t            <asp:Parameter Name=\"Name\" Type=\"String\" />\n\t            <asp:Parameter Name=\"ProvinceId\" Type=\"Int32\" />\n\t            <asp:Parameter Name=\"Original_Id\" Type=\"Int32\" />\n\t        </UpdateParameters>\n\t    </asp:ObjectDataSource>\n\t    <hr/>\n\t\n\t    <div style=\" width:100%; text-align:center;\">\n\t        <div style=\"height:30px;\">前台应用程序</div>\n\t         <table class=\"style1\">\n\t            <tr>\n\t                <td class=\"Title\">\n\t                    省</td>\n\t                <td class=\"Title\">\n\t                    市</td>\n\t            </tr>\n\t            <tr>\n\t                <td class=\"style2\">\n\t                    <asp:DropDownList ID=\"ddlProvince\" runat=\"server\"  \n\t                        DataSourceID=\"ODSProvince\" DataTextField=\"Name\" DataValueField=\"Id\" onselectedindexchanged=\"ddlProvince_SelectedIndexChanged\" \n\t                        >\n\t                    </asp:DropDownList>\n\t                </td>\n\t                <td class=\"style2\">\n\t                    <asp:DropDownList ID=\"ddlCity\" runat=\"server\" DataSourceID=\"ODSCityAnother\" \n\t                        DataTextField=\"Name\" DataValueField=\"Id\">\n\t                    </asp:DropDownList>\n\t                </td>\n\t            </tr>\n\t          </table>\n\t    </div>\n\t \n\t    <asp:ObjectDataSource ID=\"ODSCityAnother\" runat=\"server\" DeleteMethod=\"Delete\" \n\t        InsertMethod=\"Insert\" OldValuesParameterFormatString=\"original_{0}\" \n\t        onselecting=\"ODSCityAnother_Selecting\" SelectMethod=\"GetCityData\" \n\t        TypeName=\"DSProvinceCityTableAdapters.TCityTableAdapter\" UpdateMethod=\"Update\">\n\t        <DeleteParameters>\n\t            <asp:Parameter Name=\"Original_Id\" Type=\"Int32\" />\n\t        </DeleteParameters>\n\t        <InsertParameters>\n\t            <asp:Parameter Name=\"Name\" Type=\"String\" />\n\t            <asp:Parameter Name=\"ProvinceId\" Type=\"Int32\" />\n\t        </InsertParameters>\n\t        <SelectParameters>\n\t            <asp:Parameter Name=\"ProvinceId\" Type=\"Int32\" />\n\t        </SelectParameters>\n\t        <UpdateParameters>\n\t            <asp:Parameter Name=\"Name\" Type=\"String\" />\n\t            <asp:Parameter Name=\"ProvinceId\" Type=\"Int32\" />\n\t            <asp:Parameter Name=\"Original_Id\" Type=\"Int32\" />\n\t        </UpdateParameters>\n\t    </asp:ObjectDataSource>\n\t    <hr/>\n\t    </form>\n\t</body>\n\t</html>","slug":"CSharpListBox-DropDownList","published":1,"updated":"2017-03-18T06:16:17.739Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0evfi2a0009vcfurfvca38s","content":"<h1 id=\"涉及技术点：\"><a href=\"#涉及技术点：\" class=\"headerlink\" title=\"涉及技术点：\"></a>涉及技术点：</h1><ul>\n<li><ol>\n<li>ListBox控件的用法</li>\n</ol>\n</li>\n<li><ol>\n<li>DropDownList控件的用法</li>\n</ol>\n</li>\n<li><ol>\n<li>控件联动</li>\n</ol>\n</li>\n<li><ol>\n<li>ObjectDataSource绑定控件后的数据刷新</li>\n</ol>\n</li>\n<li><ol>\n<li>给Select方法带参数的ObjectDataSource控件传参</li>\n</ol>\n</li>\n</ul>\n<p>在信息填写的表单中，常会需要填写省市之类的信息，如果能够选取会比较方便。这里就涉及一个控件联动的问题。下面我们就具体了解一下如何利用前面提到的技术设计这么一个从后台管理到前台应用的程序。</p>\n<h1 id=\"一，数据库设计\"><a href=\"#一，数据库设计\" class=\"headerlink\" title=\"一，数据库设计\"></a>一，数据库设计</h1><p>需要两张表，一张保存省的名称，另一张保存市的名称。两张表是1：n的级联关系。下面是创建数据库脚本：</p>\n<pre><code>create table TProvince\n(\n  Id int primary key identity,\n  Name varchar(50) not null\n)\n\ncreate table TCity\n(\n  Id int primary key identity,\n  Name varchar(50) not null,\n  ProvinceId int references TProvince(Id)\n)\n</code></pre><p>在表中添加一条基本信息，用来初始显示。</p>\n<pre><code>insert into TProvince values(&apos;北京&apos;)\ninsert into TCity values(&apos;北京&apos;, 1)\n</code></pre><p>这样，数据库就建立好了。</p>\n<h1 id=\"二，新建数据集\"><a href=\"#二，新建数据集\" class=\"headerlink\" title=\"二，新建数据集\"></a>二，新建数据集</h1><p>我们这次完全使用控件绑定来完成数据库的访问，以数据集为基础。<br>1.新建一个数据集（DataSet）,命名为DSProvinceCity.xsd<br>2.从工具箱中添加两个TableAdapter，分别与 TProvince 和 TCity 表关联。具体方法之前的日志已经讲过。添加后，会生成两个DataTable对象（TProvice和TCity）还有两个TableAdapter对象(TProvinceTableAdapter和TCityAdaper)。如图所示。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-195631dbbbafbbe3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ListBox&amp;DropDownList控件（省、市选择）\"></p>\n<h1 id=\"三，UI设计\"><a href=\"#三，UI设计\" class=\"headerlink\" title=\"三，UI设计\"></a>三，UI设计</h1><p>页面分为两部分，后台管理部分和前台应用部分。<br>后台管理部分：用于帮助管理员上传各个省、市名称和对应关系的数据<br>前台应用部分：用户上传数据时使用</p>\n<h1 id=\"四，后台管理部分（ListBox联动）\"><a href=\"#四，后台管理部分（ListBox联动）\" class=\"headerlink\" title=\"四，后台管理部分（ListBox联动）\"></a>四，后台管理部分（ListBox联动）</h1><p>1.在页面中添加两个ListBox控件，分别命名为lbProvince和lbCity<br>2.添加一个ObjectDataSource控件，命名为ODSProvince，配置数据源<br>3.选择业务对象</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-699fad3cf510beb0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ListBox&amp;DropDownList控件（省、市选择）\"></p>\n<p>4.重复2、3添加另一个ObjectDataSource控件（ODSCity）。并配置数据源<br>5.为lbProvince选择数据源</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-d44522b13fcded85?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ListBox&amp;DropDownList控件（省、市选择）\"></p>\n<p>6.为lbCity选择数据源</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-4efed013f80c2c11?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"http://s9.sinaimg.cn/large/6849d1c2g0a4382bbc698&amp;690\"></p>\n<p>运行一下看看是否能够正常显示数据。下面我们看看如何设计一个添加“省”的功能。<br>7.在页面上添加一个TextBox控件，命名为txtProvinceAdd。再添加一个Button，命名为btnProvinceAdd。并添加如下代码：</p>\n<pre><code>protected void btnProvinceAdd_Click(object sender, EventArgs e)\n{\n    TProvinceTableAdapter province = new TProvinceTableAdapter();\n    province.Insert(txtProvinceAdd.Text.ToString().Trim());\n    txtProvinceAdd.Text = &quot;&quot;;\n    lbProvince.DataBind(); // 重新绑定数据源\n}\n</code></pre><p>给没有引用的命名空间加入using语句，这里可以用VS中的自动添加功能。这样我们就能通过TProvinceTableAdapter 提供的方法将新的省名写进数据库了。<br>lbProvince.DataBind();<br>这句话很重要，如果没有它，添加了省名的lbProvince控件不会有任何变化。重新绑定后能实现数据的刷新。<br>运行一下程序，添加几个省。</p>\n<p>8.重复7的动作，添加txtCityAdd和btnCityAdd。并添加如下代码：</p>\n<pre><code>protected void btnCityAdd_Click(object sender, EventArgs e)\n{\n    TCityTableAdapter city = new TCityTableAdapter();\n    city.Insert(txtCityAdd.Text.ToString().Trim(), Convert.ToInt16(lbProvince.SelectedValue));\n    txtCityAdd.Text = &quot;&quot;;\n    lbCity.DataBind();\n}\n</code></pre><p>由于市名需要和省名进行关联，因此我们在添加市之前要先选择一个省名，lbProvince控件获得焦点后，lbProvince.SelectedValue语句能够得到选中省名的ID号。<br>为两个ListBox添加初始焦点位置，代码如下：</p>\n<pre><code>protected void Page_Load(object sender, EventArgs e)\n{\n    if (!IsPostBack) // 只有第一次加载时付初值\n    {\n        lbProvince.SelectedIndex = 0;\n        lbCity.SelectedIndex = 0;\n    }\n}\n</code></pre><p>运行一下程序，给某个省添加几个市吧。<br>貌似有点问题，好像添加之后省和市并不对应。那是因为两个控件的联动没有做好。</p>\n<p>9.将lbProvince控件的AutoPostBack属性设为True,并添加点击事件。代码如下：</p>\n<pre><code>protected void lbProvince_SelectedIndexChanged(object sender, EventArgs e)\n{\n    lbCity.DataBind();\n}\n</code></pre><p>10.修改TCityTableAdapter的Select方法</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-2e150dd4f5687713?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ListBox&amp;DropDownList控件（省、市选择）\"></p>\n<p>在DataSet数据集界面中，选择TCityTableAdapter,在它的SelectCommand子属性中，选择CommandText。弹出查询生成器。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-9b4652f912fbefb6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ListBox&amp;DropDownList控件（省、市选择）\"></p>\n<p>在SQL语句中添加“where ProvinceId=@ProvinceId”语句。<br>这是，运行程序会报错，因为ODSCity控件没有给TCityTableAdapter传参。</p>\n<p>11.修改ODSCity</p>\n<p>双击ODSCity控件，添加如下代码：</p>\n<pre><code>protected void ODSCity_Selecting(object sender, ObjectDataSourceSelectingEventArgs e)\n{\n    e.InputParameters[&quot;ProvinceId&quot;] = lbProvince.SelectedValue; // 传参方法\n}\n</code></pre><p>这下再运行试试。是不是一切都对了。<br>如果需要添加删除方法，可以继续下面的步骤。</p>\n<p>12.添加两个Button，分别命名为btnProvinceDel和btnCityDel。实现代码如下：</p>\n<pre><code>protected void btnProvinceDel_Click(object sender, EventArgs e)\n{\n    int nProvinceID = Convert.ToInt16(lbProvince.SelectedValue);\n\n    TCityTableAdapter city = new TCityTableAdapter();\n    DSProvinceCity.TCityDataTable cityTable = city.GetCityData(nProvinceID);\n\n    if (cityTable.Rows.Count &gt; 0)\n    {\n        Response.Write(&quot;&lt;script type=&quot;text/javascript&quot;&gt;alert(&apos;这个省不能删除!&apos;);&lt;/script&gt;&quot;);\n    }\n    else\n    {\n        TProvinceTableAdapter province = new TProvinceTableAdapter();\n        province.Delete(nProvinceID);\n    }\n}\nprotected void btnCityDel_Click(object sender, EventArgs e)\n{\n    TCityTableAdapter city = new TCityTableAdapter();\n    city.Delete(Convert.ToInt16(lbCity.SelectedValue));\n\n    lbCity.DataBind();\n}\n</code></pre><p>由于省表的ID是市表的外键，因此在删除省中的记录时要先判断是否已经将级联关系删除完全。</p>\n<p>这样，后台管理程序就OK了。</p>\n<h1 id=\"五，前台管理程序\"><a href=\"#五，前台管理程序\" class=\"headerlink\" title=\"五，前台管理程序\"></a>五，前台管理程序</h1><p>1.在页面中添加两个DropDownList控件，分别命名为ddlProvince和ddlCity<br>2.创建一个新ObjectDataSource控件，命名为ODSCityAnother与TCityTableAdaper关联<br>3.与ListBox控件类似，让ddlProvince控件与ODSProvince控件绑定，让ddlCity控件与ODSCityAnother控件绑定<br>4.双击ODSCityAnother控件，添加代码如下：</p>\n<pre><code>protected void ODSCityAnother_Selecting(object sender, ObjectDataSourceSelectingEventArgs e)\n{\n    e.InputParameters[&quot;ProvinceId&quot;] = ddlProvince.SelectedValue; \n}\n</code></pre><p>5.双击ddlProvince控件，添加代码如下：</p>\n<pre><code>protected void ddlProvince_SelectedIndexChanged(object sender, EventArgs e)\n{\n    ddlCity.DataBind();\n}\n</code></pre><p>6.ddlProvince控件AutoPostBack属性设为True</p>\n<p>运行一下，感受前台程序的体验吧。是不是很爽啊，哈哈~</p>\n<h1 id=\"附录：\"><a href=\"#附录：\" class=\"headerlink\" title=\"附录：\"></a>附录：</h1><p>ASPX页面代码：</p>\n<pre><code>&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;ProvinceCity&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .style1\n        {\n            width: 500;\n            border-width:1px;\n            border-style:solid;\n            border-color:Black;\n            margin:auto;\n        }\n        .Title\n        {\n            width:204px;\n            background-color:Blue;\n            color:White;\n        }\n        .style2\n        {\n            width: 204px;\n            border-width:1px;\n            border-style:solid;\n            border-color:Black;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n    &lt;div style=&quot; width:100%; text-align:center;&quot;&gt;\n        &lt;div style=&quot;height:30px;&quot;&gt;后台管理程序&lt;/div&gt;\n        &lt;table class=&quot;style1&quot;&gt;\n            &lt;tr&gt;\n                &lt;td class=&quot;Title&quot;&gt;\n                    省&lt;/td&gt;\n                &lt;td class=&quot;Title&quot;&gt;\n                    市&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td class=&quot;style2&quot;&gt;\n                    &lt;asp:ListBox ID=&quot;lbProvince&quot; runat=&quot;server&quot;  \n                        DataSourceID=&quot;ODSProvince&quot; DataTextField=&quot;Name&quot; DataValueField=&quot;Id&quot; \n                        Height=&quot;220px&quot; \n                        Width=&quot;200px&quot; onselectedindexchanged=&quot;lbProvince_SelectedIndexChanged&quot;&gt;&lt;/asp:ListBox&gt;\n                &lt;/td&gt;\n                &lt;td class=&quot;style2&quot;&gt;\n                    &lt;asp:ListBox ID=&quot;lbCity&quot; runat=&quot;server&quot; DataSourceID=&quot;ODSCity&quot; \n                        DataTextField=&quot;Name&quot; DataValueField=&quot;Id&quot; Height=&quot;220px&quot; Width=&quot;200px&quot;&gt;\n                    &lt;/asp:ListBox&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td class=&quot;style2&quot;&gt;\n                    &lt;asp:Button ID=&quot;btnProvinceDel&quot; runat=&quot;server&quot;  \n                        Text=&quot;删除&quot; onclick=&quot;btnProvinceDel_Click&quot; /&gt;\n                &lt;/td&gt;\n                &lt;td class=&quot;style2&quot;&gt;\n                    &lt;asp:Button ID=&quot;btnCityDel&quot; runat=&quot;server&quot; Text=&quot;删除&quot; onclick=&quot;btnCityDel_Click&quot; \n                         /&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td class=&quot;style2&quot;&gt;\n                    &lt;asp:TextBox ID=&quot;txtProvinceAdd&quot; runat=&quot;server&quot;&gt;&lt;/asp:TextBox&gt;\n                    &lt;asp:Button ID=&quot;btnProvinceAdd&quot; runat=&quot;server&quot; Text=&quot;添加&quot; \n                        onclick=&quot;btnProvinceAdd_Click&quot; /&gt;\n                &lt;/td&gt;\n                &lt;td class=&quot;style2&quot;&gt;\n                    &lt;asp:TextBox ID=&quot;txtCityAdd&quot; runat=&quot;server&quot;&gt;&lt;/asp:TextBox&gt;\n                    &lt;asp:Button ID=&quot;btnCityAdd&quot; runat=&quot;server&quot; Text=&quot;添加&quot; \n                        onclick=&quot;btnCityAdd_Click&quot; /&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td class=&quot;style2&quot;&gt;\n                    &amp;nbsp;&lt;/td&gt;\n                &lt;td class=&quot;style2&quot;&gt;\n                    &amp;nbsp;&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/table&gt;\n    &lt;/div&gt;\n\n    &lt;asp:ObjectDataSource ID=&quot;ODSProvince&quot; runat=&quot;server&quot; DeleteMethod=&quot;Delete&quot; \n        InsertMethod=&quot;Insert&quot; OldValuesParameterFormatString=&quot;original_{0}&quot; \n        SelectMethod=&quot;GetProvinceData&quot; \n        TypeName=&quot;DSProvinceCityTableAdapters.TProvinceTableAdapter&quot; \n        UpdateMethod=&quot;Update&quot;&gt;\n        &lt;DeleteParameters&gt;\n            &lt;asp:Parameter Name=&quot;Original_Id&quot; Type=&quot;Int32&quot; /&gt;\n        &lt;/DeleteParameters&gt;\n        &lt;InsertParameters&gt;\n            &lt;asp:Parameter Name=&quot;Name&quot; Type=&quot;String&quot; /&gt;\n        &lt;/InsertParameters&gt;\n        &lt;UpdateParameters&gt;\n            &lt;asp:Parameter Name=&quot;Name&quot; Type=&quot;String&quot; /&gt;\n            &lt;asp:Parameter Name=&quot;Original_Id&quot; Type=&quot;Int32&quot; /&gt;\n        &lt;/UpdateParameters&gt;\n    &lt;/asp:ObjectDataSource&gt;\n    &lt;asp:ObjectDataSource ID=&quot;ODSCity&quot; runat=&quot;server&quot; DeleteMethod=&quot;Delete&quot; \n        InsertMethod=&quot;Insert&quot; OldValuesParameterFormatString=&quot;original_{0}&quot; \n        SelectMethod=&quot;GetCityData&quot; \n        TypeName=&quot;DSProvinceCityTableAdapters.TCityTableAdapter&quot; \n        UpdateMethod=&quot;Update&quot; onselecting=&quot;ODSCity_Selecting&quot;&gt;\n        &lt;DeleteParameters&gt;\n            &lt;asp:Parameter Name=&quot;Original_Id&quot; Type=&quot;Int32&quot; /&gt;\n        &lt;/DeleteParameters&gt;\n        &lt;InsertParameters&gt;\n            &lt;asp:Parameter Name=&quot;Name&quot; Type=&quot;String&quot; /&gt;\n            &lt;asp:Parameter Name=&quot;ProvinceId&quot; Type=&quot;Int32&quot; /&gt;\n        &lt;/InsertParameters&gt;\n        &lt;UpdateParameters&gt;\n            &lt;asp:Parameter Name=&quot;Name&quot; Type=&quot;String&quot; /&gt;\n            &lt;asp:Parameter Name=&quot;ProvinceId&quot; Type=&quot;Int32&quot; /&gt;\n            &lt;asp:Parameter Name=&quot;Original_Id&quot; Type=&quot;Int32&quot; /&gt;\n        &lt;/UpdateParameters&gt;\n    &lt;/asp:ObjectDataSource&gt;\n    &lt;hr/&gt;\n\n    &lt;div style=&quot; width:100%; text-align:center;&quot;&gt;\n        &lt;div style=&quot;height:30px;&quot;&gt;前台应用程序&lt;/div&gt;\n         &lt;table class=&quot;style1&quot;&gt;\n            &lt;tr&gt;\n                &lt;td class=&quot;Title&quot;&gt;\n                    省&lt;/td&gt;\n                &lt;td class=&quot;Title&quot;&gt;\n                    市&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td class=&quot;style2&quot;&gt;\n                    &lt;asp:DropDownList ID=&quot;ddlProvince&quot; runat=&quot;server&quot;  \n                        DataSourceID=&quot;ODSProvince&quot; DataTextField=&quot;Name&quot; DataValueField=&quot;Id&quot; onselectedindexchanged=&quot;ddlProvince_SelectedIndexChanged&quot; \n                        &gt;\n                    &lt;/asp:DropDownList&gt;\n                &lt;/td&gt;\n                &lt;td class=&quot;style2&quot;&gt;\n                    &lt;asp:DropDownList ID=&quot;ddlCity&quot; runat=&quot;server&quot; DataSourceID=&quot;ODSCityAnother&quot; \n                        DataTextField=&quot;Name&quot; DataValueField=&quot;Id&quot;&gt;\n                    &lt;/asp:DropDownList&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n          &lt;/table&gt;\n    &lt;/div&gt;\n\n    &lt;asp:ObjectDataSource ID=&quot;ODSCityAnother&quot; runat=&quot;server&quot; DeleteMethod=&quot;Delete&quot; \n        InsertMethod=&quot;Insert&quot; OldValuesParameterFormatString=&quot;original_{0}&quot; \n        onselecting=&quot;ODSCityAnother_Selecting&quot; SelectMethod=&quot;GetCityData&quot; \n        TypeName=&quot;DSProvinceCityTableAdapters.TCityTableAdapter&quot; UpdateMethod=&quot;Update&quot;&gt;\n        &lt;DeleteParameters&gt;\n            &lt;asp:Parameter Name=&quot;Original_Id&quot; Type=&quot;Int32&quot; /&gt;\n        &lt;/DeleteParameters&gt;\n        &lt;InsertParameters&gt;\n            &lt;asp:Parameter Name=&quot;Name&quot; Type=&quot;String&quot; /&gt;\n            &lt;asp:Parameter Name=&quot;ProvinceId&quot; Type=&quot;Int32&quot; /&gt;\n        &lt;/InsertParameters&gt;\n        &lt;SelectParameters&gt;\n            &lt;asp:Parameter Name=&quot;ProvinceId&quot; Type=&quot;Int32&quot; /&gt;\n        &lt;/SelectParameters&gt;\n        &lt;UpdateParameters&gt;\n            &lt;asp:Parameter Name=&quot;Name&quot; Type=&quot;String&quot; /&gt;\n            &lt;asp:Parameter Name=&quot;ProvinceId&quot; Type=&quot;Int32&quot; /&gt;\n            &lt;asp:Parameter Name=&quot;Original_Id&quot; Type=&quot;Int32&quot; /&gt;\n        &lt;/UpdateParameters&gt;\n    &lt;/asp:ObjectDataSource&gt;\n    &lt;hr/&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>","excerpt":"","more":"<h1 id=\"涉及技术点：\"><a href=\"#涉及技术点：\" class=\"headerlink\" title=\"涉及技术点：\"></a>涉及技术点：</h1><ul>\n<li><ol>\n<li>ListBox控件的用法</li>\n</ol>\n</li>\n<li><ol>\n<li>DropDownList控件的用法</li>\n</ol>\n</li>\n<li><ol>\n<li>控件联动</li>\n</ol>\n</li>\n<li><ol>\n<li>ObjectDataSource绑定控件后的数据刷新</li>\n</ol>\n</li>\n<li><ol>\n<li>给Select方法带参数的ObjectDataSource控件传参</li>\n</ol>\n</li>\n</ul>\n<p>在信息填写的表单中，常会需要填写省市之类的信息，如果能够选取会比较方便。这里就涉及一个控件联动的问题。下面我们就具体了解一下如何利用前面提到的技术设计这么一个从后台管理到前台应用的程序。</p>\n<h1 id=\"一，数据库设计\"><a href=\"#一，数据库设计\" class=\"headerlink\" title=\"一，数据库设计\"></a>一，数据库设计</h1><p>需要两张表，一张保存省的名称，另一张保存市的名称。两张表是1：n的级联关系。下面是创建数据库脚本：</p>\n<pre><code>create table TProvince\n(\n  Id int primary key identity,\n  Name varchar(50) not null\n)\n\ncreate table TCity\n(\n  Id int primary key identity,\n  Name varchar(50) not null,\n  ProvinceId int references TProvince(Id)\n)\n</code></pre><p>在表中添加一条基本信息，用来初始显示。</p>\n<pre><code>insert into TProvince values(&apos;北京&apos;)\ninsert into TCity values(&apos;北京&apos;, 1)\n</code></pre><p>这样，数据库就建立好了。</p>\n<h1 id=\"二，新建数据集\"><a href=\"#二，新建数据集\" class=\"headerlink\" title=\"二，新建数据集\"></a>二，新建数据集</h1><p>我们这次完全使用控件绑定来完成数据库的访问，以数据集为基础。<br>1.新建一个数据集（DataSet）,命名为DSProvinceCity.xsd<br>2.从工具箱中添加两个TableAdapter，分别与 TProvince 和 TCity 表关联。具体方法之前的日志已经讲过。添加后，会生成两个DataTable对象（TProvice和TCity）还有两个TableAdapter对象(TProvinceTableAdapter和TCityAdaper)。如图所示。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-195631dbbbafbbe3?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ListBox&amp;DropDownList控件（省、市选择）\"></p>\n<h1 id=\"三，UI设计\"><a href=\"#三，UI设计\" class=\"headerlink\" title=\"三，UI设计\"></a>三，UI设计</h1><p>页面分为两部分，后台管理部分和前台应用部分。<br>后台管理部分：用于帮助管理员上传各个省、市名称和对应关系的数据<br>前台应用部分：用户上传数据时使用</p>\n<h1 id=\"四，后台管理部分（ListBox联动）\"><a href=\"#四，后台管理部分（ListBox联动）\" class=\"headerlink\" title=\"四，后台管理部分（ListBox联动）\"></a>四，后台管理部分（ListBox联动）</h1><p>1.在页面中添加两个ListBox控件，分别命名为lbProvince和lbCity<br>2.添加一个ObjectDataSource控件，命名为ODSProvince，配置数据源<br>3.选择业务对象</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-699fad3cf510beb0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ListBox&amp;DropDownList控件（省、市选择）\"></p>\n<p>4.重复2、3添加另一个ObjectDataSource控件（ODSCity）。并配置数据源<br>5.为lbProvince选择数据源</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-d44522b13fcded85?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ListBox&amp;DropDownList控件（省、市选择）\"></p>\n<p>6.为lbCity选择数据源</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-4efed013f80c2c11?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"http://s9.sinaimg.cn/large/6849d1c2g0a4382bbc698&amp;690\"></p>\n<p>运行一下看看是否能够正常显示数据。下面我们看看如何设计一个添加“省”的功能。<br>7.在页面上添加一个TextBox控件，命名为txtProvinceAdd。再添加一个Button，命名为btnProvinceAdd。并添加如下代码：</p>\n<pre><code>protected void btnProvinceAdd_Click(object sender, EventArgs e)\n{\n    TProvinceTableAdapter province = new TProvinceTableAdapter();\n    province.Insert(txtProvinceAdd.Text.ToString().Trim());\n    txtProvinceAdd.Text = &quot;&quot;;\n    lbProvince.DataBind(); // 重新绑定数据源\n}\n</code></pre><p>给没有引用的命名空间加入using语句，这里可以用VS中的自动添加功能。这样我们就能通过TProvinceTableAdapter 提供的方法将新的省名写进数据库了。<br>lbProvince.DataBind();<br>这句话很重要，如果没有它，添加了省名的lbProvince控件不会有任何变化。重新绑定后能实现数据的刷新。<br>运行一下程序，添加几个省。</p>\n<p>8.重复7的动作，添加txtCityAdd和btnCityAdd。并添加如下代码：</p>\n<pre><code>protected void btnCityAdd_Click(object sender, EventArgs e)\n{\n    TCityTableAdapter city = new TCityTableAdapter();\n    city.Insert(txtCityAdd.Text.ToString().Trim(), Convert.ToInt16(lbProvince.SelectedValue));\n    txtCityAdd.Text = &quot;&quot;;\n    lbCity.DataBind();\n}\n</code></pre><p>由于市名需要和省名进行关联，因此我们在添加市之前要先选择一个省名，lbProvince控件获得焦点后，lbProvince.SelectedValue语句能够得到选中省名的ID号。<br>为两个ListBox添加初始焦点位置，代码如下：</p>\n<pre><code>protected void Page_Load(object sender, EventArgs e)\n{\n    if (!IsPostBack) // 只有第一次加载时付初值\n    {\n        lbProvince.SelectedIndex = 0;\n        lbCity.SelectedIndex = 0;\n    }\n}\n</code></pre><p>运行一下程序，给某个省添加几个市吧。<br>貌似有点问题，好像添加之后省和市并不对应。那是因为两个控件的联动没有做好。</p>\n<p>9.将lbProvince控件的AutoPostBack属性设为True,并添加点击事件。代码如下：</p>\n<pre><code>protected void lbProvince_SelectedIndexChanged(object sender, EventArgs e)\n{\n    lbCity.DataBind();\n}\n</code></pre><p>10.修改TCityTableAdapter的Select方法</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-2e150dd4f5687713?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ListBox&amp;DropDownList控件（省、市选择）\"></p>\n<p>在DataSet数据集界面中，选择TCityTableAdapter,在它的SelectCommand子属性中，选择CommandText。弹出查询生成器。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-9b4652f912fbefb6?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ListBox&amp;DropDownList控件（省、市选择）\"></p>\n<p>在SQL语句中添加“where ProvinceId=@ProvinceId”语句。<br>这是，运行程序会报错，因为ODSCity控件没有给TCityTableAdapter传参。</p>\n<p>11.修改ODSCity</p>\n<p>双击ODSCity控件，添加如下代码：</p>\n<pre><code>protected void ODSCity_Selecting(object sender, ObjectDataSourceSelectingEventArgs e)\n{\n    e.InputParameters[&quot;ProvinceId&quot;] = lbProvince.SelectedValue; // 传参方法\n}\n</code></pre><p>这下再运行试试。是不是一切都对了。<br>如果需要添加删除方法，可以继续下面的步骤。</p>\n<p>12.添加两个Button，分别命名为btnProvinceDel和btnCityDel。实现代码如下：</p>\n<pre><code>protected void btnProvinceDel_Click(object sender, EventArgs e)\n{\n    int nProvinceID = Convert.ToInt16(lbProvince.SelectedValue);\n\n    TCityTableAdapter city = new TCityTableAdapter();\n    DSProvinceCity.TCityDataTable cityTable = city.GetCityData(nProvinceID);\n\n    if (cityTable.Rows.Count &gt; 0)\n    {\n        Response.Write(&quot;&lt;script type=&quot;text/javascript&quot;&gt;alert(&apos;这个省不能删除!&apos;);&lt;/script&gt;&quot;);\n    }\n    else\n    {\n        TProvinceTableAdapter province = new TProvinceTableAdapter();\n        province.Delete(nProvinceID);\n    }\n}\nprotected void btnCityDel_Click(object sender, EventArgs e)\n{\n    TCityTableAdapter city = new TCityTableAdapter();\n    city.Delete(Convert.ToInt16(lbCity.SelectedValue));\n\n    lbCity.DataBind();\n}\n</code></pre><p>由于省表的ID是市表的外键，因此在删除省中的记录时要先判断是否已经将级联关系删除完全。</p>\n<p>这样，后台管理程序就OK了。</p>\n<h1 id=\"五，前台管理程序\"><a href=\"#五，前台管理程序\" class=\"headerlink\" title=\"五，前台管理程序\"></a>五，前台管理程序</h1><p>1.在页面中添加两个DropDownList控件，分别命名为ddlProvince和ddlCity<br>2.创建一个新ObjectDataSource控件，命名为ODSCityAnother与TCityTableAdaper关联<br>3.与ListBox控件类似，让ddlProvince控件与ODSProvince控件绑定，让ddlCity控件与ODSCityAnother控件绑定<br>4.双击ODSCityAnother控件，添加代码如下：</p>\n<pre><code>protected void ODSCityAnother_Selecting(object sender, ObjectDataSourceSelectingEventArgs e)\n{\n    e.InputParameters[&quot;ProvinceId&quot;] = ddlProvince.SelectedValue; \n}\n</code></pre><p>5.双击ddlProvince控件，添加代码如下：</p>\n<pre><code>protected void ddlProvince_SelectedIndexChanged(object sender, EventArgs e)\n{\n    ddlCity.DataBind();\n}\n</code></pre><p>6.ddlProvince控件AutoPostBack属性设为True</p>\n<p>运行一下，感受前台程序的体验吧。是不是很爽啊，哈哈~</p>\n<h1 id=\"附录：\"><a href=\"#附录：\" class=\"headerlink\" title=\"附录：\"></a>附录：</h1><p>ASPX页面代码：</p>\n<pre><code>&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n&lt;head id=&quot;Head1&quot; runat=&quot;server&quot;&gt;\n    &lt;title&gt;ProvinceCity&lt;/title&gt;\n    &lt;style type=&quot;text/css&quot;&gt;\n        .style1\n        {\n            width: 500;\n            border-width:1px;\n            border-style:solid;\n            border-color:Black;\n            margin:auto;\n        }\n        .Title\n        {\n            width:204px;\n            background-color:Blue;\n            color:White;\n        }\n        .style2\n        {\n            width: 204px;\n            border-width:1px;\n            border-style:solid;\n            border-color:Black;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n\n    &lt;div style=&quot; width:100%; text-align:center;&quot;&gt;\n        &lt;div style=&quot;height:30px;&quot;&gt;后台管理程序&lt;/div&gt;\n        &lt;table class=&quot;style1&quot;&gt;\n            &lt;tr&gt;\n                &lt;td class=&quot;Title&quot;&gt;\n                    省&lt;/td&gt;\n                &lt;td class=&quot;Title&quot;&gt;\n                    市&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td class=&quot;style2&quot;&gt;\n                    &lt;asp:ListBox ID=&quot;lbProvince&quot; runat=&quot;server&quot;  \n                        DataSourceID=&quot;ODSProvince&quot; DataTextField=&quot;Name&quot; DataValueField=&quot;Id&quot; \n                        Height=&quot;220px&quot; \n                        Width=&quot;200px&quot; onselectedindexchanged=&quot;lbProvince_SelectedIndexChanged&quot;&gt;&lt;/asp:ListBox&gt;\n                &lt;/td&gt;\n                &lt;td class=&quot;style2&quot;&gt;\n                    &lt;asp:ListBox ID=&quot;lbCity&quot; runat=&quot;server&quot; DataSourceID=&quot;ODSCity&quot; \n                        DataTextField=&quot;Name&quot; DataValueField=&quot;Id&quot; Height=&quot;220px&quot; Width=&quot;200px&quot;&gt;\n                    &lt;/asp:ListBox&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td class=&quot;style2&quot;&gt;\n                    &lt;asp:Button ID=&quot;btnProvinceDel&quot; runat=&quot;server&quot;  \n                        Text=&quot;删除&quot; onclick=&quot;btnProvinceDel_Click&quot; /&gt;\n                &lt;/td&gt;\n                &lt;td class=&quot;style2&quot;&gt;\n                    &lt;asp:Button ID=&quot;btnCityDel&quot; runat=&quot;server&quot; Text=&quot;删除&quot; onclick=&quot;btnCityDel_Click&quot; \n                         /&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td class=&quot;style2&quot;&gt;\n                    &lt;asp:TextBox ID=&quot;txtProvinceAdd&quot; runat=&quot;server&quot;&gt;&lt;/asp:TextBox&gt;\n                    &lt;asp:Button ID=&quot;btnProvinceAdd&quot; runat=&quot;server&quot; Text=&quot;添加&quot; \n                        onclick=&quot;btnProvinceAdd_Click&quot; /&gt;\n                &lt;/td&gt;\n                &lt;td class=&quot;style2&quot;&gt;\n                    &lt;asp:TextBox ID=&quot;txtCityAdd&quot; runat=&quot;server&quot;&gt;&lt;/asp:TextBox&gt;\n                    &lt;asp:Button ID=&quot;btnCityAdd&quot; runat=&quot;server&quot; Text=&quot;添加&quot; \n                        onclick=&quot;btnCityAdd_Click&quot; /&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td class=&quot;style2&quot;&gt;\n                    &amp;nbsp;&lt;/td&gt;\n                &lt;td class=&quot;style2&quot;&gt;\n                    &amp;nbsp;&lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/table&gt;\n    &lt;/div&gt;\n\n    &lt;asp:ObjectDataSource ID=&quot;ODSProvince&quot; runat=&quot;server&quot; DeleteMethod=&quot;Delete&quot; \n        InsertMethod=&quot;Insert&quot; OldValuesParameterFormatString=&quot;original_{0}&quot; \n        SelectMethod=&quot;GetProvinceData&quot; \n        TypeName=&quot;DSProvinceCityTableAdapters.TProvinceTableAdapter&quot; \n        UpdateMethod=&quot;Update&quot;&gt;\n        &lt;DeleteParameters&gt;\n            &lt;asp:Parameter Name=&quot;Original_Id&quot; Type=&quot;Int32&quot; /&gt;\n        &lt;/DeleteParameters&gt;\n        &lt;InsertParameters&gt;\n            &lt;asp:Parameter Name=&quot;Name&quot; Type=&quot;String&quot; /&gt;\n        &lt;/InsertParameters&gt;\n        &lt;UpdateParameters&gt;\n            &lt;asp:Parameter Name=&quot;Name&quot; Type=&quot;String&quot; /&gt;\n            &lt;asp:Parameter Name=&quot;Original_Id&quot; Type=&quot;Int32&quot; /&gt;\n        &lt;/UpdateParameters&gt;\n    &lt;/asp:ObjectDataSource&gt;\n    &lt;asp:ObjectDataSource ID=&quot;ODSCity&quot; runat=&quot;server&quot; DeleteMethod=&quot;Delete&quot; \n        InsertMethod=&quot;Insert&quot; OldValuesParameterFormatString=&quot;original_{0}&quot; \n        SelectMethod=&quot;GetCityData&quot; \n        TypeName=&quot;DSProvinceCityTableAdapters.TCityTableAdapter&quot; \n        UpdateMethod=&quot;Update&quot; onselecting=&quot;ODSCity_Selecting&quot;&gt;\n        &lt;DeleteParameters&gt;\n            &lt;asp:Parameter Name=&quot;Original_Id&quot; Type=&quot;Int32&quot; /&gt;\n        &lt;/DeleteParameters&gt;\n        &lt;InsertParameters&gt;\n            &lt;asp:Parameter Name=&quot;Name&quot; Type=&quot;String&quot; /&gt;\n            &lt;asp:Parameter Name=&quot;ProvinceId&quot; Type=&quot;Int32&quot; /&gt;\n        &lt;/InsertParameters&gt;\n        &lt;UpdateParameters&gt;\n            &lt;asp:Parameter Name=&quot;Name&quot; Type=&quot;String&quot; /&gt;\n            &lt;asp:Parameter Name=&quot;ProvinceId&quot; Type=&quot;Int32&quot; /&gt;\n            &lt;asp:Parameter Name=&quot;Original_Id&quot; Type=&quot;Int32&quot; /&gt;\n        &lt;/UpdateParameters&gt;\n    &lt;/asp:ObjectDataSource&gt;\n    &lt;hr/&gt;\n\n    &lt;div style=&quot; width:100%; text-align:center;&quot;&gt;\n        &lt;div style=&quot;height:30px;&quot;&gt;前台应用程序&lt;/div&gt;\n         &lt;table class=&quot;style1&quot;&gt;\n            &lt;tr&gt;\n                &lt;td class=&quot;Title&quot;&gt;\n                    省&lt;/td&gt;\n                &lt;td class=&quot;Title&quot;&gt;\n                    市&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td class=&quot;style2&quot;&gt;\n                    &lt;asp:DropDownList ID=&quot;ddlProvince&quot; runat=&quot;server&quot;  \n                        DataSourceID=&quot;ODSProvince&quot; DataTextField=&quot;Name&quot; DataValueField=&quot;Id&quot; onselectedindexchanged=&quot;ddlProvince_SelectedIndexChanged&quot; \n                        &gt;\n                    &lt;/asp:DropDownList&gt;\n                &lt;/td&gt;\n                &lt;td class=&quot;style2&quot;&gt;\n                    &lt;asp:DropDownList ID=&quot;ddlCity&quot; runat=&quot;server&quot; DataSourceID=&quot;ODSCityAnother&quot; \n                        DataTextField=&quot;Name&quot; DataValueField=&quot;Id&quot;&gt;\n                    &lt;/asp:DropDownList&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n          &lt;/table&gt;\n    &lt;/div&gt;\n\n    &lt;asp:ObjectDataSource ID=&quot;ODSCityAnother&quot; runat=&quot;server&quot; DeleteMethod=&quot;Delete&quot; \n        InsertMethod=&quot;Insert&quot; OldValuesParameterFormatString=&quot;original_{0}&quot; \n        onselecting=&quot;ODSCityAnother_Selecting&quot; SelectMethod=&quot;GetCityData&quot; \n        TypeName=&quot;DSProvinceCityTableAdapters.TCityTableAdapter&quot; UpdateMethod=&quot;Update&quot;&gt;\n        &lt;DeleteParameters&gt;\n            &lt;asp:Parameter Name=&quot;Original_Id&quot; Type=&quot;Int32&quot; /&gt;\n        &lt;/DeleteParameters&gt;\n        &lt;InsertParameters&gt;\n            &lt;asp:Parameter Name=&quot;Name&quot; Type=&quot;String&quot; /&gt;\n            &lt;asp:Parameter Name=&quot;ProvinceId&quot; Type=&quot;Int32&quot; /&gt;\n        &lt;/InsertParameters&gt;\n        &lt;SelectParameters&gt;\n            &lt;asp:Parameter Name=&quot;ProvinceId&quot; Type=&quot;Int32&quot; /&gt;\n        &lt;/SelectParameters&gt;\n        &lt;UpdateParameters&gt;\n            &lt;asp:Parameter Name=&quot;Name&quot; Type=&quot;String&quot; /&gt;\n            &lt;asp:Parameter Name=&quot;ProvinceId&quot; Type=&quot;Int32&quot; /&gt;\n            &lt;asp:Parameter Name=&quot;Original_Id&quot; Type=&quot;Int32&quot; /&gt;\n        &lt;/UpdateParameters&gt;\n    &lt;/asp:ObjectDataSource&gt;\n    &lt;hr/&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre>"},{"title":"C# RadioButtonList控件（在线投票功能）","date":"2017-03-18T06:17:53.000Z","_content":"\n# 涉及技术点：\n\n- RadioButtonList控件的使用\n- 三层架构\n- ObjectDataSource绑定控件\n- 触发器的使用\n\nRadioButtonList实际上是RadioButton控件的一个容器，能够通过一个对象处理N个单选控件。\n我们要建立一个能够随时更改投票内容的动态投票系统。维护人员能够通过简单的数据库修改发起一个新投票。在这个例子中，我们会有两个投票项目，可以动态切换。\n\n# 一，建立数据库\n\n\tcreate table TVote\n\t(\n\t\tId int NOT NULL primary key,\n\t\tTitle nchar(100) NULL, \n\t\tTotleCnt int NULL, \n\t);\n\t\n\tinsert into TVote values(1,'今天下班去哪儿吃饭?', 0);\n\tinsert into TVote values(2,'先进员工评选', 0);\n\t\n\tcreate table TVoteDetail\n\t(\n\t\tId int IDENTITY(1,1) NOT NULL primary key, \n\t\tDetail nchar(100) NULL, \n\t\tVoteId int references TVote(Id), \n\t\tCnt int NULL \n\t);\n\t\n\tinsert into TVoteDetail values('食堂',1,0);\n\tinsert into TVoteDetail values('小吃城',1,0);\n\tinsert into TVoteDetail values('快餐店',1,0);\n\tinsert into TVoteDetail values('大排档',1,0);\n\tinsert into TVoteDetail values('张三',2,0);\n\tinsert into TVoteDetail values('李四',2,0);\n\tinsert into TVoteDetail values('王五',2,0);\n\tinsert into TVoteDetail values('赵六',2,0);\n\n我们总共建立了两张表，TVote作为主表，保存每个投票项目，TVoteDetail表保存投票的具体内容。\n每当TVoteDetail中的得票数修改，TVote表中的全部票数也要跟着修改。这里用触发器来实现。脚本如下：\n\n\tif exists(select name from sysobjects where name='TVoteDetail_Update' and type='tr')\n\t\tdrop trigger TVoteDetail_Update\n\t\tgo\n\t\tcreate trigger TVoteDetail_Update\n\t\ton TVoteDetail\n\t\tfor UPDATE\n\t\tas\n\t\tif(update(Cnt))\n\t\tbegin\n\t\tdeclare @voteid int \n\t\tdeclare @totalcnt int\n\t\tselect @voteid = VoteId from Inserted\n\t\t\n\t\tselect @totalcnt = sum(cnt) from TVoteDetail \n\t\twhere VoteId = @voteid\n\t\tgroup by VoteId\n\t\tupdate TVote set TotleCnt=@totalcnt where Id=@voteid\n\tend\n\n这样数据库部分完成。\n\n# 二，DAL层代码\n\n    ///\n    /// 得到投票标题\n    ///\n    /// 投票项ID\n    /// 投票项标题\n    public SqlDataReader GetVoteTitle(int nVoteID)\n    {\n        string strConn = SqlHelper.GetConnSting();\n        string strSQL = \"select Title from TVote where Id=\" + nVoteID.ToString();\n        return SqlHelper.ExecuteReader(strConn, CommandType.Text, strSQL);\n    }\n\n    ///\n    /// 得票数加1\n    ///\n    /// 投票项目ID\n    public void UpdateVoteCnt(int nID)\n    {\n        string strConn = SqlHelper.GetConnSting();\n        string strSQL = \"update TVoteDetail set Cnt=Cnt+1 where Id=\" + nID;\n        SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, strSQL);\n    }\n\nSQLHelper类的使用前面的本文已经介绍了，这里不再赘述。\n\n# 三，BLL代码\n\n    [DataObjectMethod(DataObjectMethodType.Select)]\n    public static SqlDataReader GetVoteDetail(int nVoteID)\n    {\n        DAL da = new DAL();\n        return da.GetVoteDetail(nVoteID);\n    }\n    public static void UpdateVoteCnt(int nID)\n    {\n        DAL da = new DAL();\n        da.UpdateVoteCnt(nID);\n    }\n\n# 四，UI层\n\n## 1.在APSX页面中添加如下代码\n\n\t<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\t<head runat=\"server\">\n\t    <title>投票系统</title>   \n\t    <style type=\"text/css\">\n\t        .style1\n\t        {\n\t            width: 500px;\n\t            margin:auto;\n\t            border-style:solid;\n\t            border-color:Black;\n\t            border-width:1px;\n\t        }\n\t        .style2\n\t        {\n\t            height: 35px;\n\t            background-color:#0066CC;\n\t            color:White;\n\t        }\n\t    </style>\n\t</head>\n\t<body>\n\t    <form id=\"form1\" runat=\"server\">\n\t    <div style=\"width:100%; text-align:center;\">\n\t        <table class=\"style1\">\n\t            <tr>\n\t                <td class=\"style2\">\n\t                    <strong>投票系统</strong></td>\n\t            </tr>\n\t            <tr>\n\t                <td>\n\t                    <asp:Label ID=\"lblTitle\" runat=\"server\" Text=\"Label\"></asp:Label>\n\t                    <asp:RadioButtonList ID=\"rblVote\" runat=\"server\" \n\t                        DataSourceID=\"ObjectDataSource1\" DataTextField=\"Detail\" DataValueField=\"Id\">\n\t                    </asp:RadioButtonList>\n\t                </td>\n\t            </tr>\n\t            <tr>\n\t                <td class=\"style2\">\n\t                    <asp:Button ID=\"btnSubmit\" runat=\"server\" onclick=\"btnSubmit_Click\" Text=\"提交\" />\n\t&nbsp;<asp:Button ID=\"btnResult\" runat=\"server\" onclick=\"btnResult_Click\" Text=\"结果\" />\n\t                </td>\n\t            </tr>\n\t        </table>\n\t        <asp:ObjectDataSource ID=\"ObjectDataSource1\" runat=\"server\" \n\t            DeleteMethod=\"Delete\" InsertMethod=\"Add\" \n\t            onselecting=\"ObjectDataSource1_Selecting\" SelectMethod=\"GetVoteDetail\" \n\t            TypeName=\"BLL\" UpdateMethod=\"Update\" \n\t            OldValuesParameterFormatString=\"original_{0}\">\n\t            <DeleteParameters>\n\t                <asp:Parameter Name=\"nFavorID\" Type=\"Int32\" />\n\t            </DeleteParameters>\n\t            <InsertParameters>\n\t                <asp:Parameter Name=\"strFavor\" Type=\"String\" />\n\t            </InsertParameters>\n\t            <SelectParameters>\n\t                <asp:Parameter Name=\"nVoteID\" Type=\"Int32\" />\n\t            </SelectParameters>\n\t            <UpdateParameters>\n\t                <asp:Parameter Name=\"nFavorID\" Type=\"Int32\" />\n\t            </UpdateParameters>\n\t        </asp:ObjectDataSource>\n\t    </div>\n\t    </form>\n\t</body>\n\t</html>\n\n## 2.后台代码\n\n\tpublic const int nVoteID = 2; // 设置投票ID\n\t\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        lblTitle.Text = BLL.GetVoteTitle(nVoteID);\n    }\n\n    protected void btnSubmit_Click1(object sender, EventArgs e)\n    {\n        int nID = Convert.ToInt32(rblVote.SelectedValue);\n\n        BLL.UpdateVoteCnt(nID);\n    }\n    protected void btnLook_Click(object sender, EventArgs e)\n    {\n        \n    }\n    protected void ObjectDataSource1_Selecting(object sender, ObjectDataSourceSelectingEventArgs e)\n    {\n\t\t// ObjectDataSource 指定的是带有参数的select方法\n        e.InputParameters[\"nVoteID\"] = nVoteID;  \n    }\n\n注意，ObjectDataSource控件需要指定BLL中的GetVoteDetail方法作为Select方法。\n选择了需要投票的项目之后，提交。数据库中相应的项目会改变。自己试试吧。","source":"_posts/CSharpRadioButtonList.md","raw":"---\ntitle: C# RadioButtonList控件（在线投票功能）\ntags:\n  - CSharp\ncategories: CSharp\ndate: 2017-03-18 06:17:53\n---\n\n# 涉及技术点：\n\n- RadioButtonList控件的使用\n- 三层架构\n- ObjectDataSource绑定控件\n- 触发器的使用\n\nRadioButtonList实际上是RadioButton控件的一个容器，能够通过一个对象处理N个单选控件。\n我们要建立一个能够随时更改投票内容的动态投票系统。维护人员能够通过简单的数据库修改发起一个新投票。在这个例子中，我们会有两个投票项目，可以动态切换。\n\n# 一，建立数据库\n\n\tcreate table TVote\n\t(\n\t\tId int NOT NULL primary key,\n\t\tTitle nchar(100) NULL, \n\t\tTotleCnt int NULL, \n\t);\n\t\n\tinsert into TVote values(1,'今天下班去哪儿吃饭?', 0);\n\tinsert into TVote values(2,'先进员工评选', 0);\n\t\n\tcreate table TVoteDetail\n\t(\n\t\tId int IDENTITY(1,1) NOT NULL primary key, \n\t\tDetail nchar(100) NULL, \n\t\tVoteId int references TVote(Id), \n\t\tCnt int NULL \n\t);\n\t\n\tinsert into TVoteDetail values('食堂',1,0);\n\tinsert into TVoteDetail values('小吃城',1,0);\n\tinsert into TVoteDetail values('快餐店',1,0);\n\tinsert into TVoteDetail values('大排档',1,0);\n\tinsert into TVoteDetail values('张三',2,0);\n\tinsert into TVoteDetail values('李四',2,0);\n\tinsert into TVoteDetail values('王五',2,0);\n\tinsert into TVoteDetail values('赵六',2,0);\n\n我们总共建立了两张表，TVote作为主表，保存每个投票项目，TVoteDetail表保存投票的具体内容。\n每当TVoteDetail中的得票数修改，TVote表中的全部票数也要跟着修改。这里用触发器来实现。脚本如下：\n\n\tif exists(select name from sysobjects where name='TVoteDetail_Update' and type='tr')\n\t\tdrop trigger TVoteDetail_Update\n\t\tgo\n\t\tcreate trigger TVoteDetail_Update\n\t\ton TVoteDetail\n\t\tfor UPDATE\n\t\tas\n\t\tif(update(Cnt))\n\t\tbegin\n\t\tdeclare @voteid int \n\t\tdeclare @totalcnt int\n\t\tselect @voteid = VoteId from Inserted\n\t\t\n\t\tselect @totalcnt = sum(cnt) from TVoteDetail \n\t\twhere VoteId = @voteid\n\t\tgroup by VoteId\n\t\tupdate TVote set TotleCnt=@totalcnt where Id=@voteid\n\tend\n\n这样数据库部分完成。\n\n# 二，DAL层代码\n\n    ///\n    /// 得到投票标题\n    ///\n    /// 投票项ID\n    /// 投票项标题\n    public SqlDataReader GetVoteTitle(int nVoteID)\n    {\n        string strConn = SqlHelper.GetConnSting();\n        string strSQL = \"select Title from TVote where Id=\" + nVoteID.ToString();\n        return SqlHelper.ExecuteReader(strConn, CommandType.Text, strSQL);\n    }\n\n    ///\n    /// 得票数加1\n    ///\n    /// 投票项目ID\n    public void UpdateVoteCnt(int nID)\n    {\n        string strConn = SqlHelper.GetConnSting();\n        string strSQL = \"update TVoteDetail set Cnt=Cnt+1 where Id=\" + nID;\n        SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, strSQL);\n    }\n\nSQLHelper类的使用前面的本文已经介绍了，这里不再赘述。\n\n# 三，BLL代码\n\n    [DataObjectMethod(DataObjectMethodType.Select)]\n    public static SqlDataReader GetVoteDetail(int nVoteID)\n    {\n        DAL da = new DAL();\n        return da.GetVoteDetail(nVoteID);\n    }\n    public static void UpdateVoteCnt(int nID)\n    {\n        DAL da = new DAL();\n        da.UpdateVoteCnt(nID);\n    }\n\n# 四，UI层\n\n## 1.在APSX页面中添加如下代码\n\n\t<html xmlns=\"http://www.w3.org/1999/xhtml\">\n\t<head runat=\"server\">\n\t    <title>投票系统</title>   \n\t    <style type=\"text/css\">\n\t        .style1\n\t        {\n\t            width: 500px;\n\t            margin:auto;\n\t            border-style:solid;\n\t            border-color:Black;\n\t            border-width:1px;\n\t        }\n\t        .style2\n\t        {\n\t            height: 35px;\n\t            background-color:#0066CC;\n\t            color:White;\n\t        }\n\t    </style>\n\t</head>\n\t<body>\n\t    <form id=\"form1\" runat=\"server\">\n\t    <div style=\"width:100%; text-align:center;\">\n\t        <table class=\"style1\">\n\t            <tr>\n\t                <td class=\"style2\">\n\t                    <strong>投票系统</strong></td>\n\t            </tr>\n\t            <tr>\n\t                <td>\n\t                    <asp:Label ID=\"lblTitle\" runat=\"server\" Text=\"Label\"></asp:Label>\n\t                    <asp:RadioButtonList ID=\"rblVote\" runat=\"server\" \n\t                        DataSourceID=\"ObjectDataSource1\" DataTextField=\"Detail\" DataValueField=\"Id\">\n\t                    </asp:RadioButtonList>\n\t                </td>\n\t            </tr>\n\t            <tr>\n\t                <td class=\"style2\">\n\t                    <asp:Button ID=\"btnSubmit\" runat=\"server\" onclick=\"btnSubmit_Click\" Text=\"提交\" />\n\t&nbsp;<asp:Button ID=\"btnResult\" runat=\"server\" onclick=\"btnResult_Click\" Text=\"结果\" />\n\t                </td>\n\t            </tr>\n\t        </table>\n\t        <asp:ObjectDataSource ID=\"ObjectDataSource1\" runat=\"server\" \n\t            DeleteMethod=\"Delete\" InsertMethod=\"Add\" \n\t            onselecting=\"ObjectDataSource1_Selecting\" SelectMethod=\"GetVoteDetail\" \n\t            TypeName=\"BLL\" UpdateMethod=\"Update\" \n\t            OldValuesParameterFormatString=\"original_{0}\">\n\t            <DeleteParameters>\n\t                <asp:Parameter Name=\"nFavorID\" Type=\"Int32\" />\n\t            </DeleteParameters>\n\t            <InsertParameters>\n\t                <asp:Parameter Name=\"strFavor\" Type=\"String\" />\n\t            </InsertParameters>\n\t            <SelectParameters>\n\t                <asp:Parameter Name=\"nVoteID\" Type=\"Int32\" />\n\t            </SelectParameters>\n\t            <UpdateParameters>\n\t                <asp:Parameter Name=\"nFavorID\" Type=\"Int32\" />\n\t            </UpdateParameters>\n\t        </asp:ObjectDataSource>\n\t    </div>\n\t    </form>\n\t</body>\n\t</html>\n\n## 2.后台代码\n\n\tpublic const int nVoteID = 2; // 设置投票ID\n\t\n    protected void Page_Load(object sender, EventArgs e)\n    {\n        lblTitle.Text = BLL.GetVoteTitle(nVoteID);\n    }\n\n    protected void btnSubmit_Click1(object sender, EventArgs e)\n    {\n        int nID = Convert.ToInt32(rblVote.SelectedValue);\n\n        BLL.UpdateVoteCnt(nID);\n    }\n    protected void btnLook_Click(object sender, EventArgs e)\n    {\n        \n    }\n    protected void ObjectDataSource1_Selecting(object sender, ObjectDataSourceSelectingEventArgs e)\n    {\n\t\t// ObjectDataSource 指定的是带有参数的select方法\n        e.InputParameters[\"nVoteID\"] = nVoteID;  \n    }\n\n注意，ObjectDataSource控件需要指定BLL中的GetVoteDetail方法作为Select方法。\n选择了需要投票的项目之后，提交。数据库中相应的项目会改变。自己试试吧。","slug":"CSharpRadioButtonList","published":1,"updated":"2017-03-18T06:30:26.327Z","_id":"cj0evfi2c000dvcfuf7ix544d","comments":1,"layout":"post","photos":[],"link":"","content":"<h1 id=\"涉及技术点：\"><a href=\"#涉及技术点：\" class=\"headerlink\" title=\"涉及技术点：\"></a>涉及技术点：</h1><ul>\n<li>RadioButtonList控件的使用</li>\n<li>三层架构</li>\n<li>ObjectDataSource绑定控件</li>\n<li>触发器的使用</li>\n</ul>\n<p>RadioButtonList实际上是RadioButton控件的一个容器，能够通过一个对象处理N个单选控件。<br>我们要建立一个能够随时更改投票内容的动态投票系统。维护人员能够通过简单的数据库修改发起一个新投票。在这个例子中，我们会有两个投票项目，可以动态切换。</p>\n<h1 id=\"一，建立数据库\"><a href=\"#一，建立数据库\" class=\"headerlink\" title=\"一，建立数据库\"></a>一，建立数据库</h1><pre><code>create table TVote\n(\n    Id int NOT NULL primary key,\n    Title nchar(100) NULL, \n    TotleCnt int NULL, \n);\n\ninsert into TVote values(1,&apos;今天下班去哪儿吃饭?&apos;, 0);\ninsert into TVote values(2,&apos;先进员工评选&apos;, 0);\n\ncreate table TVoteDetail\n(\n    Id int IDENTITY(1,1) NOT NULL primary key, \n    Detail nchar(100) NULL, \n    VoteId int references TVote(Id), \n    Cnt int NULL \n);\n\ninsert into TVoteDetail values(&apos;食堂&apos;,1,0);\ninsert into TVoteDetail values(&apos;小吃城&apos;,1,0);\ninsert into TVoteDetail values(&apos;快餐店&apos;,1,0);\ninsert into TVoteDetail values(&apos;大排档&apos;,1,0);\ninsert into TVoteDetail values(&apos;张三&apos;,2,0);\ninsert into TVoteDetail values(&apos;李四&apos;,2,0);\ninsert into TVoteDetail values(&apos;王五&apos;,2,0);\ninsert into TVoteDetail values(&apos;赵六&apos;,2,0);\n</code></pre><p>我们总共建立了两张表，TVote作为主表，保存每个投票项目，TVoteDetail表保存投票的具体内容。<br>每当TVoteDetail中的得票数修改，TVote表中的全部票数也要跟着修改。这里用触发器来实现。脚本如下：</p>\n<pre><code>if exists(select name from sysobjects where name=&apos;TVoteDetail_Update&apos; and type=&apos;tr&apos;)\n    drop trigger TVoteDetail_Update\n    go\n    create trigger TVoteDetail_Update\n    on TVoteDetail\n    for UPDATE\n    as\n    if(update(Cnt))\n    begin\n    declare @voteid int \n    declare @totalcnt int\n    select @voteid = VoteId from Inserted\n\n    select @totalcnt = sum(cnt) from TVoteDetail \n    where VoteId = @voteid\n    group by VoteId\n    update TVote set TotleCnt=@totalcnt where Id=@voteid\nend\n</code></pre><p>这样数据库部分完成。</p>\n<h1 id=\"二，DAL层代码\"><a href=\"#二，DAL层代码\" class=\"headerlink\" title=\"二，DAL层代码\"></a>二，DAL层代码</h1><pre><code>///\n/// 得到投票标题\n///\n/// 投票项ID\n/// 投票项标题\npublic SqlDataReader GetVoteTitle(int nVoteID)\n{\n    string strConn = SqlHelper.GetConnSting();\n    string strSQL = &quot;select Title from TVote where Id=&quot; + nVoteID.ToString();\n    return SqlHelper.ExecuteReader(strConn, CommandType.Text, strSQL);\n}\n\n///\n/// 得票数加1\n///\n/// 投票项目ID\npublic void UpdateVoteCnt(int nID)\n{\n    string strConn = SqlHelper.GetConnSting();\n    string strSQL = &quot;update TVoteDetail set Cnt=Cnt+1 where Id=&quot; + nID;\n    SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, strSQL);\n}\n</code></pre><p>SQLHelper类的使用前面的本文已经介绍了，这里不再赘述。</p>\n<h1 id=\"三，BLL代码\"><a href=\"#三，BLL代码\" class=\"headerlink\" title=\"三，BLL代码\"></a>三，BLL代码</h1><pre><code>[DataObjectMethod(DataObjectMethodType.Select)]\npublic static SqlDataReader GetVoteDetail(int nVoteID)\n{\n    DAL da = new DAL();\n    return da.GetVoteDetail(nVoteID);\n}\npublic static void UpdateVoteCnt(int nID)\n{\n    DAL da = new DAL();\n    da.UpdateVoteCnt(nID);\n}\n</code></pre><h1 id=\"四，UI层\"><a href=\"#四，UI层\" class=\"headerlink\" title=\"四，UI层\"></a>四，UI层</h1><h2 id=\"1-在APSX页面中添加如下代码\"><a href=\"#1-在APSX页面中添加如下代码\" class=\"headerlink\" title=\"1.在APSX页面中添加如下代码\"></a>1.在APSX页面中添加如下代码</h2><pre><code>&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;投票系统&lt;/title&gt;   \n    &lt;style type=&quot;text/css&quot;&gt;\n        .style1\n        {\n            width: 500px;\n            margin:auto;\n            border-style:solid;\n            border-color:Black;\n            border-width:1px;\n        }\n        .style2\n        {\n            height: 35px;\n            background-color:#0066CC;\n            color:White;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div style=&quot;width:100%; text-align:center;&quot;&gt;\n        &lt;table class=&quot;style1&quot;&gt;\n            &lt;tr&gt;\n                &lt;td class=&quot;style2&quot;&gt;\n                    &lt;strong&gt;投票系统&lt;/strong&gt;&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;\n                    &lt;asp:Label ID=&quot;lblTitle&quot; runat=&quot;server&quot; Text=&quot;Label&quot;&gt;&lt;/asp:Label&gt;\n                    &lt;asp:RadioButtonList ID=&quot;rblVote&quot; runat=&quot;server&quot; \n                        DataSourceID=&quot;ObjectDataSource1&quot; DataTextField=&quot;Detail&quot; DataValueField=&quot;Id&quot;&gt;\n                    &lt;/asp:RadioButtonList&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td class=&quot;style2&quot;&gt;\n                    &lt;asp:Button ID=&quot;btnSubmit&quot; runat=&quot;server&quot; onclick=&quot;btnSubmit_Click&quot; Text=&quot;提交&quot; /&gt;\n&amp;nbsp;&lt;asp:Button ID=&quot;btnResult&quot; runat=&quot;server&quot; onclick=&quot;btnResult_Click&quot; Text=&quot;结果&quot; /&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/table&gt;\n        &lt;asp:ObjectDataSource ID=&quot;ObjectDataSource1&quot; runat=&quot;server&quot; \n            DeleteMethod=&quot;Delete&quot; InsertMethod=&quot;Add&quot; \n            onselecting=&quot;ObjectDataSource1_Selecting&quot; SelectMethod=&quot;GetVoteDetail&quot; \n            TypeName=&quot;BLL&quot; UpdateMethod=&quot;Update&quot; \n            OldValuesParameterFormatString=&quot;original_{0}&quot;&gt;\n            &lt;DeleteParameters&gt;\n                &lt;asp:Parameter Name=&quot;nFavorID&quot; Type=&quot;Int32&quot; /&gt;\n            &lt;/DeleteParameters&gt;\n            &lt;InsertParameters&gt;\n                &lt;asp:Parameter Name=&quot;strFavor&quot; Type=&quot;String&quot; /&gt;\n            &lt;/InsertParameters&gt;\n            &lt;SelectParameters&gt;\n                &lt;asp:Parameter Name=&quot;nVoteID&quot; Type=&quot;Int32&quot; /&gt;\n            &lt;/SelectParameters&gt;\n            &lt;UpdateParameters&gt;\n                &lt;asp:Parameter Name=&quot;nFavorID&quot; Type=&quot;Int32&quot; /&gt;\n            &lt;/UpdateParameters&gt;\n        &lt;/asp:ObjectDataSource&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h2 id=\"2-后台代码\"><a href=\"#2-后台代码\" class=\"headerlink\" title=\"2.后台代码\"></a>2.后台代码</h2><pre><code>public const int nVoteID = 2; // 设置投票ID\n\nprotected void Page_Load(object sender, EventArgs e)\n{\n    lblTitle.Text = BLL.GetVoteTitle(nVoteID);\n}\n\nprotected void btnSubmit_Click1(object sender, EventArgs e)\n{\n    int nID = Convert.ToInt32(rblVote.SelectedValue);\n\n    BLL.UpdateVoteCnt(nID);\n}\nprotected void btnLook_Click(object sender, EventArgs e)\n{\n\n}\nprotected void ObjectDataSource1_Selecting(object sender, ObjectDataSourceSelectingEventArgs e)\n{\n    // ObjectDataSource 指定的是带有参数的select方法\n    e.InputParameters[&quot;nVoteID&quot;] = nVoteID;  \n}\n</code></pre><p>注意，ObjectDataSource控件需要指定BLL中的GetVoteDetail方法作为Select方法。<br>选择了需要投票的项目之后，提交。数据库中相应的项目会改变。自己试试吧。</p>\n","excerpt":"","more":"<h1 id=\"涉及技术点：\"><a href=\"#涉及技术点：\" class=\"headerlink\" title=\"涉及技术点：\"></a>涉及技术点：</h1><ul>\n<li>RadioButtonList控件的使用</li>\n<li>三层架构</li>\n<li>ObjectDataSource绑定控件</li>\n<li>触发器的使用</li>\n</ul>\n<p>RadioButtonList实际上是RadioButton控件的一个容器，能够通过一个对象处理N个单选控件。<br>我们要建立一个能够随时更改投票内容的动态投票系统。维护人员能够通过简单的数据库修改发起一个新投票。在这个例子中，我们会有两个投票项目，可以动态切换。</p>\n<h1 id=\"一，建立数据库\"><a href=\"#一，建立数据库\" class=\"headerlink\" title=\"一，建立数据库\"></a>一，建立数据库</h1><pre><code>create table TVote\n(\n    Id int NOT NULL primary key,\n    Title nchar(100) NULL, \n    TotleCnt int NULL, \n);\n\ninsert into TVote values(1,&apos;今天下班去哪儿吃饭?&apos;, 0);\ninsert into TVote values(2,&apos;先进员工评选&apos;, 0);\n\ncreate table TVoteDetail\n(\n    Id int IDENTITY(1,1) NOT NULL primary key, \n    Detail nchar(100) NULL, \n    VoteId int references TVote(Id), \n    Cnt int NULL \n);\n\ninsert into TVoteDetail values(&apos;食堂&apos;,1,0);\ninsert into TVoteDetail values(&apos;小吃城&apos;,1,0);\ninsert into TVoteDetail values(&apos;快餐店&apos;,1,0);\ninsert into TVoteDetail values(&apos;大排档&apos;,1,0);\ninsert into TVoteDetail values(&apos;张三&apos;,2,0);\ninsert into TVoteDetail values(&apos;李四&apos;,2,0);\ninsert into TVoteDetail values(&apos;王五&apos;,2,0);\ninsert into TVoteDetail values(&apos;赵六&apos;,2,0);\n</code></pre><p>我们总共建立了两张表，TVote作为主表，保存每个投票项目，TVoteDetail表保存投票的具体内容。<br>每当TVoteDetail中的得票数修改，TVote表中的全部票数也要跟着修改。这里用触发器来实现。脚本如下：</p>\n<pre><code>if exists(select name from sysobjects where name=&apos;TVoteDetail_Update&apos; and type=&apos;tr&apos;)\n    drop trigger TVoteDetail_Update\n    go\n    create trigger TVoteDetail_Update\n    on TVoteDetail\n    for UPDATE\n    as\n    if(update(Cnt))\n    begin\n    declare @voteid int \n    declare @totalcnt int\n    select @voteid = VoteId from Inserted\n\n    select @totalcnt = sum(cnt) from TVoteDetail \n    where VoteId = @voteid\n    group by VoteId\n    update TVote set TotleCnt=@totalcnt where Id=@voteid\nend\n</code></pre><p>这样数据库部分完成。</p>\n<h1 id=\"二，DAL层代码\"><a href=\"#二，DAL层代码\" class=\"headerlink\" title=\"二，DAL层代码\"></a>二，DAL层代码</h1><pre><code>///\n/// 得到投票标题\n///\n/// 投票项ID\n/// 投票项标题\npublic SqlDataReader GetVoteTitle(int nVoteID)\n{\n    string strConn = SqlHelper.GetConnSting();\n    string strSQL = &quot;select Title from TVote where Id=&quot; + nVoteID.ToString();\n    return SqlHelper.ExecuteReader(strConn, CommandType.Text, strSQL);\n}\n\n///\n/// 得票数加1\n///\n/// 投票项目ID\npublic void UpdateVoteCnt(int nID)\n{\n    string strConn = SqlHelper.GetConnSting();\n    string strSQL = &quot;update TVoteDetail set Cnt=Cnt+1 where Id=&quot; + nID;\n    SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, strSQL);\n}\n</code></pre><p>SQLHelper类的使用前面的本文已经介绍了，这里不再赘述。</p>\n<h1 id=\"三，BLL代码\"><a href=\"#三，BLL代码\" class=\"headerlink\" title=\"三，BLL代码\"></a>三，BLL代码</h1><pre><code>[DataObjectMethod(DataObjectMethodType.Select)]\npublic static SqlDataReader GetVoteDetail(int nVoteID)\n{\n    DAL da = new DAL();\n    return da.GetVoteDetail(nVoteID);\n}\npublic static void UpdateVoteCnt(int nID)\n{\n    DAL da = new DAL();\n    da.UpdateVoteCnt(nID);\n}\n</code></pre><h1 id=\"四，UI层\"><a href=\"#四，UI层\" class=\"headerlink\" title=\"四，UI层\"></a>四，UI层</h1><h2 id=\"1-在APSX页面中添加如下代码\"><a href=\"#1-在APSX页面中添加如下代码\" class=\"headerlink\" title=\"1.在APSX页面中添加如下代码\"></a>1.在APSX页面中添加如下代码</h2><pre><code>&lt;html xmlns=&quot;http://www.w3.org/1999/xhtml&quot;&gt;\n&lt;head runat=&quot;server&quot;&gt;\n    &lt;title&gt;投票系统&lt;/title&gt;   \n    &lt;style type=&quot;text/css&quot;&gt;\n        .style1\n        {\n            width: 500px;\n            margin:auto;\n            border-style:solid;\n            border-color:Black;\n            border-width:1px;\n        }\n        .style2\n        {\n            height: 35px;\n            background-color:#0066CC;\n            color:White;\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;form id=&quot;form1&quot; runat=&quot;server&quot;&gt;\n    &lt;div style=&quot;width:100%; text-align:center;&quot;&gt;\n        &lt;table class=&quot;style1&quot;&gt;\n            &lt;tr&gt;\n                &lt;td class=&quot;style2&quot;&gt;\n                    &lt;strong&gt;投票系统&lt;/strong&gt;&lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td&gt;\n                    &lt;asp:Label ID=&quot;lblTitle&quot; runat=&quot;server&quot; Text=&quot;Label&quot;&gt;&lt;/asp:Label&gt;\n                    &lt;asp:RadioButtonList ID=&quot;rblVote&quot; runat=&quot;server&quot; \n                        DataSourceID=&quot;ObjectDataSource1&quot; DataTextField=&quot;Detail&quot; DataValueField=&quot;Id&quot;&gt;\n                    &lt;/asp:RadioButtonList&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n            &lt;tr&gt;\n                &lt;td class=&quot;style2&quot;&gt;\n                    &lt;asp:Button ID=&quot;btnSubmit&quot; runat=&quot;server&quot; onclick=&quot;btnSubmit_Click&quot; Text=&quot;提交&quot; /&gt;\n&amp;nbsp;&lt;asp:Button ID=&quot;btnResult&quot; runat=&quot;server&quot; onclick=&quot;btnResult_Click&quot; Text=&quot;结果&quot; /&gt;\n                &lt;/td&gt;\n            &lt;/tr&gt;\n        &lt;/table&gt;\n        &lt;asp:ObjectDataSource ID=&quot;ObjectDataSource1&quot; runat=&quot;server&quot; \n            DeleteMethod=&quot;Delete&quot; InsertMethod=&quot;Add&quot; \n            onselecting=&quot;ObjectDataSource1_Selecting&quot; SelectMethod=&quot;GetVoteDetail&quot; \n            TypeName=&quot;BLL&quot; UpdateMethod=&quot;Update&quot; \n            OldValuesParameterFormatString=&quot;original_{0}&quot;&gt;\n            &lt;DeleteParameters&gt;\n                &lt;asp:Parameter Name=&quot;nFavorID&quot; Type=&quot;Int32&quot; /&gt;\n            &lt;/DeleteParameters&gt;\n            &lt;InsertParameters&gt;\n                &lt;asp:Parameter Name=&quot;strFavor&quot; Type=&quot;String&quot; /&gt;\n            &lt;/InsertParameters&gt;\n            &lt;SelectParameters&gt;\n                &lt;asp:Parameter Name=&quot;nVoteID&quot; Type=&quot;Int32&quot; /&gt;\n            &lt;/SelectParameters&gt;\n            &lt;UpdateParameters&gt;\n                &lt;asp:Parameter Name=&quot;nFavorID&quot; Type=&quot;Int32&quot; /&gt;\n            &lt;/UpdateParameters&gt;\n        &lt;/asp:ObjectDataSource&gt;\n    &lt;/div&gt;\n    &lt;/form&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre><h2 id=\"2-后台代码\"><a href=\"#2-后台代码\" class=\"headerlink\" title=\"2.后台代码\"></a>2.后台代码</h2><pre><code>public const int nVoteID = 2; // 设置投票ID\n\nprotected void Page_Load(object sender, EventArgs e)\n{\n    lblTitle.Text = BLL.GetVoteTitle(nVoteID);\n}\n\nprotected void btnSubmit_Click1(object sender, EventArgs e)\n{\n    int nID = Convert.ToInt32(rblVote.SelectedValue);\n\n    BLL.UpdateVoteCnt(nID);\n}\nprotected void btnLook_Click(object sender, EventArgs e)\n{\n\n}\nprotected void ObjectDataSource1_Selecting(object sender, ObjectDataSourceSelectingEventArgs e)\n{\n    // ObjectDataSource 指定的是带有参数的select方法\n    e.InputParameters[&quot;nVoteID&quot;] = nVoteID;  \n}\n</code></pre><p>注意，ObjectDataSource控件需要指定BLL中的GetVoteDetail方法作为Select方法。<br>选择了需要投票的项目之后，提交。数据库中相应的项目会改变。自己试试吧。</p>\n"},{"title":"GitHub使用方法","date":"2017-03-17T08:31:00.000Z","_content":"\n![常用命令](http://www.pythontab.com/uploadfile/2015/1224/20151224035849577.jpg)\n\n# 1. 常用配置\n\n## 1.1 设置Email\n\n    $ git config --global user.name \"your name\"\n    $ git config --global user.email \"your_email@youremail.com\"\n    \n查看结果：\n\n    $ git config user.name\n    $ git config user.email\n\n## 1.2 用vim写日志\n\n    $ git config --global core.editor vim\n\n查看结果：\n\n    $ cat ~/.git/config\n\n# 2. 配置GitHub\n\n## 2.1.首先在本地创建ssh key\n    \n    $ ssh-keygen -t rsa -C \"your_email@youremail.com\"\n \n 之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。\n\n    $ cat ~/.ssh/id_rsa.pub\n    \n回到github，进入Account Settings，左边选择SSH Keys，Add SSH Key,title随便填，粘贴key。\n\n## 2.2. 验证\n\n为了验证是否成功，在git bash下输入：\n\n    $ ssh -T git@github.com \n\n![验证](http://upload-images.jianshu.io/upload_images/145902-adc9c8f347b1c84b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n如果是第一次的会提示是否continue，输入yes就会看到：You’ve successfully authenticated, but GitHub does not provide shell access 。\n这就表示已成功连上github。\n\n![成功连接](http://img.my.csdn.net/uploads/201304/16/1366089042_1867.png)\n\n## 2.3. 上传GitHub\n\n接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们。\n\t\n\t$ git config --global user.name \"your name\"\n\t$ git config --global user.email \"your_email@youremail.com\"\n \n## 2.4. 添加远程地址\n\n\t$ git remote add origin git@github.com:yourName/yourRepo.git\n\n 后面的yourName和yourRepo表示你再github的用户名和刚才新建的仓库，加完之后进入.git，打开config，这里会多出一个remote “origin”内容，这就是刚才添加的远程地址，也可以直接修改config来配置远程地址。\n\n# 3. 提交、上传\n\n## 3.1. 在本地仓库里添加文件\n\t\n\t$ git add a.txt\n\t$ git commit -m \"first commit\"\n\t\n极简方式：\n\n    $ git add .\n    $ git commit -a\n   \n## 3.2. 上传到github：\n  \n\t$ git push -u origin master\n\n如果失败，可能是GitHub上的README.md不在本地，执行：\n\n\t$ git pull --rebase origin master # 合并\n \n之后再执行push。\n\ngit push命令会将本地仓库推送到远程服务器。git pull命令则相反。\n\n修改完代码后，使用git status可以查看文件的差别，使用git add 添加要commit的文件，也可以用git add -i来智能添加文件。之后git commit提交本次修改，git push上传到github。\n\n# 4. 常用配置\n\n## 4.1 添加fork me图标\n\n![](https://s3.amazonaws.com/github/ribbons/forkme_left_red_aa0000.png)\n\nref : <https://github.com/blog/273-github-ribbons>\n\n## Readme.md模板\n\n\n    <a href=\"https://github.com/breakerthb/\">\n    <img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"https://camo.githubusercontent.com/82b228a3648bf44fc1163ef44c62fcc60081495e/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f7265645f6161303030302e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_left_red_aa0000.png\">\n    </a>\n    \n    # Project Introduction\n    \n    XXXXX\n    \n    ![](https://github.com/breakerthb/AccessCount/blob/master/intro.png)\n    \n    # Flag\n    \n    - Test\n    \n    # Language\n    \n    - C++\n    \n    # Branch\n    \n    ## master\n    \n    A tool without UI\n    \n    ## ui\n    \n    A tool with UI","source":"_posts/GitHub-Usage.md","raw":"---\ntitle: GitHub使用方法\ndate: 2017-03-17 08:31:00\ntags:\n    - git\ncategories: Tools\n---\n\n![常用命令](http://www.pythontab.com/uploadfile/2015/1224/20151224035849577.jpg)\n\n# 1. 常用配置\n\n## 1.1 设置Email\n\n    $ git config --global user.name \"your name\"\n    $ git config --global user.email \"your_email@youremail.com\"\n    \n查看结果：\n\n    $ git config user.name\n    $ git config user.email\n\n## 1.2 用vim写日志\n\n    $ git config --global core.editor vim\n\n查看结果：\n\n    $ cat ~/.git/config\n\n# 2. 配置GitHub\n\n## 2.1.首先在本地创建ssh key\n    \n    $ ssh-keygen -t rsa -C \"your_email@youremail.com\"\n \n 之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。\n\n    $ cat ~/.ssh/id_rsa.pub\n    \n回到github，进入Account Settings，左边选择SSH Keys，Add SSH Key,title随便填，粘贴key。\n\n## 2.2. 验证\n\n为了验证是否成功，在git bash下输入：\n\n    $ ssh -T git@github.com \n\n![验证](http://upload-images.jianshu.io/upload_images/145902-adc9c8f347b1c84b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n如果是第一次的会提示是否continue，输入yes就会看到：You’ve successfully authenticated, but GitHub does not provide shell access 。\n这就表示已成功连上github。\n\n![成功连接](http://img.my.csdn.net/uploads/201304/16/1366089042_1867.png)\n\n## 2.3. 上传GitHub\n\n接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们。\n\t\n\t$ git config --global user.name \"your name\"\n\t$ git config --global user.email \"your_email@youremail.com\"\n \n## 2.4. 添加远程地址\n\n\t$ git remote add origin git@github.com:yourName/yourRepo.git\n\n 后面的yourName和yourRepo表示你再github的用户名和刚才新建的仓库，加完之后进入.git，打开config，这里会多出一个remote “origin”内容，这就是刚才添加的远程地址，也可以直接修改config来配置远程地址。\n\n# 3. 提交、上传\n\n## 3.1. 在本地仓库里添加文件\n\t\n\t$ git add a.txt\n\t$ git commit -m \"first commit\"\n\t\n极简方式：\n\n    $ git add .\n    $ git commit -a\n   \n## 3.2. 上传到github：\n  \n\t$ git push -u origin master\n\n如果失败，可能是GitHub上的README.md不在本地，执行：\n\n\t$ git pull --rebase origin master # 合并\n \n之后再执行push。\n\ngit push命令会将本地仓库推送到远程服务器。git pull命令则相反。\n\n修改完代码后，使用git status可以查看文件的差别，使用git add 添加要commit的文件，也可以用git add -i来智能添加文件。之后git commit提交本次修改，git push上传到github。\n\n# 4. 常用配置\n\n## 4.1 添加fork me图标\n\n![](https://s3.amazonaws.com/github/ribbons/forkme_left_red_aa0000.png)\n\nref : <https://github.com/blog/273-github-ribbons>\n\n## Readme.md模板\n\n\n    <a href=\"https://github.com/breakerthb/\">\n    <img style=\"position: absolute; top: 0; left: 0; border: 0;\" src=\"https://camo.githubusercontent.com/82b228a3648bf44fc1163ef44c62fcc60081495e/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f7265645f6161303030302e706e67\" alt=\"Fork me on GitHub\" data-canonical-src=\"https://s3.amazonaws.com/github/ribbons/forkme_left_red_aa0000.png\">\n    </a>\n    \n    # Project Introduction\n    \n    XXXXX\n    \n    ![](https://github.com/breakerthb/AccessCount/blob/master/intro.png)\n    \n    # Flag\n    \n    - Test\n    \n    # Language\n    \n    - C++\n    \n    # Branch\n    \n    ## master\n    \n    A tool without UI\n    \n    ## ui\n    \n    A tool with UI","slug":"GitHub-Usage","published":1,"updated":"2017-03-18T06:11:54.411Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0evfi2f000fvcful6q704jn","content":"<p><img src=\"http://www.pythontab.com/uploadfile/2015/1224/20151224035849577.jpg\" alt=\"常用命令\"></p>\n<h1 id=\"1-常用配置\"><a href=\"#1-常用配置\" class=\"headerlink\" title=\"1. 常用配置\"></a>1. 常用配置</h1><h2 id=\"1-1-设置Email\"><a href=\"#1-1-设置Email\" class=\"headerlink\" title=\"1.1 设置Email\"></a>1.1 设置Email</h2><pre><code>$ git config --global user.name &quot;your name&quot;\n$ git config --global user.email &quot;your_email@youremail.com&quot;\n</code></pre><p>查看结果：</p>\n<pre><code>$ git config user.name\n$ git config user.email\n</code></pre><h2 id=\"1-2-用vim写日志\"><a href=\"#1-2-用vim写日志\" class=\"headerlink\" title=\"1.2 用vim写日志\"></a>1.2 用vim写日志</h2><pre><code>$ git config --global core.editor vim\n</code></pre><p>查看结果：</p>\n<pre><code>$ cat ~/.git/config\n</code></pre><h1 id=\"2-配置GitHub\"><a href=\"#2-配置GitHub\" class=\"headerlink\" title=\"2. 配置GitHub\"></a>2. 配置GitHub</h1><h2 id=\"2-1-首先在本地创建ssh-key\"><a href=\"#2-1-首先在本地创建ssh-key\" class=\"headerlink\" title=\"2.1.首先在本地创建ssh key\"></a>2.1.首先在本地创建ssh key</h2><pre><code>$ ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;\n</code></pre><p> 之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。</p>\n<pre><code>$ cat ~/.ssh/id_rsa.pub\n</code></pre><p>回到github，进入Account Settings，左边选择SSH Keys，Add SSH Key,title随便填，粘贴key。</p>\n<h2 id=\"2-2-验证\"><a href=\"#2-2-验证\" class=\"headerlink\" title=\"2.2. 验证\"></a>2.2. 验证</h2><p>为了验证是否成功，在git bash下输入：</p>\n<pre><code>$ ssh -T git@github.com \n</code></pre><p><img src=\"http://upload-images.jianshu.io/upload_images/145902-adc9c8f347b1c84b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"验证\"></p>\n<p>如果是第一次的会提示是否continue，输入yes就会看到：You’ve successfully authenticated, but GitHub does not provide shell access 。<br>这就表示已成功连上github。</p>\n<p><img src=\"http://img.my.csdn.net/uploads/201304/16/1366089042_1867.png\" alt=\"成功连接\"></p>\n<h2 id=\"2-3-上传GitHub\"><a href=\"#2-3-上传GitHub\" class=\"headerlink\" title=\"2.3. 上传GitHub\"></a>2.3. 上传GitHub</h2><p>接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们。</p>\n<pre><code>$ git config --global user.name &quot;your name&quot;\n$ git config --global user.email &quot;your_email@youremail.com&quot;\n</code></pre><h2 id=\"2-4-添加远程地址\"><a href=\"#2-4-添加远程地址\" class=\"headerlink\" title=\"2.4. 添加远程地址\"></a>2.4. 添加远程地址</h2><pre><code>$ git remote add origin git@github.com:yourName/yourRepo.git\n</code></pre><p> 后面的yourName和yourRepo表示你再github的用户名和刚才新建的仓库，加完之后进入.git，打开config，这里会多出一个remote “origin”内容，这就是刚才添加的远程地址，也可以直接修改config来配置远程地址。</p>\n<h1 id=\"3-提交、上传\"><a href=\"#3-提交、上传\" class=\"headerlink\" title=\"3. 提交、上传\"></a>3. 提交、上传</h1><h2 id=\"3-1-在本地仓库里添加文件\"><a href=\"#3-1-在本地仓库里添加文件\" class=\"headerlink\" title=\"3.1. 在本地仓库里添加文件\"></a>3.1. 在本地仓库里添加文件</h2><pre><code>$ git add a.txt\n$ git commit -m &quot;first commit&quot;\n</code></pre><p>极简方式：</p>\n<pre><code>$ git add .\n$ git commit -a\n</code></pre><h2 id=\"3-2-上传到github：\"><a href=\"#3-2-上传到github：\" class=\"headerlink\" title=\"3.2. 上传到github：\"></a>3.2. 上传到github：</h2><pre><code>$ git push -u origin master\n</code></pre><p>如果失败，可能是GitHub上的README.md不在本地，执行：</p>\n<pre><code>$ git pull --rebase origin master # 合并\n</code></pre><p>之后再执行push。</p>\n<p>git push命令会将本地仓库推送到远程服务器。git pull命令则相反。</p>\n<p>修改完代码后，使用git status可以查看文件的差别，使用git add 添加要commit的文件，也可以用git add -i来智能添加文件。之后git commit提交本次修改，git push上传到github。</p>\n<h1 id=\"4-常用配置\"><a href=\"#4-常用配置\" class=\"headerlink\" title=\"4. 常用配置\"></a>4. 常用配置</h1><h2 id=\"4-1-添加fork-me图标\"><a href=\"#4-1-添加fork-me图标\" class=\"headerlink\" title=\"4.1 添加fork me图标\"></a>4.1 添加fork me图标</h2><p><img src=\"https://s3.amazonaws.com/github/ribbons/forkme_left_red_aa0000.png\" alt=\"\"></p>\n<p>ref : <a href=\"https://github.com/blog/273-github-ribbons\" target=\"_blank\" rel=\"external\">https://github.com/blog/273-github-ribbons</a></p>\n<h2 id=\"Readme-md模板\"><a href=\"#Readme-md模板\" class=\"headerlink\" title=\"Readme.md模板\"></a>Readme.md模板</h2><pre><code>&lt;a href=&quot;https://github.com/breakerthb/&quot;&gt;\n&lt;img style=&quot;position: absolute; top: 0; left: 0; border: 0;&quot; src=&quot;https://camo.githubusercontent.com/82b228a3648bf44fc1163ef44c62fcc60081495e/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f7265645f6161303030302e706e67&quot; alt=&quot;Fork me on GitHub&quot; data-canonical-src=&quot;https://s3.amazonaws.com/github/ribbons/forkme_left_red_aa0000.png&quot;&gt;\n&lt;/a&gt;\n\n# Project Introduction\n\nXXXXX\n\n![](https://github.com/breakerthb/AccessCount/blob/master/intro.png)\n\n# Flag\n\n- Test\n\n# Language\n\n- C++\n\n# Branch\n\n## master\n\nA tool without UI\n\n## ui\n\nA tool with UI\n</code></pre>","excerpt":"","more":"<p><img src=\"http://www.pythontab.com/uploadfile/2015/1224/20151224035849577.jpg\" alt=\"常用命令\"></p>\n<h1 id=\"1-常用配置\"><a href=\"#1-常用配置\" class=\"headerlink\" title=\"1. 常用配置\"></a>1. 常用配置</h1><h2 id=\"1-1-设置Email\"><a href=\"#1-1-设置Email\" class=\"headerlink\" title=\"1.1 设置Email\"></a>1.1 设置Email</h2><pre><code>$ git config --global user.name &quot;your name&quot;\n$ git config --global user.email &quot;your_email@youremail.com&quot;\n</code></pre><p>查看结果：</p>\n<pre><code>$ git config user.name\n$ git config user.email\n</code></pre><h2 id=\"1-2-用vim写日志\"><a href=\"#1-2-用vim写日志\" class=\"headerlink\" title=\"1.2 用vim写日志\"></a>1.2 用vim写日志</h2><pre><code>$ git config --global core.editor vim\n</code></pre><p>查看结果：</p>\n<pre><code>$ cat ~/.git/config\n</code></pre><h1 id=\"2-配置GitHub\"><a href=\"#2-配置GitHub\" class=\"headerlink\" title=\"2. 配置GitHub\"></a>2. 配置GitHub</h1><h2 id=\"2-1-首先在本地创建ssh-key\"><a href=\"#2-1-首先在本地创建ssh-key\" class=\"headerlink\" title=\"2.1.首先在本地创建ssh key\"></a>2.1.首先在本地创建ssh key</h2><pre><code>$ ssh-keygen -t rsa -C &quot;your_email@youremail.com&quot;\n</code></pre><p> 之后会要求确认路径和输入密码，我们这使用默认的一路回车就行。成功的话会在~/下生成.ssh文件夹，进去，打开id_rsa.pub，复制里面的key。</p>\n<pre><code>$ cat ~/.ssh/id_rsa.pub\n</code></pre><p>回到github，进入Account Settings，左边选择SSH Keys，Add SSH Key,title随便填，粘贴key。</p>\n<h2 id=\"2-2-验证\"><a href=\"#2-2-验证\" class=\"headerlink\" title=\"2.2. 验证\"></a>2.2. 验证</h2><p>为了验证是否成功，在git bash下输入：</p>\n<pre><code>$ ssh -T git@github.com \n</code></pre><p><img src=\"http://upload-images.jianshu.io/upload_images/145902-adc9c8f347b1c84b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"验证\"></p>\n<p>如果是第一次的会提示是否continue，输入yes就会看到：You’ve successfully authenticated, but GitHub does not provide shell access 。<br>这就表示已成功连上github。</p>\n<p><img src=\"http://img.my.csdn.net/uploads/201304/16/1366089042_1867.png\" alt=\"成功连接\"></p>\n<h2 id=\"2-3-上传GitHub\"><a href=\"#2-3-上传GitHub\" class=\"headerlink\" title=\"2.3. 上传GitHub\"></a>2.3. 上传GitHub</h2><p>接下来我们要做的就是把本地仓库传到github上去，在此之前还需要设置username和email，因为github每次commit都会记录他们。</p>\n<pre><code>$ git config --global user.name &quot;your name&quot;\n$ git config --global user.email &quot;your_email@youremail.com&quot;\n</code></pre><h2 id=\"2-4-添加远程地址\"><a href=\"#2-4-添加远程地址\" class=\"headerlink\" title=\"2.4. 添加远程地址\"></a>2.4. 添加远程地址</h2><pre><code>$ git remote add origin git@github.com:yourName/yourRepo.git\n</code></pre><p> 后面的yourName和yourRepo表示你再github的用户名和刚才新建的仓库，加完之后进入.git，打开config，这里会多出一个remote “origin”内容，这就是刚才添加的远程地址，也可以直接修改config来配置远程地址。</p>\n<h1 id=\"3-提交、上传\"><a href=\"#3-提交、上传\" class=\"headerlink\" title=\"3. 提交、上传\"></a>3. 提交、上传</h1><h2 id=\"3-1-在本地仓库里添加文件\"><a href=\"#3-1-在本地仓库里添加文件\" class=\"headerlink\" title=\"3.1. 在本地仓库里添加文件\"></a>3.1. 在本地仓库里添加文件</h2><pre><code>$ git add a.txt\n$ git commit -m &quot;first commit&quot;\n</code></pre><p>极简方式：</p>\n<pre><code>$ git add .\n$ git commit -a\n</code></pre><h2 id=\"3-2-上传到github：\"><a href=\"#3-2-上传到github：\" class=\"headerlink\" title=\"3.2. 上传到github：\"></a>3.2. 上传到github：</h2><pre><code>$ git push -u origin master\n</code></pre><p>如果失败，可能是GitHub上的README.md不在本地，执行：</p>\n<pre><code>$ git pull --rebase origin master # 合并\n</code></pre><p>之后再执行push。</p>\n<p>git push命令会将本地仓库推送到远程服务器。git pull命令则相反。</p>\n<p>修改完代码后，使用git status可以查看文件的差别，使用git add 添加要commit的文件，也可以用git add -i来智能添加文件。之后git commit提交本次修改，git push上传到github。</p>\n<h1 id=\"4-常用配置\"><a href=\"#4-常用配置\" class=\"headerlink\" title=\"4. 常用配置\"></a>4. 常用配置</h1><h2 id=\"4-1-添加fork-me图标\"><a href=\"#4-1-添加fork-me图标\" class=\"headerlink\" title=\"4.1 添加fork me图标\"></a>4.1 添加fork me图标</h2><p><img src=\"https://s3.amazonaws.com/github/ribbons/forkme_left_red_aa0000.png\" alt=\"\"></p>\n<p>ref : <a href=\"https://github.com/blog/273-github-ribbons\">https://github.com/blog/273-github-ribbons</a></p>\n<h2 id=\"Readme-md模板\"><a href=\"#Readme-md模板\" class=\"headerlink\" title=\"Readme.md模板\"></a>Readme.md模板</h2><pre><code>&lt;a href=&quot;https://github.com/breakerthb/&quot;&gt;\n&lt;img style=&quot;position: absolute; top: 0; left: 0; border: 0;&quot; src=&quot;https://camo.githubusercontent.com/82b228a3648bf44fc1163ef44c62fcc60081495e/68747470733a2f2f73332e616d617a6f6e6177732e636f6d2f6769746875622f726962626f6e732f666f726b6d655f6c6566745f7265645f6161303030302e706e67&quot; alt=&quot;Fork me on GitHub&quot; data-canonical-src=&quot;https://s3.amazonaws.com/github/ribbons/forkme_left_red_aa0000.png&quot;&gt;\n&lt;/a&gt;\n\n# Project Introduction\n\nXXXXX\n\n![](https://github.com/breakerthb/AccessCount/blob/master/intro.png)\n\n# Flag\n\n- Test\n\n# Language\n\n- C++\n\n# Branch\n\n## master\n\nA tool without UI\n\n## ui\n\nA tool with UI\n</code></pre>"},{"title":"CSharp连接Oracle方法","date":"2017-03-18T06:08:28.000Z","_content":"\n首先，要在本机安装Oracle为VS2010提供的访问程序。从下面路径下载：\n<http://www.oracle.com/technetwork/articles/dotnet/vs2010-oracle-dev-410461.html>\n\n安装了Oracle Client端程序后，重启VS2010.\n\n在VS2010中，引入Oracle访问库，如图：\n![VS2010下C#连接远端Oracle数据库方法](http://i2.piimg.com/612ba597c1212226.png)\n\n之后可以在程序中做如下测试：\n\n\t string strConn = \"Data Source=127.0.0.1/bxcorcl;User ID=examtitlebanktw;PassWord=bestabxcexamtitlebankrd02\";\n\t\n\t string strSQL = \"SELECT * FROM IMAGE\";\n\t\n\t OracleConnection myConnection = new OracleConnection(strConn);\n\t\n\t OracleCommand myORACCommand = myConnection.CreateCommand();\n\t\n\t myORACCommand.CommandText = strSQL;\n\t\n\t myConnection.Open();\n\t\n\t OracleDataReader myDataReader = myORACCommand.ExecuteReader();\n\t\n\t while (myDataReader.Read())\n\t {\n\t       Console.WriteLine(\"LINE: \" + myDataReader[0]);\n\t }\n\t\n\t myDataReader.Close();\n\t myConnection.Close();","source":"_posts/LinkOracle.md","raw":"---\ntitle: CSharp连接Oracle方法\ntags:\n  - CSharp\n  - Oracle\ncategories: CSharp\ndate: 2017-03-18 06:08:28\n---\n\n首先，要在本机安装Oracle为VS2010提供的访问程序。从下面路径下载：\n<http://www.oracle.com/technetwork/articles/dotnet/vs2010-oracle-dev-410461.html>\n\n安装了Oracle Client端程序后，重启VS2010.\n\n在VS2010中，引入Oracle访问库，如图：\n![VS2010下C#连接远端Oracle数据库方法](http://i2.piimg.com/612ba597c1212226.png)\n\n之后可以在程序中做如下测试：\n\n\t string strConn = \"Data Source=127.0.0.1/bxcorcl;User ID=examtitlebanktw;PassWord=bestabxcexamtitlebankrd02\";\n\t\n\t string strSQL = \"SELECT * FROM IMAGE\";\n\t\n\t OracleConnection myConnection = new OracleConnection(strConn);\n\t\n\t OracleCommand myORACCommand = myConnection.CreateCommand();\n\t\n\t myORACCommand.CommandText = strSQL;\n\t\n\t myConnection.Open();\n\t\n\t OracleDataReader myDataReader = myORACCommand.ExecuteReader();\n\t\n\t while (myDataReader.Read())\n\t {\n\t       Console.WriteLine(\"LINE: \" + myDataReader[0]);\n\t }\n\t\n\t myDataReader.Close();\n\t myConnection.Close();","slug":"LinkOracle","published":1,"updated":"2017-03-18T06:11:38.443Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0evfi2i000ivcful88l4jj3","content":"<p>首先，要在本机安装Oracle为VS2010提供的访问程序。从下面路径下载：<br><a href=\"http://www.oracle.com/technetwork/articles/dotnet/vs2010-oracle-dev-410461.html\" target=\"_blank\" rel=\"external\">http://www.oracle.com/technetwork/articles/dotnet/vs2010-oracle-dev-410461.html</a></p>\n<p>安装了Oracle Client端程序后，重启VS2010.</p>\n<p>在VS2010中，引入Oracle访问库，如图：<br><img src=\"http://i2.piimg.com/612ba597c1212226.png\" alt=\"VS2010下C#连接远端Oracle数据库方法\"></p>\n<p>之后可以在程序中做如下测试：</p>\n<pre><code>string strConn = &quot;Data Source=127.0.0.1/bxcorcl;User ID=examtitlebanktw;PassWord=bestabxcexamtitlebankrd02&quot;;\n\nstring strSQL = &quot;SELECT * FROM IMAGE&quot;;\n\nOracleConnection myConnection = new OracleConnection(strConn);\n\nOracleCommand myORACCommand = myConnection.CreateCommand();\n\nmyORACCommand.CommandText = strSQL;\n\nmyConnection.Open();\n\nOracleDataReader myDataReader = myORACCommand.ExecuteReader();\n\nwhile (myDataReader.Read())\n{\n      Console.WriteLine(&quot;LINE: &quot; + myDataReader[0]);\n}\n\nmyDataReader.Close();\nmyConnection.Close();\n</code></pre>","excerpt":"","more":"<p>首先，要在本机安装Oracle为VS2010提供的访问程序。从下面路径下载：<br><a href=\"http://www.oracle.com/technetwork/articles/dotnet/vs2010-oracle-dev-410461.html\">http://www.oracle.com/technetwork/articles/dotnet/vs2010-oracle-dev-410461.html</a></p>\n<p>安装了Oracle Client端程序后，重启VS2010.</p>\n<p>在VS2010中，引入Oracle访问库，如图：<br><img src=\"http://i2.piimg.com/612ba597c1212226.png\" alt=\"VS2010下C#连接远端Oracle数据库方法\"></p>\n<p>之后可以在程序中做如下测试：</p>\n<pre><code>string strConn = &quot;Data Source=127.0.0.1/bxcorcl;User ID=examtitlebanktw;PassWord=bestabxcexamtitlebankrd02&quot;;\n\nstring strSQL = &quot;SELECT * FROM IMAGE&quot;;\n\nOracleConnection myConnection = new OracleConnection(strConn);\n\nOracleCommand myORACCommand = myConnection.CreateCommand();\n\nmyORACCommand.CommandText = strSQL;\n\nmyConnection.Open();\n\nOracleDataReader myDataReader = myORACCommand.ExecuteReader();\n\nwhile (myDataReader.Read())\n{\n      Console.WriteLine(&quot;LINE: &quot; + myDataReader[0]);\n}\n\nmyDataReader.Close();\nmyConnection.Close();\n</code></pre>"},{"title":"ObjectDataSource数据源控件（1）手动实现","date":"2017-03-18T06:13:13.000Z","_content":"\nASP.NET中，数据源控件是所有显示控件和数据库绑定的媒介，因此相当重要。数据源控件实际上是帮助绑定动作完成数据库的增、删、改、查功能。\n与SqlDataSource相比，ObjectDataSource更适用于三层架构（UI、BLL、DAL）的开发。用户可以自行定义访问数据库接口。\nObjectDataSource控件实际上是通过一个BLL层类完成对某一个特定数据库的操作。\n\n# 1.建立三层架构\n这里，我们用DAL和BLL两个类来代表这两个层。至于UI层，自然是ASPX页面了。\n\n# 2.BLL层\n\tpublic class BLL{\n\t [DataObjectMethod(DataObjectMethodType.Insert)]\n\t    public static int Add(string strInfo)\n\t    {\n\t      DAL da = new DAL();\n\t      return da.Add(strInfo);\n\t    }\n\t\n\t    [DataObjectMethod(DataObjectMethodType.Delete)]\n\t    public static void Delete(int nID)\n\t    {\n\t      DAL da = new DAL();\n\t      da.Delete(nID)\n\t    }\n\t\n\t    [DataObjectMethod(DataObjectMethodType.Update)]\n\t    public static void Update(int nID, string strInfo)\n\t    {\n\t      DAL da = new DAL();\n\t      da.Update(nID, strInfo);\n\t    }\n\t\n\t    [DataObjectMethod(DataObjectMethodType.Select)]\n\t    public static SqlDataReader GetAll()\n\t    {\n\t        DAL da = new DAL();\n\t        return da.GetAll();\n\t    }\n\t}\n\n注意：中括号里的语句用了声明这四个函数的意义，方便后面绑定控件时指定相关方法。\n\n# 3.DAL层\n\tpublic class DAL{\n\t    public int Add(string strInfo)\n\t    {\n\t      // 连接Database, 调用Insert语句\n\t    }\n\t\n\t    public void Delete(int nID)\n\t    {\n\t      // 连接Database, 调用Delete语句\n\t    }\n\t\n\t    public void Update(int nID, string strInfo)\n\t    {\n\t      // 连接Database, 调用update语句\n\t    }\n\t\n\t    public SqlDataReader GetAll()\n\t    {\n\t      // 连接Database, 调用select语句\n\t    }\n\t}\n\n# 4.绑定ObjectDataSource控件\n\n## 1) 从工具箱中拖拽一个ObjectDataSource控件到需要的ASPX页面中\n\n## 2)配置数据源\n\n![ObjectDataSource数据源控件](http://upload-images.jianshu.io/upload_images/145902-19523683853a78ca?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 3）选择业务对象：BLL类\n\n![ObjectDataSource数据源控件](http://upload-images.jianshu.io/upload_images/145902-747944ec56309e7d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n下一步\n\n## 4）定义数据方法\n\n![ObjectDataSource数据源控件](http://upload-images.jianshu.io/upload_images/145902-5023cad227dd544a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n分别给增删改查方法指定BLL类中的方法。\n\n点击“完成”。这样一个ObjectDataSource控件就定义完成了，之后可以使用它为其他控件提供数据服务。\n","source":"_posts/ObjectDataSource-1.md","raw":"---\ntitle: ObjectDataSource数据源控件（1）手动实现\ntags:\n  - CSharp\ncategories: CSharp\ndate: 2017-03-18 06:13:13\n---\n\nASP.NET中，数据源控件是所有显示控件和数据库绑定的媒介，因此相当重要。数据源控件实际上是帮助绑定动作完成数据库的增、删、改、查功能。\n与SqlDataSource相比，ObjectDataSource更适用于三层架构（UI、BLL、DAL）的开发。用户可以自行定义访问数据库接口。\nObjectDataSource控件实际上是通过一个BLL层类完成对某一个特定数据库的操作。\n\n# 1.建立三层架构\n这里，我们用DAL和BLL两个类来代表这两个层。至于UI层，自然是ASPX页面了。\n\n# 2.BLL层\n\tpublic class BLL{\n\t [DataObjectMethod(DataObjectMethodType.Insert)]\n\t    public static int Add(string strInfo)\n\t    {\n\t      DAL da = new DAL();\n\t      return da.Add(strInfo);\n\t    }\n\t\n\t    [DataObjectMethod(DataObjectMethodType.Delete)]\n\t    public static void Delete(int nID)\n\t    {\n\t      DAL da = new DAL();\n\t      da.Delete(nID)\n\t    }\n\t\n\t    [DataObjectMethod(DataObjectMethodType.Update)]\n\t    public static void Update(int nID, string strInfo)\n\t    {\n\t      DAL da = new DAL();\n\t      da.Update(nID, strInfo);\n\t    }\n\t\n\t    [DataObjectMethod(DataObjectMethodType.Select)]\n\t    public static SqlDataReader GetAll()\n\t    {\n\t        DAL da = new DAL();\n\t        return da.GetAll();\n\t    }\n\t}\n\n注意：中括号里的语句用了声明这四个函数的意义，方便后面绑定控件时指定相关方法。\n\n# 3.DAL层\n\tpublic class DAL{\n\t    public int Add(string strInfo)\n\t    {\n\t      // 连接Database, 调用Insert语句\n\t    }\n\t\n\t    public void Delete(int nID)\n\t    {\n\t      // 连接Database, 调用Delete语句\n\t    }\n\t\n\t    public void Update(int nID, string strInfo)\n\t    {\n\t      // 连接Database, 调用update语句\n\t    }\n\t\n\t    public SqlDataReader GetAll()\n\t    {\n\t      // 连接Database, 调用select语句\n\t    }\n\t}\n\n# 4.绑定ObjectDataSource控件\n\n## 1) 从工具箱中拖拽一个ObjectDataSource控件到需要的ASPX页面中\n\n## 2)配置数据源\n\n![ObjectDataSource数据源控件](http://upload-images.jianshu.io/upload_images/145902-19523683853a78ca?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n## 3）选择业务对象：BLL类\n\n![ObjectDataSource数据源控件](http://upload-images.jianshu.io/upload_images/145902-747944ec56309e7d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n下一步\n\n## 4）定义数据方法\n\n![ObjectDataSource数据源控件](http://upload-images.jianshu.io/upload_images/145902-5023cad227dd544a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n分别给增删改查方法指定BLL类中的方法。\n\n点击“完成”。这样一个ObjectDataSource控件就定义完成了，之后可以使用它为其他控件提供数据服务。\n","slug":"ObjectDataSource-1","published":1,"updated":"2017-03-18T06:14:03.771Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0evfi2k000kvcfu5ds2333z","content":"<p>ASP.NET中，数据源控件是所有显示控件和数据库绑定的媒介，因此相当重要。数据源控件实际上是帮助绑定动作完成数据库的增、删、改、查功能。<br>与SqlDataSource相比，ObjectDataSource更适用于三层架构（UI、BLL、DAL）的开发。用户可以自行定义访问数据库接口。<br>ObjectDataSource控件实际上是通过一个BLL层类完成对某一个特定数据库的操作。</p>\n<h1 id=\"1-建立三层架构\"><a href=\"#1-建立三层架构\" class=\"headerlink\" title=\"1.建立三层架构\"></a>1.建立三层架构</h1><p>这里，我们用DAL和BLL两个类来代表这两个层。至于UI层，自然是ASPX页面了。</p>\n<h1 id=\"2-BLL层\"><a href=\"#2-BLL层\" class=\"headerlink\" title=\"2.BLL层\"></a>2.BLL层</h1><pre><code>public class BLL{\n [DataObjectMethod(DataObjectMethodType.Insert)]\n    public static int Add(string strInfo)\n    {\n      DAL da = new DAL();\n      return da.Add(strInfo);\n    }\n\n    [DataObjectMethod(DataObjectMethodType.Delete)]\n    public static void Delete(int nID)\n    {\n      DAL da = new DAL();\n      da.Delete(nID)\n    }\n\n    [DataObjectMethod(DataObjectMethodType.Update)]\n    public static void Update(int nID, string strInfo)\n    {\n      DAL da = new DAL();\n      da.Update(nID, strInfo);\n    }\n\n    [DataObjectMethod(DataObjectMethodType.Select)]\n    public static SqlDataReader GetAll()\n    {\n        DAL da = new DAL();\n        return da.GetAll();\n    }\n}\n</code></pre><p>注意：中括号里的语句用了声明这四个函数的意义，方便后面绑定控件时指定相关方法。</p>\n<h1 id=\"3-DAL层\"><a href=\"#3-DAL层\" class=\"headerlink\" title=\"3.DAL层\"></a>3.DAL层</h1><pre><code>public class DAL{\n    public int Add(string strInfo)\n    {\n      // 连接Database, 调用Insert语句\n    }\n\n    public void Delete(int nID)\n    {\n      // 连接Database, 调用Delete语句\n    }\n\n    public void Update(int nID, string strInfo)\n    {\n      // 连接Database, 调用update语句\n    }\n\n    public SqlDataReader GetAll()\n    {\n      // 连接Database, 调用select语句\n    }\n}\n</code></pre><h1 id=\"4-绑定ObjectDataSource控件\"><a href=\"#4-绑定ObjectDataSource控件\" class=\"headerlink\" title=\"4.绑定ObjectDataSource控件\"></a>4.绑定ObjectDataSource控件</h1><h2 id=\"1-从工具箱中拖拽一个ObjectDataSource控件到需要的ASPX页面中\"><a href=\"#1-从工具箱中拖拽一个ObjectDataSource控件到需要的ASPX页面中\" class=\"headerlink\" title=\"1) 从工具箱中拖拽一个ObjectDataSource控件到需要的ASPX页面中\"></a>1) 从工具箱中拖拽一个ObjectDataSource控件到需要的ASPX页面中</h2><h2 id=\"2-配置数据源\"><a href=\"#2-配置数据源\" class=\"headerlink\" title=\"2)配置数据源\"></a>2)配置数据源</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/145902-19523683853a78ca?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ObjectDataSource数据源控件\"></p>\n<h2 id=\"3）选择业务对象：BLL类\"><a href=\"#3）选择业务对象：BLL类\" class=\"headerlink\" title=\"3）选择业务对象：BLL类\"></a>3）选择业务对象：BLL类</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/145902-747944ec56309e7d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ObjectDataSource数据源控件\"></p>\n<p>下一步</p>\n<h2 id=\"4）定义数据方法\"><a href=\"#4）定义数据方法\" class=\"headerlink\" title=\"4）定义数据方法\"></a>4）定义数据方法</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/145902-5023cad227dd544a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ObjectDataSource数据源控件\"></p>\n<p>分别给增删改查方法指定BLL类中的方法。</p>\n<p>点击“完成”。这样一个ObjectDataSource控件就定义完成了，之后可以使用它为其他控件提供数据服务。</p>\n","excerpt":"","more":"<p>ASP.NET中，数据源控件是所有显示控件和数据库绑定的媒介，因此相当重要。数据源控件实际上是帮助绑定动作完成数据库的增、删、改、查功能。<br>与SqlDataSource相比，ObjectDataSource更适用于三层架构（UI、BLL、DAL）的开发。用户可以自行定义访问数据库接口。<br>ObjectDataSource控件实际上是通过一个BLL层类完成对某一个特定数据库的操作。</p>\n<h1 id=\"1-建立三层架构\"><a href=\"#1-建立三层架构\" class=\"headerlink\" title=\"1.建立三层架构\"></a>1.建立三层架构</h1><p>这里，我们用DAL和BLL两个类来代表这两个层。至于UI层，自然是ASPX页面了。</p>\n<h1 id=\"2-BLL层\"><a href=\"#2-BLL层\" class=\"headerlink\" title=\"2.BLL层\"></a>2.BLL层</h1><pre><code>public class BLL{\n [DataObjectMethod(DataObjectMethodType.Insert)]\n    public static int Add(string strInfo)\n    {\n      DAL da = new DAL();\n      return da.Add(strInfo);\n    }\n\n    [DataObjectMethod(DataObjectMethodType.Delete)]\n    public static void Delete(int nID)\n    {\n      DAL da = new DAL();\n      da.Delete(nID)\n    }\n\n    [DataObjectMethod(DataObjectMethodType.Update)]\n    public static void Update(int nID, string strInfo)\n    {\n      DAL da = new DAL();\n      da.Update(nID, strInfo);\n    }\n\n    [DataObjectMethod(DataObjectMethodType.Select)]\n    public static SqlDataReader GetAll()\n    {\n        DAL da = new DAL();\n        return da.GetAll();\n    }\n}\n</code></pre><p>注意：中括号里的语句用了声明这四个函数的意义，方便后面绑定控件时指定相关方法。</p>\n<h1 id=\"3-DAL层\"><a href=\"#3-DAL层\" class=\"headerlink\" title=\"3.DAL层\"></a>3.DAL层</h1><pre><code>public class DAL{\n    public int Add(string strInfo)\n    {\n      // 连接Database, 调用Insert语句\n    }\n\n    public void Delete(int nID)\n    {\n      // 连接Database, 调用Delete语句\n    }\n\n    public void Update(int nID, string strInfo)\n    {\n      // 连接Database, 调用update语句\n    }\n\n    public SqlDataReader GetAll()\n    {\n      // 连接Database, 调用select语句\n    }\n}\n</code></pre><h1 id=\"4-绑定ObjectDataSource控件\"><a href=\"#4-绑定ObjectDataSource控件\" class=\"headerlink\" title=\"4.绑定ObjectDataSource控件\"></a>4.绑定ObjectDataSource控件</h1><h2 id=\"1-从工具箱中拖拽一个ObjectDataSource控件到需要的ASPX页面中\"><a href=\"#1-从工具箱中拖拽一个ObjectDataSource控件到需要的ASPX页面中\" class=\"headerlink\" title=\"1) 从工具箱中拖拽一个ObjectDataSource控件到需要的ASPX页面中\"></a>1) 从工具箱中拖拽一个ObjectDataSource控件到需要的ASPX页面中</h2><h2 id=\"2-配置数据源\"><a href=\"#2-配置数据源\" class=\"headerlink\" title=\"2)配置数据源\"></a>2)配置数据源</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/145902-19523683853a78ca?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ObjectDataSource数据源控件\"></p>\n<h2 id=\"3）选择业务对象：BLL类\"><a href=\"#3）选择业务对象：BLL类\" class=\"headerlink\" title=\"3）选择业务对象：BLL类\"></a>3）选择业务对象：BLL类</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/145902-747944ec56309e7d?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ObjectDataSource数据源控件\"></p>\n<p>下一步</p>\n<h2 id=\"4）定义数据方法\"><a href=\"#4）定义数据方法\" class=\"headerlink\" title=\"4）定义数据方法\"></a>4）定义数据方法</h2><p><img src=\"http://upload-images.jianshu.io/upload_images/145902-5023cad227dd544a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ObjectDataSource数据源控件\"></p>\n<p>分别给增删改查方法指定BLL类中的方法。</p>\n<p>点击“完成”。这样一个ObjectDataSource控件就定义完成了，之后可以使用它为其他控件提供数据服务。</p>\n"},{"title":"ObjectDataSource数据源控件（2）自动实现","date":"2017-03-18T06:14:10.000Z","_content":"\nObjectDataSource可在多个页面中重复使用，这点和SqlDataSource不同。\n\n我们可以通过VS向导自动创建访问数据库的类，这样就可以省去（1）中提到的自行定义BLL层接口的动作。\n\n设置步骤如下：\n\n# 一，TableAdapter控件\n\n1.“添加新项”中选择“数据集”\n \n![ObjectDataSource数据源控件（2）自动实现](http://upload-images.jianshu.io/upload_images/145902-eae44f2c4c6bd344?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n之后点击添加按钮。\n\n2.打开该数据集的设计界面，在工具箱中拖入TableAdapter控件\n\n![ObjectDataSource数据源控件（2）自动实现](http://upload-images.jianshu.io/upload_images/145902-32ad87184012e6e0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n3.接着会自动弹出“TableAdapter配置向导”，选择连接字符串，点“下一步”\n注意：若没有现成的数据链接供选择，可以点击“新建连接”按钮通过新建向导来创建。这里不具体介绍了。\n\n![ObjectDataSource数据源控件（2）自动实现](http://upload-images.jianshu.io/upload_images/145902-8dea8f15681442f8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n4.选择\"使用SQL语句\"，点“下一步”\n\n![ObjectDataSource数据源控件（2）自动实现](http://upload-images.jianshu.io/upload_images/145902-5e2f8db1e8dfea01?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n5.点击“选择查询生成器”-> 选择表 -> 所有列(*) -> 点击“确定”\n\n![ObjectDataSource数据源控件（2）自动实现](http://upload-images.jianshu.io/upload_images/145902-3bc4b58fe0bbbefe?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n6.点击“高级选项” -> “生成Insert，Update，Delete语句” -> “确定”\n\n![ObjectDataSource数据源控件（2）自动实现](http://upload-images.jianshu.io/upload_images/145902-bdc0e19383c96926?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n7.完成\n重新编译一下网站。\n\n# 二，验证ObjectDataSource\n\n1.新建网页ObjectDataSourceDemo.aspx -> 把ObjectDataSource拖入设计界面 -> 配置数据源 -> 选择业务对象（刚刚建的DataSet类） -> 下一步 -> 完成\n\n2.拖入GridView控件 -> 选择数据源 ->ObjectDataSource1\n\n表中的数据就能在GrideView控件中正确显示了。\n\n![ObjectDataSource数据源控件（2）自动实现](http://s3.sinaimg.cn/mw690/6849d1c2g0a031d779442&690)\n\n4.选择\"使用SQL语句\"，点“下一步”\n\n![ObjectDataSource数据源控件（2）自动实现](http://s7.sinaimg.cn/mw690/6849d1c2gdcd1d29b78d6&690)\n\n5.点击“选择查询生成器”-> 选择表 -> 所有列(*) -> 点击“确定”\n\n![ObjectDataSource数据源控件（2）自动实现](http://s11.sinaimg.cn/mw690/6849d1c2gdcd1e351f53a&690)\n\n6.点击“高级选项” -> “生成Insert，Update，Delete语句” -> “确定”\n\n![ObjectDataSource数据源控件（2）自动实现](http://s6.sinaimg.cn/mw690/6849d1c2gdcd1ed970d85&690)\n\n7.完成\n重新编译一下网站。\n\n# 二，验证ObjectDataSource\n\n1.新建网页ObjectDataSourceDemo.aspx -> 把ObjectDataSource拖入设计界面 -> 配置数据源 -> 选择业务对象（刚刚建的DataSet类） -> 下一步 -> 完成\n\n2.拖入GridView控件 -> 选择数据源 ->ObjectDataSource1\n\n表中的数据就能在GrideView控件中正确显示了。","source":"_posts/ObjectDataSource-2.md","raw":"---\ntitle: ObjectDataSource数据源控件（2）自动实现\ntags:\n  - None\ncategories: Nome\ndate: 2017-03-18 06:14:10\n---\n\nObjectDataSource可在多个页面中重复使用，这点和SqlDataSource不同。\n\n我们可以通过VS向导自动创建访问数据库的类，这样就可以省去（1）中提到的自行定义BLL层接口的动作。\n\n设置步骤如下：\n\n# 一，TableAdapter控件\n\n1.“添加新项”中选择“数据集”\n \n![ObjectDataSource数据源控件（2）自动实现](http://upload-images.jianshu.io/upload_images/145902-eae44f2c4c6bd344?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n之后点击添加按钮。\n\n2.打开该数据集的设计界面，在工具箱中拖入TableAdapter控件\n\n![ObjectDataSource数据源控件（2）自动实现](http://upload-images.jianshu.io/upload_images/145902-32ad87184012e6e0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n3.接着会自动弹出“TableAdapter配置向导”，选择连接字符串，点“下一步”\n注意：若没有现成的数据链接供选择，可以点击“新建连接”按钮通过新建向导来创建。这里不具体介绍了。\n\n![ObjectDataSource数据源控件（2）自动实现](http://upload-images.jianshu.io/upload_images/145902-8dea8f15681442f8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n4.选择\"使用SQL语句\"，点“下一步”\n\n![ObjectDataSource数据源控件（2）自动实现](http://upload-images.jianshu.io/upload_images/145902-5e2f8db1e8dfea01?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n5.点击“选择查询生成器”-> 选择表 -> 所有列(*) -> 点击“确定”\n\n![ObjectDataSource数据源控件（2）自动实现](http://upload-images.jianshu.io/upload_images/145902-3bc4b58fe0bbbefe?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n6.点击“高级选项” -> “生成Insert，Update，Delete语句” -> “确定”\n\n![ObjectDataSource数据源控件（2）自动实现](http://upload-images.jianshu.io/upload_images/145902-bdc0e19383c96926?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240)\n\n7.完成\n重新编译一下网站。\n\n# 二，验证ObjectDataSource\n\n1.新建网页ObjectDataSourceDemo.aspx -> 把ObjectDataSource拖入设计界面 -> 配置数据源 -> 选择业务对象（刚刚建的DataSet类） -> 下一步 -> 完成\n\n2.拖入GridView控件 -> 选择数据源 ->ObjectDataSource1\n\n表中的数据就能在GrideView控件中正确显示了。\n\n![ObjectDataSource数据源控件（2）自动实现](http://s3.sinaimg.cn/mw690/6849d1c2g0a031d779442&690)\n\n4.选择\"使用SQL语句\"，点“下一步”\n\n![ObjectDataSource数据源控件（2）自动实现](http://s7.sinaimg.cn/mw690/6849d1c2gdcd1d29b78d6&690)\n\n5.点击“选择查询生成器”-> 选择表 -> 所有列(*) -> 点击“确定”\n\n![ObjectDataSource数据源控件（2）自动实现](http://s11.sinaimg.cn/mw690/6849d1c2gdcd1e351f53a&690)\n\n6.点击“高级选项” -> “生成Insert，Update，Delete语句” -> “确定”\n\n![ObjectDataSource数据源控件（2）自动实现](http://s6.sinaimg.cn/mw690/6849d1c2gdcd1ed970d85&690)\n\n7.完成\n重新编译一下网站。\n\n# 二，验证ObjectDataSource\n\n1.新建网页ObjectDataSourceDemo.aspx -> 把ObjectDataSource拖入设计界面 -> 配置数据源 -> 选择业务对象（刚刚建的DataSet类） -> 下一步 -> 完成\n\n2.拖入GridView控件 -> 选择数据源 ->ObjectDataSource1\n\n表中的数据就能在GrideView控件中正确显示了。","slug":"ObjectDataSource-2","published":1,"updated":"2017-03-18T06:14:51.015Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0evfi2o000ovcfuldhm9jht","content":"<p>ObjectDataSource可在多个页面中重复使用，这点和SqlDataSource不同。</p>\n<p>我们可以通过VS向导自动创建访问数据库的类，这样就可以省去（1）中提到的自行定义BLL层接口的动作。</p>\n<p>设置步骤如下：</p>\n<h1 id=\"一，TableAdapter控件\"><a href=\"#一，TableAdapter控件\" class=\"headerlink\" title=\"一，TableAdapter控件\"></a>一，TableAdapter控件</h1><p>1.“添加新项”中选择“数据集”</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-eae44f2c4c6bd344?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ObjectDataSource数据源控件（2）自动实现\"></p>\n<p>之后点击添加按钮。</p>\n<p>2.打开该数据集的设计界面，在工具箱中拖入TableAdapter控件</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-32ad87184012e6e0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ObjectDataSource数据源控件（2）自动实现\"></p>\n<p>3.接着会自动弹出“TableAdapter配置向导”，选择连接字符串，点“下一步”<br>注意：若没有现成的数据链接供选择，可以点击“新建连接”按钮通过新建向导来创建。这里不具体介绍了。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-8dea8f15681442f8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ObjectDataSource数据源控件（2）自动实现\"></p>\n<p>4.选择”使用SQL语句”，点“下一步”</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-5e2f8db1e8dfea01?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ObjectDataSource数据源控件（2）自动实现\"></p>\n<p>5.点击“选择查询生成器”-&gt; 选择表 -&gt; 所有列(*) -&gt; 点击“确定”</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-3bc4b58fe0bbbefe?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ObjectDataSource数据源控件（2）自动实现\"></p>\n<p>6.点击“高级选项” -&gt; “生成Insert，Update，Delete语句” -&gt; “确定”</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-bdc0e19383c96926?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ObjectDataSource数据源控件（2）自动实现\"></p>\n<p>7.完成<br>重新编译一下网站。</p>\n<h1 id=\"二，验证ObjectDataSource\"><a href=\"#二，验证ObjectDataSource\" class=\"headerlink\" title=\"二，验证ObjectDataSource\"></a>二，验证ObjectDataSource</h1><p>1.新建网页ObjectDataSourceDemo.aspx -&gt; 把ObjectDataSource拖入设计界面 -&gt; 配置数据源 -&gt; 选择业务对象（刚刚建的DataSet类） -&gt; 下一步 -&gt; 完成</p>\n<p>2.拖入GridView控件 -&gt; 选择数据源 -&gt;ObjectDataSource1</p>\n<p>表中的数据就能在GrideView控件中正确显示了。</p>\n<p><img src=\"http://s3.sinaimg.cn/mw690/6849d1c2g0a031d779442&amp;690\" alt=\"ObjectDataSource数据源控件（2）自动实现\"></p>\n<p>4.选择”使用SQL语句”，点“下一步”</p>\n<p><img src=\"http://s7.sinaimg.cn/mw690/6849d1c2gdcd1d29b78d6&amp;690\" alt=\"ObjectDataSource数据源控件（2）自动实现\"></p>\n<p>5.点击“选择查询生成器”-&gt; 选择表 -&gt; 所有列(*) -&gt; 点击“确定”</p>\n<p><img src=\"http://s11.sinaimg.cn/mw690/6849d1c2gdcd1e351f53a&amp;690\" alt=\"ObjectDataSource数据源控件（2）自动实现\"></p>\n<p>6.点击“高级选项” -&gt; “生成Insert，Update，Delete语句” -&gt; “确定”</p>\n<p><img src=\"http://s6.sinaimg.cn/mw690/6849d1c2gdcd1ed970d85&amp;690\" alt=\"ObjectDataSource数据源控件（2）自动实现\"></p>\n<p>7.完成<br>重新编译一下网站。</p>\n<h1 id=\"二，验证ObjectDataSource-1\"><a href=\"#二，验证ObjectDataSource-1\" class=\"headerlink\" title=\"二，验证ObjectDataSource\"></a>二，验证ObjectDataSource</h1><p>1.新建网页ObjectDataSourceDemo.aspx -&gt; 把ObjectDataSource拖入设计界面 -&gt; 配置数据源 -&gt; 选择业务对象（刚刚建的DataSet类） -&gt; 下一步 -&gt; 完成</p>\n<p>2.拖入GridView控件 -&gt; 选择数据源 -&gt;ObjectDataSource1</p>\n<p>表中的数据就能在GrideView控件中正确显示了。</p>\n","excerpt":"","more":"<p>ObjectDataSource可在多个页面中重复使用，这点和SqlDataSource不同。</p>\n<p>我们可以通过VS向导自动创建访问数据库的类，这样就可以省去（1）中提到的自行定义BLL层接口的动作。</p>\n<p>设置步骤如下：</p>\n<h1 id=\"一，TableAdapter控件\"><a href=\"#一，TableAdapter控件\" class=\"headerlink\" title=\"一，TableAdapter控件\"></a>一，TableAdapter控件</h1><p>1.“添加新项”中选择“数据集”</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-eae44f2c4c6bd344?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ObjectDataSource数据源控件（2）自动实现\"></p>\n<p>之后点击添加按钮。</p>\n<p>2.打开该数据集的设计界面，在工具箱中拖入TableAdapter控件</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-32ad87184012e6e0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ObjectDataSource数据源控件（2）自动实现\"></p>\n<p>3.接着会自动弹出“TableAdapter配置向导”，选择连接字符串，点“下一步”<br>注意：若没有现成的数据链接供选择，可以点击“新建连接”按钮通过新建向导来创建。这里不具体介绍了。</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-8dea8f15681442f8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ObjectDataSource数据源控件（2）自动实现\"></p>\n<p>4.选择”使用SQL语句”，点“下一步”</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-5e2f8db1e8dfea01?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ObjectDataSource数据源控件（2）自动实现\"></p>\n<p>5.点击“选择查询生成器”-&gt; 选择表 -&gt; 所有列(*) -&gt; 点击“确定”</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-3bc4b58fe0bbbefe?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ObjectDataSource数据源控件（2）自动实现\"></p>\n<p>6.点击“高级选项” -&gt; “生成Insert，Update，Delete语句” -&gt; “确定”</p>\n<p><img src=\"http://upload-images.jianshu.io/upload_images/145902-bdc0e19383c96926?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240\" alt=\"ObjectDataSource数据源控件（2）自动实现\"></p>\n<p>7.完成<br>重新编译一下网站。</p>\n<h1 id=\"二，验证ObjectDataSource\"><a href=\"#二，验证ObjectDataSource\" class=\"headerlink\" title=\"二，验证ObjectDataSource\"></a>二，验证ObjectDataSource</h1><p>1.新建网页ObjectDataSourceDemo.aspx -&gt; 把ObjectDataSource拖入设计界面 -&gt; 配置数据源 -&gt; 选择业务对象（刚刚建的DataSet类） -&gt; 下一步 -&gt; 完成</p>\n<p>2.拖入GridView控件 -&gt; 选择数据源 -&gt;ObjectDataSource1</p>\n<p>表中的数据就能在GrideView控件中正确显示了。</p>\n<p><img src=\"http://s3.sinaimg.cn/mw690/6849d1c2g0a031d779442&amp;690\" alt=\"ObjectDataSource数据源控件（2）自动实现\"></p>\n<p>4.选择”使用SQL语句”，点“下一步”</p>\n<p><img src=\"http://s7.sinaimg.cn/mw690/6849d1c2gdcd1d29b78d6&amp;690\" alt=\"ObjectDataSource数据源控件（2）自动实现\"></p>\n<p>5.点击“选择查询生成器”-&gt; 选择表 -&gt; 所有列(*) -&gt; 点击“确定”</p>\n<p><img src=\"http://s11.sinaimg.cn/mw690/6849d1c2gdcd1e351f53a&amp;690\" alt=\"ObjectDataSource数据源控件（2）自动实现\"></p>\n<p>6.点击“高级选项” -&gt; “生成Insert，Update，Delete语句” -&gt; “确定”</p>\n<p><img src=\"http://s6.sinaimg.cn/mw690/6849d1c2gdcd1ed970d85&amp;690\" alt=\"ObjectDataSource数据源控件（2）自动实现\"></p>\n<p>7.完成<br>重新编译一下网站。</p>\n<h1 id=\"二，验证ObjectDataSource-1\"><a href=\"#二，验证ObjectDataSource-1\" class=\"headerlink\" title=\"二，验证ObjectDataSource\"></a>二，验证ObjectDataSource</h1><p>1.新建网页ObjectDataSourceDemo.aspx -&gt; 把ObjectDataSource拖入设计界面 -&gt; 配置数据源 -&gt; 选择业务对象（刚刚建的DataSet类） -&gt; 下一步 -&gt; 完成</p>\n<p>2.拖入GridView控件 -&gt; 选择数据源 -&gt;ObjectDataSource1</p>\n<p>表中的数据就能在GrideView控件中正确显示了。</p>\n"},{"title":"SqlHelper.cs使用方法","date":"2017-03-18T06:09:56.000Z","_content":"\n传说中，微软有一个专为.NET提供的数据库访问类。之前也见过很多版本，大多是经过网友修改过的。我在官网上貌似也没找到专门的下载链接，应该是从PetShop一类的Demo工程中得到的。于是过来发一个能找到的相对原汁原味的版本，仅供参考。\n下载路径：<http://www.kuaipan.cn/file/id_61213523170038890.htm>\n带中文注释的版本网上也有很多，有兴趣的可以自己下载。\n\n下面说说如何使用这个类进行简单的增删改查。我们依然使用之前案例中创建的数据库进行实验。\n<http://blog.sina.com.cn/s/blog_6849d1c201017mo7.html>\n\n首先，我们要定义链接字符串和连接对象：\n\n\t// 连接字符串\n\tstring strConn = \"Initial Catalog='数据库名称';Server='127.0.0.1,1433';User ID='sa';Password='XXXXXX';Persist Security Info=True\";\n\t// SQL 连接对象\n\tSqlConnection Connection = new SqlConnection(strConn);\n\n这里不对连接字符串做更多解释了。\n\n# 一，增加新纪录\n\n\tstring strSQL = \"insert into TSchool values('TEST','')\";\n        SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, strSQL);\n\n插入成功。\n这里我们调用了这个接口：\n\n\tpublic static int ExecuteNonQuery(string connectionString, // 连接字符串\n\t  CommandType commandType, // 命令类型，CommandType.Text表示传入的参数是SQL语句\n\t  string commandText // SQL语句\n\t )\n\n返回值是被修改的记录个数。\n\n# 二，删除记录\n\n\tstring strSQL = \"delete from TSchool where Id=25\";\n    SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, strSQL);\n\n调用同样的方法，只要会写SQL语句，完全没有难度啊。\n\n# 三，修改记录\n\n\tstring strSQL = \"update TSchool set Name=123 where Id=26\";\n\tSqlHelper.ExecuteNonQuery(strConn, CommandType.Text, strSQL);\n\n依然只是SQL的变化。\n\n# 四，查找记录\n  \n\tstring strSQL = \"select * from TSchool\";\n\tSqlDataReader read = SqlHelper.ExecuteReader(strConn, CommandType.Text, strSQL);\n\n\twhile (read.Read())\n\t{\n\t    string str0 = read[0].ToString();\n\t    string str1 = read[1].ToString();\n\t    Console.WriteLine(\"{0}__{1}\", str0, str1);\n\t}\n\n这里调用了另外一个方法：\n\n\tpublic static SqlDataReader ExecuteReader(string connectionString, \n\t  CommandType commandType, \n\t    string commandText\n\t)\n\n参数和之前的ExecuteNonQuery相同，只不过返回值是一个SqlDataReader对象，用来获得结果集。\n\nOK，就是这么简单。如有问题，欢迎提出探讨。","source":"_posts/SqlHelperOperate.md","raw":"---\ntitle: SqlHelper.cs使用方法\ntags:\n  - CSharp\ncategories: CSharp\ndate: 2017-03-18 06:09:56\n---\n\n传说中，微软有一个专为.NET提供的数据库访问类。之前也见过很多版本，大多是经过网友修改过的。我在官网上貌似也没找到专门的下载链接，应该是从PetShop一类的Demo工程中得到的。于是过来发一个能找到的相对原汁原味的版本，仅供参考。\n下载路径：<http://www.kuaipan.cn/file/id_61213523170038890.htm>\n带中文注释的版本网上也有很多，有兴趣的可以自己下载。\n\n下面说说如何使用这个类进行简单的增删改查。我们依然使用之前案例中创建的数据库进行实验。\n<http://blog.sina.com.cn/s/blog_6849d1c201017mo7.html>\n\n首先，我们要定义链接字符串和连接对象：\n\n\t// 连接字符串\n\tstring strConn = \"Initial Catalog='数据库名称';Server='127.0.0.1,1433';User ID='sa';Password='XXXXXX';Persist Security Info=True\";\n\t// SQL 连接对象\n\tSqlConnection Connection = new SqlConnection(strConn);\n\n这里不对连接字符串做更多解释了。\n\n# 一，增加新纪录\n\n\tstring strSQL = \"insert into TSchool values('TEST','')\";\n        SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, strSQL);\n\n插入成功。\n这里我们调用了这个接口：\n\n\tpublic static int ExecuteNonQuery(string connectionString, // 连接字符串\n\t  CommandType commandType, // 命令类型，CommandType.Text表示传入的参数是SQL语句\n\t  string commandText // SQL语句\n\t )\n\n返回值是被修改的记录个数。\n\n# 二，删除记录\n\n\tstring strSQL = \"delete from TSchool where Id=25\";\n    SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, strSQL);\n\n调用同样的方法，只要会写SQL语句，完全没有难度啊。\n\n# 三，修改记录\n\n\tstring strSQL = \"update TSchool set Name=123 where Id=26\";\n\tSqlHelper.ExecuteNonQuery(strConn, CommandType.Text, strSQL);\n\n依然只是SQL的变化。\n\n# 四，查找记录\n  \n\tstring strSQL = \"select * from TSchool\";\n\tSqlDataReader read = SqlHelper.ExecuteReader(strConn, CommandType.Text, strSQL);\n\n\twhile (read.Read())\n\t{\n\t    string str0 = read[0].ToString();\n\t    string str1 = read[1].ToString();\n\t    Console.WriteLine(\"{0}__{1}\", str0, str1);\n\t}\n\n这里调用了另外一个方法：\n\n\tpublic static SqlDataReader ExecuteReader(string connectionString, \n\t  CommandType commandType, \n\t    string commandText\n\t)\n\n参数和之前的ExecuteNonQuery相同，只不过返回值是一个SqlDataReader对象，用来获得结果集。\n\nOK，就是这么简单。如有问题，欢迎提出探讨。","slug":"SqlHelperOperate","published":1,"updated":"2017-03-18T06:11:21.491Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0evfi2r000rvcfuz0250eli","content":"<p>传说中，微软有一个专为.NET提供的数据库访问类。之前也见过很多版本，大多是经过网友修改过的。我在官网上貌似也没找到专门的下载链接，应该是从PetShop一类的Demo工程中得到的。于是过来发一个能找到的相对原汁原味的版本，仅供参考。<br>下载路径：<a href=\"http://www.kuaipan.cn/file/id_61213523170038890.htm\" target=\"_blank\" rel=\"external\">http://www.kuaipan.cn/file/id_61213523170038890.htm</a><br>带中文注释的版本网上也有很多，有兴趣的可以自己下载。</p>\n<p>下面说说如何使用这个类进行简单的增删改查。我们依然使用之前案例中创建的数据库进行实验。<br><a href=\"http://blog.sina.com.cn/s/blog_6849d1c201017mo7.html\" target=\"_blank\" rel=\"external\">http://blog.sina.com.cn/s/blog_6849d1c201017mo7.html</a></p>\n<p>首先，我们要定义链接字符串和连接对象：</p>\n<pre><code>// 连接字符串\nstring strConn = &quot;Initial Catalog=&apos;数据库名称&apos;;Server=&apos;127.0.0.1,1433&apos;;User ID=&apos;sa&apos;;Password=&apos;XXXXXX&apos;;Persist Security Info=True&quot;;\n// SQL 连接对象\nSqlConnection Connection = new SqlConnection(strConn);\n</code></pre><p>这里不对连接字符串做更多解释了。</p>\n<h1 id=\"一，增加新纪录\"><a href=\"#一，增加新纪录\" class=\"headerlink\" title=\"一，增加新纪录\"></a>一，增加新纪录</h1><pre><code>string strSQL = &quot;insert into TSchool values(&apos;TEST&apos;,&apos;&apos;)&quot;;\n    SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, strSQL);\n</code></pre><p>插入成功。<br>这里我们调用了这个接口：</p>\n<pre><code>public static int ExecuteNonQuery(string connectionString, // 连接字符串\n  CommandType commandType, // 命令类型，CommandType.Text表示传入的参数是SQL语句\n  string commandText // SQL语句\n )\n</code></pre><p>返回值是被修改的记录个数。</p>\n<h1 id=\"二，删除记录\"><a href=\"#二，删除记录\" class=\"headerlink\" title=\"二，删除记录\"></a>二，删除记录</h1><pre><code>string strSQL = &quot;delete from TSchool where Id=25&quot;;\nSqlHelper.ExecuteNonQuery(strConn, CommandType.Text, strSQL);\n</code></pre><p>调用同样的方法，只要会写SQL语句，完全没有难度啊。</p>\n<h1 id=\"三，修改记录\"><a href=\"#三，修改记录\" class=\"headerlink\" title=\"三，修改记录\"></a>三，修改记录</h1><pre><code>string strSQL = &quot;update TSchool set Name=123 where Id=26&quot;;\nSqlHelper.ExecuteNonQuery(strConn, CommandType.Text, strSQL);\n</code></pre><p>依然只是SQL的变化。</p>\n<h1 id=\"四，查找记录\"><a href=\"#四，查找记录\" class=\"headerlink\" title=\"四，查找记录\"></a>四，查找记录</h1><pre><code>string strSQL = &quot;select * from TSchool&quot;;\nSqlDataReader read = SqlHelper.ExecuteReader(strConn, CommandType.Text, strSQL);\n\nwhile (read.Read())\n{\n    string str0 = read[0].ToString();\n    string str1 = read[1].ToString();\n    Console.WriteLine(&quot;{0}__{1}&quot;, str0, str1);\n}\n</code></pre><p>这里调用了另外一个方法：</p>\n<pre><code>public static SqlDataReader ExecuteReader(string connectionString, \n  CommandType commandType, \n    string commandText\n)\n</code></pre><p>参数和之前的ExecuteNonQuery相同，只不过返回值是一个SqlDataReader对象，用来获得结果集。</p>\n<p>OK，就是这么简单。如有问题，欢迎提出探讨。</p>\n","excerpt":"","more":"<p>传说中，微软有一个专为.NET提供的数据库访问类。之前也见过很多版本，大多是经过网友修改过的。我在官网上貌似也没找到专门的下载链接，应该是从PetShop一类的Demo工程中得到的。于是过来发一个能找到的相对原汁原味的版本，仅供参考。<br>下载路径：<a href=\"http://www.kuaipan.cn/file/id_61213523170038890.htm\">http://www.kuaipan.cn/file/id_61213523170038890.htm</a><br>带中文注释的版本网上也有很多，有兴趣的可以自己下载。</p>\n<p>下面说说如何使用这个类进行简单的增删改查。我们依然使用之前案例中创建的数据库进行实验。<br><a href=\"http://blog.sina.com.cn/s/blog_6849d1c201017mo7.html\">http://blog.sina.com.cn/s/blog_6849d1c201017mo7.html</a></p>\n<p>首先，我们要定义链接字符串和连接对象：</p>\n<pre><code>// 连接字符串\nstring strConn = &quot;Initial Catalog=&apos;数据库名称&apos;;Server=&apos;127.0.0.1,1433&apos;;User ID=&apos;sa&apos;;Password=&apos;XXXXXX&apos;;Persist Security Info=True&quot;;\n// SQL 连接对象\nSqlConnection Connection = new SqlConnection(strConn);\n</code></pre><p>这里不对连接字符串做更多解释了。</p>\n<h1 id=\"一，增加新纪录\"><a href=\"#一，增加新纪录\" class=\"headerlink\" title=\"一，增加新纪录\"></a>一，增加新纪录</h1><pre><code>string strSQL = &quot;insert into TSchool values(&apos;TEST&apos;,&apos;&apos;)&quot;;\n    SqlHelper.ExecuteNonQuery(strConn, CommandType.Text, strSQL);\n</code></pre><p>插入成功。<br>这里我们调用了这个接口：</p>\n<pre><code>public static int ExecuteNonQuery(string connectionString, // 连接字符串\n  CommandType commandType, // 命令类型，CommandType.Text表示传入的参数是SQL语句\n  string commandText // SQL语句\n )\n</code></pre><p>返回值是被修改的记录个数。</p>\n<h1 id=\"二，删除记录\"><a href=\"#二，删除记录\" class=\"headerlink\" title=\"二，删除记录\"></a>二，删除记录</h1><pre><code>string strSQL = &quot;delete from TSchool where Id=25&quot;;\nSqlHelper.ExecuteNonQuery(strConn, CommandType.Text, strSQL);\n</code></pre><p>调用同样的方法，只要会写SQL语句，完全没有难度啊。</p>\n<h1 id=\"三，修改记录\"><a href=\"#三，修改记录\" class=\"headerlink\" title=\"三，修改记录\"></a>三，修改记录</h1><pre><code>string strSQL = &quot;update TSchool set Name=123 where Id=26&quot;;\nSqlHelper.ExecuteNonQuery(strConn, CommandType.Text, strSQL);\n</code></pre><p>依然只是SQL的变化。</p>\n<h1 id=\"四，查找记录\"><a href=\"#四，查找记录\" class=\"headerlink\" title=\"四，查找记录\"></a>四，查找记录</h1><pre><code>string strSQL = &quot;select * from TSchool&quot;;\nSqlDataReader read = SqlHelper.ExecuteReader(strConn, CommandType.Text, strSQL);\n\nwhile (read.Read())\n{\n    string str0 = read[0].ToString();\n    string str1 = read[1].ToString();\n    Console.WriteLine(&quot;{0}__{1}&quot;, str0, str1);\n}\n</code></pre><p>这里调用了另外一个方法：</p>\n<pre><code>public static SqlDataReader ExecuteReader(string connectionString, \n  CommandType commandType, \n    string commandText\n)\n</code></pre><p>参数和之前的ExecuteNonQuery相同，只不过返回值是一个SqlDataReader对象，用来获得结果集。</p>\n<p>OK，就是这么简单。如有问题，欢迎提出探讨。</p>\n"},{"title":"SqlHelper调用存储过程的方法","date":"2017-03-18T06:19:06.000Z","_content":"\nASP.NET中调用存储过程经常遇到这样那样的问题，特别是在有返回值参数的情况下。其实，并没有想象中的复杂。我们以之前博文中定义的存储过程为例。\n\n<http://blog.sina.com.cn/s/blog_6849d1c201017mo7.html>\n\nSqlHelper下载路径：<http://www.kuaipan.cn/file/id_61213523170038890.htm>\n\n首先是定义链接字符串：\n\n\t// 连接字符串\n\tstring strConn = \"Initial Catalog='Students';Server='127.0.0.1,1433';User ID='sa';Password='XXXXXX';Persist Security Info=True\";\n\t// SQL 连接对象\n\tSqlConnection Connection = new SqlConnection(strConn);\n\n# 一，插入新纪录存储过程\n\n    int ret = 0;\n    SqlParameter[] arParms = new SqlParameter[2];\n    \n    // @Name Input Parameter\n    // NChar 类型需要指定Size\n    arParms[0] = new SqlParameter(\"@Name\", SqlDbType.NChar, 50);\n    arParms[0].Value = \"HHEE\";\n\n    // @NewID Output Parameter \n    // 输出参数不需要赋值\n    arParms[1] = new SqlParameter(\"@NewID\", SqlDbType.Int);\n    arParms[1].Direction = ParameterDirection.Output;\n\n    SqlHelper.ExecuteNonQuery(strConn, CommandType.StoredProcedure, \"proc_school_insert\", arParms);\n\n    ret = Int32.Parse(arParms[1].Value.ToString());\n\n# 二，删除记录存储过程\n    SqlHelper.ExecuteNonQuery(strConn, CommandType.StoredProcedure, \"proc_school_del\",\n                new SqlParameter(\"@ID\", 4));\n\n# 三，修改记录存储过程\n    SqlParameter[] para = { new SqlParameter(\"@ID\", 5), \n                                    new SqlParameter(\"@Name\", \"1234\") };\n    SqlHelper.ExecuteNonQuery(strConn, CommandType.StoredProcedure, \"proc_school_update\",\n                para);\n\n# 四，查询存储过程\n    SqlDataReader read = SqlHelper.ExecuteReader(strConn, CommandType.StoredProcedure, \"proc_school_select\", new SqlParameter(\"@ID\", 5));\n\n    while (read.Read())\n    {\n        string str0 = read[0].ToString();\n        string str1 = read[1].ToString();\n    }\n\nPS：对于调用存储过程时参数的传递方法，其实比较灵活。有兴趣的可以自己多多实验。","source":"_posts/SqlHelperProcess.md","raw":"---\ntitle: SqlHelper调用存储过程的方法\ntags:\n  - CSharp\ncategories: CSharp\ndate: 2017-03-18 06:19:06\n---\n\nASP.NET中调用存储过程经常遇到这样那样的问题，特别是在有返回值参数的情况下。其实，并没有想象中的复杂。我们以之前博文中定义的存储过程为例。\n\n<http://blog.sina.com.cn/s/blog_6849d1c201017mo7.html>\n\nSqlHelper下载路径：<http://www.kuaipan.cn/file/id_61213523170038890.htm>\n\n首先是定义链接字符串：\n\n\t// 连接字符串\n\tstring strConn = \"Initial Catalog='Students';Server='127.0.0.1,1433';User ID='sa';Password='XXXXXX';Persist Security Info=True\";\n\t// SQL 连接对象\n\tSqlConnection Connection = new SqlConnection(strConn);\n\n# 一，插入新纪录存储过程\n\n    int ret = 0;\n    SqlParameter[] arParms = new SqlParameter[2];\n    \n    // @Name Input Parameter\n    // NChar 类型需要指定Size\n    arParms[0] = new SqlParameter(\"@Name\", SqlDbType.NChar, 50);\n    arParms[0].Value = \"HHEE\";\n\n    // @NewID Output Parameter \n    // 输出参数不需要赋值\n    arParms[1] = new SqlParameter(\"@NewID\", SqlDbType.Int);\n    arParms[1].Direction = ParameterDirection.Output;\n\n    SqlHelper.ExecuteNonQuery(strConn, CommandType.StoredProcedure, \"proc_school_insert\", arParms);\n\n    ret = Int32.Parse(arParms[1].Value.ToString());\n\n# 二，删除记录存储过程\n    SqlHelper.ExecuteNonQuery(strConn, CommandType.StoredProcedure, \"proc_school_del\",\n                new SqlParameter(\"@ID\", 4));\n\n# 三，修改记录存储过程\n    SqlParameter[] para = { new SqlParameter(\"@ID\", 5), \n                                    new SqlParameter(\"@Name\", \"1234\") };\n    SqlHelper.ExecuteNonQuery(strConn, CommandType.StoredProcedure, \"proc_school_update\",\n                para);\n\n# 四，查询存储过程\n    SqlDataReader read = SqlHelper.ExecuteReader(strConn, CommandType.StoredProcedure, \"proc_school_select\", new SqlParameter(\"@ID\", 5));\n\n    while (read.Read())\n    {\n        string str0 = read[0].ToString();\n        string str1 = read[1].ToString();\n    }\n\nPS：对于调用存储过程时参数的传递方法，其实比较灵活。有兴趣的可以自己多多实验。","slug":"SqlHelperProcess","published":1,"updated":"2017-03-18T06:19:37.387Z","comments":1,"layout":"post","photos":[],"link":"","_id":"cj0evfi2w000vvcfu5c9evi26","content":"<p>ASP.NET中调用存储过程经常遇到这样那样的问题，特别是在有返回值参数的情况下。其实，并没有想象中的复杂。我们以之前博文中定义的存储过程为例。</p>\n<p><a href=\"http://blog.sina.com.cn/s/blog_6849d1c201017mo7.html\" target=\"_blank\" rel=\"external\">http://blog.sina.com.cn/s/blog_6849d1c201017mo7.html</a></p>\n<p>SqlHelper下载路径：<a href=\"http://www.kuaipan.cn/file/id_61213523170038890.htm\" target=\"_blank\" rel=\"external\">http://www.kuaipan.cn/file/id_61213523170038890.htm</a></p>\n<p>首先是定义链接字符串：</p>\n<pre><code>// 连接字符串\nstring strConn = &quot;Initial Catalog=&apos;Students&apos;;Server=&apos;127.0.0.1,1433&apos;;User ID=&apos;sa&apos;;Password=&apos;XXXXXX&apos;;Persist Security Info=True&quot;;\n// SQL 连接对象\nSqlConnection Connection = new SqlConnection(strConn);\n</code></pre><h1 id=\"一，插入新纪录存储过程\"><a href=\"#一，插入新纪录存储过程\" class=\"headerlink\" title=\"一，插入新纪录存储过程\"></a>一，插入新纪录存储过程</h1><pre><code>int ret = 0;\nSqlParameter[] arParms = new SqlParameter[2];\n\n// @Name Input Parameter\n// NChar 类型需要指定Size\narParms[0] = new SqlParameter(&quot;@Name&quot;, SqlDbType.NChar, 50);\narParms[0].Value = &quot;HHEE&quot;;\n\n// @NewID Output Parameter \n// 输出参数不需要赋值\narParms[1] = new SqlParameter(&quot;@NewID&quot;, SqlDbType.Int);\narParms[1].Direction = ParameterDirection.Output;\n\nSqlHelper.ExecuteNonQuery(strConn, CommandType.StoredProcedure, &quot;proc_school_insert&quot;, arParms);\n\nret = Int32.Parse(arParms[1].Value.ToString());\n</code></pre><h1 id=\"二，删除记录存储过程\"><a href=\"#二，删除记录存储过程\" class=\"headerlink\" title=\"二，删除记录存储过程\"></a>二，删除记录存储过程</h1><pre><code>SqlHelper.ExecuteNonQuery(strConn, CommandType.StoredProcedure, &quot;proc_school_del&quot;,\n            new SqlParameter(&quot;@ID&quot;, 4));\n</code></pre><h1 id=\"三，修改记录存储过程\"><a href=\"#三，修改记录存储过程\" class=\"headerlink\" title=\"三，修改记录存储过程\"></a>三，修改记录存储过程</h1><pre><code>SqlParameter[] para = { new SqlParameter(&quot;@ID&quot;, 5), \n                                new SqlParameter(&quot;@Name&quot;, &quot;1234&quot;) };\nSqlHelper.ExecuteNonQuery(strConn, CommandType.StoredProcedure, &quot;proc_school_update&quot;,\n            para);\n</code></pre><h1 id=\"四，查询存储过程\"><a href=\"#四，查询存储过程\" class=\"headerlink\" title=\"四，查询存储过程\"></a>四，查询存储过程</h1><pre><code>SqlDataReader read = SqlHelper.ExecuteReader(strConn, CommandType.StoredProcedure, &quot;proc_school_select&quot;, new SqlParameter(&quot;@ID&quot;, 5));\n\nwhile (read.Read())\n{\n    string str0 = read[0].ToString();\n    string str1 = read[1].ToString();\n}\n</code></pre><p>PS：对于调用存储过程时参数的传递方法，其实比较灵活。有兴趣的可以自己多多实验。</p>\n","excerpt":"","more":"<p>ASP.NET中调用存储过程经常遇到这样那样的问题，特别是在有返回值参数的情况下。其实，并没有想象中的复杂。我们以之前博文中定义的存储过程为例。</p>\n<p><a href=\"http://blog.sina.com.cn/s/blog_6849d1c201017mo7.html\">http://blog.sina.com.cn/s/blog_6849d1c201017mo7.html</a></p>\n<p>SqlHelper下载路径：<a href=\"http://www.kuaipan.cn/file/id_61213523170038890.htm\">http://www.kuaipan.cn/file/id_61213523170038890.htm</a></p>\n<p>首先是定义链接字符串：</p>\n<pre><code>// 连接字符串\nstring strConn = &quot;Initial Catalog=&apos;Students&apos;;Server=&apos;127.0.0.1,1433&apos;;User ID=&apos;sa&apos;;Password=&apos;XXXXXX&apos;;Persist Security Info=True&quot;;\n// SQL 连接对象\nSqlConnection Connection = new SqlConnection(strConn);\n</code></pre><h1 id=\"一，插入新纪录存储过程\"><a href=\"#一，插入新纪录存储过程\" class=\"headerlink\" title=\"一，插入新纪录存储过程\"></a>一，插入新纪录存储过程</h1><pre><code>int ret = 0;\nSqlParameter[] arParms = new SqlParameter[2];\n\n// @Name Input Parameter\n// NChar 类型需要指定Size\narParms[0] = new SqlParameter(&quot;@Name&quot;, SqlDbType.NChar, 50);\narParms[0].Value = &quot;HHEE&quot;;\n\n// @NewID Output Parameter \n// 输出参数不需要赋值\narParms[1] = new SqlParameter(&quot;@NewID&quot;, SqlDbType.Int);\narParms[1].Direction = ParameterDirection.Output;\n\nSqlHelper.ExecuteNonQuery(strConn, CommandType.StoredProcedure, &quot;proc_school_insert&quot;, arParms);\n\nret = Int32.Parse(arParms[1].Value.ToString());\n</code></pre><h1 id=\"二，删除记录存储过程\"><a href=\"#二，删除记录存储过程\" class=\"headerlink\" title=\"二，删除记录存储过程\"></a>二，删除记录存储过程</h1><pre><code>SqlHelper.ExecuteNonQuery(strConn, CommandType.StoredProcedure, &quot;proc_school_del&quot;,\n            new SqlParameter(&quot;@ID&quot;, 4));\n</code></pre><h1 id=\"三，修改记录存储过程\"><a href=\"#三，修改记录存储过程\" class=\"headerlink\" title=\"三，修改记录存储过程\"></a>三，修改记录存储过程</h1><pre><code>SqlParameter[] para = { new SqlParameter(&quot;@ID&quot;, 5), \n                                new SqlParameter(&quot;@Name&quot;, &quot;1234&quot;) };\nSqlHelper.ExecuteNonQuery(strConn, CommandType.StoredProcedure, &quot;proc_school_update&quot;,\n            para);\n</code></pre><h1 id=\"四，查询存储过程\"><a href=\"#四，查询存储过程\" class=\"headerlink\" title=\"四，查询存储过程\"></a>四，查询存储过程</h1><pre><code>SqlDataReader read = SqlHelper.ExecuteReader(strConn, CommandType.StoredProcedure, &quot;proc_school_select&quot;, new SqlParameter(&quot;@ID&quot;, 5));\n\nwhile (read.Read())\n{\n    string str0 = read[0].ToString();\n    string str1 = read[1].ToString();\n}\n</code></pre><p>PS：对于调用存储过程时参数的传递方法，其实比较灵活。有兴趣的可以自己多多实验。</p>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cj0evfi1e0001vcfu11ijwfpq","category_id":"cj0evfi1z0005vcfufpz613g8","_id":"cj0evfi2d000evcfug1v87ari"},{"post_id":"cj0evfi1r0003vcfuf8epi15s","category_id":"cj0evfi2b000avcfujfklayjh","_id":"cj0evfi2l000lvcfun4vmt2p4"},{"post_id":"cj0evfi2i000ivcful88l4jj3","category_id":"cj0evfi2h000gvcfu5vvfbgjc","_id":"cj0evfi2r000qvcfu5mgcmiqn"},{"post_id":"cj0evfi230007vcfuwpgay9ki","category_id":"cj0evfi2h000gvcfu5vvfbgjc","_id":"cj0evfi2t000tvcfuimcqz8wz"},{"post_id":"cj0evfi2k000kvcfu5ds2333z","category_id":"cj0evfi2h000gvcfu5vvfbgjc","_id":"cj0evfi2z000xvcfubpozotft"},{"post_id":"cj0evfi260008vcfupinahyon","category_id":"cj0evfi2h000gvcfu5vvfbgjc","_id":"cj0evfi300010vcfu3qv04dnz"},{"post_id":"cj0evfi2r000rvcfuz0250eli","category_id":"cj0evfi2h000gvcfu5vvfbgjc","_id":"cj0evfi310013vcfux2e7rnau"},{"post_id":"cj0evfi2w000vvcfu5c9evi26","category_id":"cj0evfi2h000gvcfu5vvfbgjc","_id":"cj0evfi320016vcfuaxg6o0ja"},{"post_id":"cj0evfi2a0009vcfurfvca38s","category_id":"cj0evfi2h000gvcfu5vvfbgjc","_id":"cj0evfi330019vcfut08chrt8"},{"post_id":"cj0evfi2c000dvcfuf7ix544d","category_id":"cj0evfi2h000gvcfu5vvfbgjc","_id":"cj0evfi35001bvcfu5wqihz8h"},{"post_id":"cj0evfi2f000fvcful6q704jn","category_id":"cj0evfi310014vcfuu7q9ou4s","_id":"cj0evfi37001fvcfuoe3h6qdc"},{"post_id":"cj0evfi2o000ovcfuldhm9jht","category_id":"cj0evfi35001cvcfubd28wsvk","_id":"cj0evfi38001ivcfu16f47oaw"}],"PostTag":[{"post_id":"cj0evfi1e0001vcfu11ijwfpq","tag_id":"cj0evfi220006vcfup907zlmf","_id":"cj0evfi2c000cvcfu33ce0tnm"},{"post_id":"cj0evfi1r0003vcfuf8epi15s","tag_id":"cj0evfi2b000bvcfuzjcofp6k","_id":"cj0evfi2j000jvcfu3gmutcyd"},{"post_id":"cj0evfi2k000kvcfu5ds2333z","tag_id":"cj0evfi2h000hvcfu8lygza8s","_id":"cj0evfi2r000pvcfunhqzygvc"},{"post_id":"cj0evfi230007vcfuwpgay9ki","tag_id":"cj0evfi2h000hvcfu8lygza8s","_id":"cj0evfi2z000wvcfu46jif8ua"},{"post_id":"cj0evfi230007vcfuwpgay9ki","tag_id":"cj0evfi2m000nvcfu76gqtsfh","_id":"cj0evfi30000zvcfuu1m1dupd"},{"post_id":"cj0evfi2r000rvcfuz0250eli","tag_id":"cj0evfi2h000hvcfu8lygza8s","_id":"cj0evfi310012vcfuxsm7l8ur"},{"post_id":"cj0evfi2w000vvcfu5c9evi26","tag_id":"cj0evfi2h000hvcfu8lygza8s","_id":"cj0evfi310015vcfubo6suqmd"},{"post_id":"cj0evfi260008vcfupinahyon","tag_id":"cj0evfi2h000hvcfu8lygza8s","_id":"cj0evfi330018vcfulww0zcon"},{"post_id":"cj0evfi2a0009vcfurfvca38s","tag_id":"cj0evfi2h000hvcfu8lygza8s","_id":"cj0evfi34001avcfu1qxaa2ie"},{"post_id":"cj0evfi2c000dvcfuf7ix544d","tag_id":"cj0evfi2h000hvcfu8lygza8s","_id":"cj0evfi36001evcfu9vi5ru78"},{"post_id":"cj0evfi2f000fvcful6q704jn","tag_id":"cj0evfi36001dvcfud0pu1rwz","_id":"cj0evfi38001hvcfuhwk8bpd9"},{"post_id":"cj0evfi2i000ivcful88l4jj3","tag_id":"cj0evfi2h000hvcfu8lygza8s","_id":"cj0evfi39001kvcfuvr9ybr56"},{"post_id":"cj0evfi2i000ivcful88l4jj3","tag_id":"cj0evfi37001gvcfu09zapk1l","_id":"cj0evfi39001lvcfuwd5lnb40"},{"post_id":"cj0evfi2o000ovcfuldhm9jht","tag_id":"cj0evfi39001jvcfuxgdh65xt","_id":"cj0evfi3a001mvcfuyul3t5zo"}],"Tag":[{"name":"blog","_id":"cj0evfi220006vcfup907zlmf"},{"name":"C","_id":"cj0evfi2b000bvcfuzjcofp6k"},{"name":"CSharp","_id":"cj0evfi2h000hvcfu8lygza8s"},{"name":"GDI","_id":"cj0evfi2m000nvcfu76gqtsfh"},{"name":"git","_id":"cj0evfi36001dvcfud0pu1rwz"},{"name":"Oracle","_id":"cj0evfi37001gvcfu09zapk1l"},{"name":"None","_id":"cj0evfi39001jvcfuxgdh65xt"}]}}